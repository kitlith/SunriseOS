var N=null,E="",T="t",U="u",searchIndex={};
var R=["A minimal Cursor for writing, for use in libcore.","Data backing this cursor.","Position of the cursor in the data.","bitand","usize","option","Port IO accessor.","The io port address.","The width of the port.","sunrise_libutils::io","A value that can only be accessed volatilely.","The value. Can only be accessed through .read()","Reads from this Io.","Read from this Io, and mask the value with `flags`.","Writes `value` to this Io.","sunrise_libutils","CursorWrite","CursorRead","Creates a new cursor wrapping the provided underlying…","Returns the current position of this cursor.","try_from","try_into","borrow_mut","result","type_id","borrow","typeid","sunrise_libutils::loop_future","formatter","ReadOnly","WriteOnly","BitArrayExt","Used to control the rule that should apply when a…","gmt_offset","calendartime","reserved","The count of time transitions.","The count of time type infos.","The count of chars.","The day of this rule.","timezonerule","timezoneresult","sunrise_libtimezone","Load the given timezones rules from a given slice contains…","posixtime","sunrise_libtimezone::conversion","calendartimeinfo","ordering","timetypeinfo","default","TimeTypeInfo","TimeZoneRule","CalendarTimeInfo","CalendarAdditionalInfo","CalendarTime","TimeZoneError","ConversionBuffer","TzifHeader","RuleType","sunrise_bootstrap","__private_field","privilegelevel","sunrise_bootstrap::gdt","segmentselector","descriptortablepointer","sunrise_bootstrap::gdt::i386::instructions","sunrise_bootstrap::gdt::i386","MAIN_TASK","FAULT_TASK","descriptortableentry","Creates an empty GDT descriptor, but with some flags set…","descriptortable","tssstruct","Gets the address as a `usize`.","physicaladdress","Rounds down to PAGE_SIZE.","Rounds up PAGE_SIZE.","virtualaddress","directory_physical_address","EntryFlags","The flags of a table entry","entryflags","pagestate","sunrise_bootstrap::paging","ActivePageTables","The page tables set currently in use.","InactivePageTables","A set of PageTables that are not the ones currently in…","PagingOffPageSet","Used at startup when paging is off to create and…","MappingType","The type of a Virtual Memory mapping. Can either be…","Present","i386 page table entry","An entry in a page table or page directory. An unused…","PageState","Represent the current state of this Page Table Entry: It…","Available","ENTRY_PHYS_ADDRESS_MASK","WRITABLE","USER_ACCESSIBLE","WRITE_THROUGH","HUGE_PAGE","GUARD_PAGE","IS_FRAME_ALLOC","USER_DEFINED_3","Returns an empty set of flags","Returns the set containing all flags.","Returns the raw value of the flags currently stored.","from_bits","Convert from underlying bit representation, unless that…","from_bits_truncate","Convert from underlying bit representation, dropping any…","Returns `true` if no flags are currently stored.","Returns `true` if all flags are currently set.","intersects","Returns `true` if there are flags common to both `self`…","Returns `true` all of the flags in `other` are contained…","Inserts the specified flags in-place.","Removes the specified flags in-place.","Toggles the specified flags in-place.","Inserts or removes the specified flags depending on the…","is_unused","Is the entry unused ?","set_unused","Clear the entry","Is the entry a page guard ?","Get the current entry flags","pointed_frame","Get the associated physical address, if available","Sets the entry","set_guard","Make this entry a page guard","Move the value T out of the PageState if it is Present(T).","Maps a PageState to PageState by applying a function to a…","as_option","Turns the PageState into an Option, setting both Guarded…","sunrise_bootstrap::paging::table","i386entryflags","Used at startup when creating the first page tables.","FlusherType","smarthierarchicaltable","Creates a mapping in the page tables with the given flags","find_available_virtual_space_aligned","Finds a virtual space hole that can contain page_nb…","Creates a mapping in the page tables with the given flags.…","flush_cache","is_empty","contains","inactivepagetables","enable_paging","PageTablesSet","mappingtype","Gets the current mapping state of this Virtual Address.","print_mapping","Prints the current mapping.","Deletes a mapping in the page tables, returning the Frame…","map_allocate_to","map_frame","Maps a given frame in the page tables. Takes care of…","get_page","map_page_guard","Reserves a given page as guard page. This affects only…","map_range_page_guard","Reserve a given region as guard pages. If the region spans…","map_range","Maps the given physical address range to the given virtual…","map_range_allocate","Maps a given number of consecutive pages at a given…","identity_map","Maps a memory frame to the same virtual address","identity_map_region","Identity maps a range of frames","find_available_virtual_space","set_page_readonly","Sets a previously mapped page as readonly","set_region_readonly","Sets a previously mapped range of pages readonly","start_addr","end_addr","A big bitmap denoting for every frame if it is free or not","is_allocated","Constructs a frame structure from a physical address","bootinformation","pagingoffpageset","bootstrapstack","sunrise_bootstrap::bootstrap_logging","clone_into","sunrise_bootstrap::gdt::segment_selector","to_owned","sunrise_bootstrap::gdt::i386::instructions::tables","sunrise_bootstrap::address","to_string","sunrise_bootstrap::paging::entry","sunrise_bootstrap::paging::table::entry","sunrise_bootstrap::frame_alloc","sunrise_bootstrap::bootstrap_stack","entries_mut","entries","get_table","create_table","Allocates a page table, zero it and add an entry to the…","get_directory","activepagedirectory","inactivepagedirectory","NO_CACHE","ACCESSED","deref_mut","Subtracting a length from an address gives another address","Subtracting two address gives their distance","Returns the set difference of the two sets of flags.","assert_receiver_is_total_eq","partial_cmp","Adding a length to an address gives another address","add_assign","sub_assign","Disables all flags enabled in the set.","Returns the complement of this set of flags.","Returns the intersection between the two sets of flags.","Returns the union of the two sets of flags.","Returns the left flags, but with all the right flags…","bitand_assign","Disables all flags disabled in the set.","bitor_assign","Adds the set of flags.","bitxor_assign","Toggles the set of flags.","index_mut","intoiterator","from_iter","systemdescriptortypes","initialize","AlignedStack","FramebufferTag","ModuleAlignmentTag","MultiBootHeader","DescriptorTable","DescriptorTableEntry","SystemDescriptorTypes","SegmentSelector","TssStruct","PrivilegeLevel","DescriptorTablePointer","PhysicalAddress","VirtualAddress","PageTable","PageDirectory","ActivePageDirectory","ActivePageTable","SmartHierarchicalTable","InactivePageDirectory","InactivePageTable","PagingOffDirectory","PagingOffTable","I386PageTablesSet","HierarchicalTable","PageTableTrait","PageDirectoryTrait","VirtualSpaceLand","KernelLand","AllocatorBitmap","FrameAllocator","BootstrapStack","_reserved1","reserved or unknown.","Mapped by using `svcMapMemory` to remap memory into the…","Mapped using `svcMapTransferMemory` when the owning…","Mapped with `svcControlCodeMemory`.","kernelerror","sunrise_libkern","process_category","64-bit instructions support.","Address space width of the process.","procinfoaddrspace","Whether to signal various conditions (such as exceptions).","Enable randomization of the various memory regions (heap,…","Process is an application. There can only be one…","The memory pool to use for this process.","poolpartition","ProcessState","SYSCALL_NAMES","Allows sending this region over IPC with buffer flag set…","Allows mapping this memory region to a DeviceAddressSpace…","memorystate","memoryattributes","memorypermissions","sunrise_libkern::error","sunrise_libkern::process","PERMISSION_CHANGE_ALLOWED","FORCE_READ_WRITABLE_BY_DEBUG_SYSCALLS","IPC_SEND_ALLOWED","NON_DEVICE_IPC_SEND_ALLOWED","NON_SECURE_IPC_SEND_ALLOWED","PROCESS_PERMISSION_CHANGE_ALLOWED","MAP_ALLOWED","UNMAP_PROCESS_CODE_MEMORY_ALLOWED","TRANSFER_MEMORY_ALLOWED","QUERY_PHYSICAL_ADDRESS_ALLOWED","MAP_DEVICE_ALLOWED","MAP_DEVICE_ALIGNED_ALLOWED","IPC_BUFFER_ALLOWED","IS_REFERENCE_COUNTED","MAP_PROCESS_ALLOWED","ATTRIBUTE_CHANGE_ALLOWED","CODE_MEMORY_ALLOWED","ALL_IPC_SEND_ALLOWED","CAN_IOMMU","IPC_MAPPED","DEVICE_MAPPED","EXECUTABLE","processcategory","processstate","processinfotype","memorytype","kipheader","MemoryState","MemoryAttributes","MemoryPermissions","MemoryInfo","MemoryType","KernelError","ProcInfoFlags","ProcessCategory","KipHeader","ProcessInfoType","PoolPartition","ProcInfoAddrSpace","InvalidSize","TransferMemory","SharedMemory","A new type definition.","Interface","decorator","interface","swipc_parser","swipc_parser::pest_parser","HandleType","Decorator","SwipcParser","fatfilesystem","The IStorage used.","partition_table_start","partition_entry_count","partition_entry_size","from_bytes","Conver the structure data to a raw array.","storagedevice","disk_initializer","disk_initializer::gpt","gptheader","GPTHeader","GPTPartitionEntry","PartitionManager","PartitionIterator","generate_ipc","Generate a module containing all the functions in the…","swipc_gen","swipc_gen::gen_rust_code","swipc_gen::itemmod","BUILTINS","mappingaccessrights","spinrwlock","crossprocessmapping","switch_to","sunrise_kernel::paging","kernelmemory","map_phys_region_to","physicalmemregion","Reads the state of the mapping at a given address.","get_hierarchy","The virtual memory belonging to kernel.","UserLand","The virtual memory belonging to user.","A trait describing the splitting of virtual memory between…","The first address in this land.","The last address in this land.","Returns the address of this mapping.","mappingframes","mapping","mirror_mapping","A hierarchical paging is composed of entries. An entry can…","Available, aka unused. Will page fault on use.","Guarded. Reserved and will cause a pagefault on use. Used…","Present. Used and has a backing physical address.","is_guard","zero out the whole table","map_nth_entry","guard_nth_entry","Marks the nth entry as guard page","sunrise_kernel::paging::hierarchical_table","is_paging_on","Check if the paging is currently active.","flush_tlb","Flush the Translation Lookaside Buffer…","Changes the content of the cr3 register, and returns the…","Reads the value of cr3, retrieving the current page…","Reads the value of cr2, retrieving the address that caused…","sunrise_kernel::paging::arch::i386","InactiveHierarchy","A currently inactive hierarchy of directory and tables.","The address we must put in cr3 to switch to these pages.","TlbFlush","When passing this struct the TLB will be flushed. Used by…","get_table_address","reduce recursive mapping by one time to get further down…","RecursiveTablesLand","The virtual memory pointing to active page tables by…","DIRECTORY_RECURSIVE_ADDRESS","When paging is on, accessing this address loops back to…","PAGE_SIZE","ENTRY_COUNT","QueryMemory","Because we do not store Available mappings internally, we…","The address fell in an available range.","The address fell in an existing mapping.","sunrise_kernel::paging::process_memory","sunrise_kernel::paging::bookkeeping","Returns the mapping `address` falls into, or if it is…","querymemory","Returns the mapping `address` falls into.","find_available_space","Finds a hole in virtual space at least `length` long.","The page size. Dictated by the MMU. In simple, elegant,…","InactiveHierarchyTrait","A trait implemented by inactive table hierarchies.","Creates a hierarchy. Allocates at least a top level…","Switches to this hierarchy.","copy_active_kernel_space","Performs a shallow copy of the top level-directory section…","is_currently_active","Checks if this inactive hierarchy is actually the…","from_currently_active","Returns the currently active hierarchy as an inactive…","Shorthand for USER_ACCESSIBLE | WRITABLE","sunrise_kernel","Pointer to the shared event representation.","waiting_processes","List of processes waiting on this IRQ. When this IRQ is…","userspaceerror","clear_signal","Clears the signaled state.","sunrise_kernel::error","backtrace","sunrise_kernel::error::KernelError","address","directives","sunrise_kernel::log_impl::filter","levelfilter","sunrise_kernel::log_impl","This crate is x86_64's little brother. It provides i386…","The Task State Segment (TSS) is a special data structure…","_reserved2","_reserved3","_reserved4","_reserved5","_reserved6","_reserved7","_reserved8","_reserved9","_reserveda","ldt_selector","_reservedb","_reservedc","iopboffset","Represents a protection ring level.","Privilege-level 0 (most privilege): This level is used by…","Privilege-level 1 (moderate privilege): This level is used…","Privilege-level 2 (moderate privilege): Like level 1, this…","Privilege-level 3 (least privilege): This level is used by…","sunrise_kernel::i386","Set by hardware if last arithmetic operation resulted in a…","Set by hardware if last arithmetic operation generated a…","stack_address","STACK_SIZE","The size of a kernel stack in pages, not accounting for…","STACK_SIZE_WITH_GUARD","The size of a kernel stack in pages, with the page guard.","STACK_SIZE_WITH_GUARD_IN_BYTES","The size of the kernel stack, with the page guard, as a…","STACK_ALIGNMENT","The alignment of the stack.","allocate_stack","kernelstack","STACK_POISON_SIZE","create_poison_pointers","Puts two poisons pointers at the base of the stack for the…","get_stack_start","Types for the Global Descriptor Table and segment selectors.","Specifies which element to load into a segment from…","Creates a new SegmentSelector","Returns the GDT index.","Returns the requested privilege level.","sunrise_kernel::i386::structures","interrupts","InterruptGate16","TrapGate16","InterruptGate32","TrapGate32","Set an interrupt gate function for the IDT entry and sets…","entryoptions","Set or reset the preset bit.","pagefaulterrorcode","process_switch","threadstruct","GDT Handler","One of the two tables.","The index in the GDT of the Userland thread local storage…","AvailableTss16","BusyTss16","CallGate16","AvailableTss32","BusyTss32","CallGate32","GLOBAL_LDT","The global LDT used by all the processes.","load_global","null_descriptor","new_system","Creates a new LDT descriptor.","Creates a GDT descriptor pointing to a TSS segment","get_limit","set_limit","get_accessed","is_readwrite_allowed","is_comformant","is_executable","get_ring_level","get_present","is_4k_granularity","set_4k_granularity","If true, the limit is a count of 4k pages. If false, it is…","Global state for the interrupt handler.","Auto generated function. See [generate_trap_gate_handler].","userspacehardwarecontext","Overriding the default panic strategy so we can display cr2","Auto generated irq handler. See [`irq_handler`].","Update the Registers with the passed result.","instructions","Low level functions for special i386 instructions.","Instructions for loading descriptor tables (GDT, IDT, etc.).","A struct describing a pointer to a descriptor table (GDT /…","Size of the DT.","Load GDT table.","Load LDT table.","Sets the task register to the given TSS segment.","Load IDT table.","segmentation","sunrise_kernel::i386::instructions","Provides functions to read and write segment registers.","Reload code segment register. Note this is special since…","Reload stack segment register.","Reload data segment register.","Reload es segment register.","Reload fs segment register.","Reload gs segment register.","Returns the current value of the code segment register.","Interrupt disabling functionality.","Enable interrupts","Disable interrupts","Creates a `PrivilegeLevel` from a numeric value. The value…","Fills the TSS.","userspaceptr","userspaceptrmut","query_memory","memoryinfo","PhysicalMemRegion","Constructs a `PhysicalMemRegion` from a physical address,…","sunrise_kernel::frame_allocator","memory_bitmap","initialized","The physical memory manager.","addr_to_frame","Gets the frame number from a physical address","frame_to_addr","Gets the physical address from a frame number","Initialize the [FrameAllocator] by parsing the multiboot…","mark_area_reserved","Marks a physical memory area as reserved and will never…","mark_area_free","Marks a physical memory area as free for frame allocation","mark_frame_bootstrap_allocated","Marks a physical memory frame as already allocated…","A physical memory manger to allocate and free memory frames","FRAME_OFFSET_MASK","FRAME_BASE_MASK","FRAME_BASE_LOG","FRAMES_BITMAP_SIZE","FRAME_FREE","FRAME_OCCUPIED","Cached value of…","interrupt_route_capability","Control HPET activation (control main timer activation…","Control \"legacy replacement\" mapping activation state.","Control Timer Interrupt Type: 0 = Edge Trigger, 1 = Level…","Control Timer Interrupt.","Control Timer Type: 0 = One Shot, 1 = Periodic","Set to 1 to allow software to write the accumulator data.","Set to 1 to force a 64 bit timer to operate as 32 bit one","Timer Interrupt Route: This indicate the routing in the…","Timer FSB Interrupt: force the interrupts to be delivered…","support_64bit","support_periodic_interrupt","support_fsb_interrupt","set_interrupt_route","hpettimer","sunrise_kernel::devices","acknowledge","Acknowledges an IRQ, allowing the PIC to send a new IRQ on…","PIT_PORTS","port61flags","spin_wait_ms","Spin waits for at least `ms` amount of milliseconds","A logger that sends its output to COM1.","serialcolor","serialattributes","See [LocalApic::in_service()] documentation.","See [LocalApic::trigger_mode()] documentation.","See [LocalApic::interrupt_request_register()] documentation.","See [LocalApic::send_interrupt_command()] documentation.","Specifies interrupt delivery when an interrupt is signaled…","Interrupt vector number.","Specifies the type of interrupt to be sent to the…","deliverymode","Specifies the polarity of the corresponding interrupt pin:…","Selects the trigger mode for the local LINT0 and LINT1…","Interrupt mask: (`false`) enables reception of the…","Selects timer mode. See [TimerMode] for possible values.","timermode","Determines the vector number to be delivered to the…","Allows software to temporarily enable (1) or disable (0)…","Determines whether an EOI for a level-triggered interrupt…","Set when the local APIC detects a checksum error for a…","Set when the local APIC detects an illegal vector (one in…","local_apic_id","Unique ID of this Local APIC. May also be used as a way to…","trigger_mode","DeliveryMode","Specifies how the APICs listed in the destination field…","Unknown delivery mode encountered.","The vector field is an 8 bit field containing the…","delivery_mode","set_delivery_mode","The Delivery Mode is a 3 bit field that specifies how the…","This field determines the interpretation of the…","delivery_status","This bit specifies the polarity of the interrupt signal.…","remote_irr","set_trigger_mode","The trigger mode field indicates the type of signal on the…","When this bit is 1, the interrupt signal is masked.…","If the Destination Mode of this entry is Physical Mode,…","interrupt_base","Start of the IRQ range handled by this IO-APIC device.…","redirection_entry_count","redirectionentry","internal","spinlockirqguard","Disables interrupts and locks the mutex.","force_unlock","sunrise_kernel::sync","into_inner","mutexguard","try_lock","irq_period_ns","waiting_threads","ReadableEvent","WritableEvent","allocate_tls","processmemory","capabilities","sunrise_kernel::process","ProcessCapabilities","Capabilities of a process.","syscall_mask","Bitmask of syscall access controls. Should be accessed…","irq_access_mask","Bitmask of allowed interrupts. Should be accessed through…","A vector of readable IO ports.","processcapabilities","waitable","clientport","serversession","clientsession","writableevent","readableevent","Gets the Kernel Handle associated with the given userspace…","procinfo","processstruct","processstatedata","Gets the ProcessStruct of the current thread, incrementing…","create_first_process","Represents a Physical address","Represents a Virtual address","round_to_page","Rounds an address to its page address","round_to_page_upper","Rounds an address to the next page address except if its…","checked_add","check_aligned_to","Checks that this address meets the given alignment.","serverport","connect_to_named_port","ClientSession","ServerSession","Create a new Session pair. Those sessions are linked to…","cbufbehavior","sunrise_kernel::ipc","accepters","servercount","ClientPort","ServerPort","Create a new Port pair. Those ports are linked to…","Returns a ClientPort from this Port.","NAMED_PORTS","elf_loader","mappedgrubmodule","load_segment","Loads an elf segment by coping file_size bytes to the…","programheader","sunrise_kernel::utils","sunrise_kernel::panic","sunrise_kernel::panic::PanicOrigin","exception_message","Formatted string of the exception name, and optional cpu…","sunrise_kernel::paging::kernel_memory","sunrise_kernel::paging::lands","sunrise_kernel::paging::mapping","sunrise_kernel::paging::cross_process","sunrise_kernel::paging::arch::i386::entry","sunrise_kernel::paging::arch::i386::table","sunrise_kernel::event","sunrise_kernel::log_impl::filter::inner","sunrise_kernel::i386::acpi","sunrise_kernel::i386::registers::eflags","sunrise_kernel::i386::stack","sunrise_kernel::i386::structures::gdt","sunrise_kernel::i386::structures::idt","sunrise_kernel::i386::process_switch","sunrise_kernel::i386::gdt","sunrise_kernel::i386::interrupt","sunrise_kernel::i386::interrupt_service_routines","sunrise_kernel::utils::io","sunrise_kernel::i386::instructions::tables","sunrise_kernel::frame_allocator::physical_mem_region","into_iter","sunrise_kernel::frame_allocator::i386","sunrise_kernel::heap_allocator","sunrise_kernel::devices::hpet","sunrise_kernel::devices::pic","sunrise_kernel::devices::pit","sunrise_kernel::devices::rs232","sunrise_kernel::devices::lapic","set_bit","sunrise_kernel::devices::ioapic","sunrise_kernel::sync::spin_lock_irq","sunrise_kernel::sync::mutex","sunrise_kernel::timer","sunrise_kernel::process::thread_local_storage","sunrise_kernel::process::capabilities","sunrise_kernel::mem","sunrise_kernel::ipc::session","sunrise_kernel::ipc::port","sunrise_kernel::elf_loader","sunrise_kernel::utils::loop_future","sunrise_kernel::cpu_locals","into_result","from_error","table_level","get_child_table","create_child_table","Panics, a page table has no children.","activepagetable","inactivepagetable","flush_whole_cache","get_top_level_table","map_to_from_iterator","for_every_entry","is_signaled","register","allocate_region","allocate_frames_fragmented","Allocates physical frames, possibly fragmented across…","free_region","check_is_allocated","check_is_reserved","PRESENT","USER_DEFINED_2","VIRTUAL_INTERRUPT_PENDING","VIRTUAL_INTERRUPT","ALIGNMENT_CHECK","VIRTUAL_8086_MODE","RESUME_FLAG","NESTED_TASK","IOPL_HIGH","OVERFLOW_FLAG","DIRECTION_FLAG","INTERRUPT_FLAG","TRAP_FLAG","SIGN_FLAG","ZERO_FLAG","AUXILIARY_CARRY_FLAG","PARITY_FLAG","CARRY_FLAG","PROTECTION_VIOLATION","CAUSED_BY_WRITE","USER_MODE","MALFORMED_TABLE","INSTRUCTION_FETCH","INTERVAL4","SPKR_CONTROL","OUT2_STATUS","OUT1_STATUS","SEND_CHECKSUM_ERROR","RECEIVE_CHECKSUM_ERROR","SEND_ACCEPT_ERROR","RECEIVE_ACCEPT_ERROR","REDIRECTABLE_IPI","SEND_ILLEGAL_VECTOR","RECEIVE_ILLEGAL_VECTOR","ILLEGAL_REGISTER_ADDRESS","spinlock","gatetype","threadstate","write_str","Writes a string to COM1.","steps_between","replace_one","replace_zero","add_usize","channelselector","bit_range","set_bit_range","physicalmapping","InvalidKernelCaps","NotImplemented","InvalidAddress","InvalidMemState","InvalidCombination","ExceedingMaximum","InvalidState","ReservedValue","Consumes this mutex, returning the underlying data.","Creates a new spinlock wrapping the supplied data.","rwlockreadguard","rwlockwriteguard","rwlockupgradeableguard","write_raw","MappingAccessRights","ProcessMemory","DynamicHierarchy","KernelMemory","MappingFrames","CrossProcessMapping","HierarchicalEntry","PagingCacheFlusher","TableHierarchy","I386EntryFlags","I386Entry","UserspaceBookkeeping","UserspaceError","Directive","KernelStack","StackDumpSource","EntryOptions","ExceptionStackFrame","PageFaultErrorCode","ThreadHardwareContext","GdtManager","DoubleFaultTaskStack","InterruptHandler","UserspaceHardwareContext","PhysicalMemRegionIter","FrameAllocatori386","FrameAllocatorTraitPrivate","FrameAllocatorTrait","Allocator","HpetIdRegister","HpetGeneralConfigurationRegister","HpetTimerConfigurationRegister","HpetRegister","HpetTimerRegister","HpetTimer","InternalPic","Port61Flags","PITChannel2","ChannelSelector","SerialAttributes","SerialInternal","SerialColor","SerialLogger","LocalApicRegister","LocalApicVersion","LocalVector","SpuriousInterrupt","LocalApicInternal","LocalApic","TimerMode","IoApicInternal","RedirectionEntry","SpinLockGuard","SpinRwLock","SpinRwLockReadGuard","SpinRwLockWriteGuard","SpinLockIRQ","SpinLockIRQGuard","MutexInner","MutexInnerInner","MutexGuard","KernelTimerInfo","ProcessStateData","ProcessStruct","ThreadStruct","ThreadStateEvent","HandleTable","ThreadState","TLSManager","MaskPrinter","UserSpacePtr","UserSpacePtrMut","SessionRequests","MsgPackedHdr","HandleDescriptorHeader","CBufBehavior","IncomingConnection","MappedGrubModule","Splittable","ThreadControlBlock","CpuLocalRegion","PanicOrigin","ActiveHierarchy","MemoryHandler","The type of this mapping.","_reserved0","Kernel syscall error codes.","Kernel capabilities are invalid.","This function is not implemented.","The size argument is invalid.","The passed address is invalid.","MemoryFull","The virtual address space was exhausted.","HandleTableFull","The process' handle table is full.","The memory state is invalid for this action.","InvalidMemPerms","The memory permissions passed are wrong.","InvalidMemRange","Memory range is not at an expected location.","InvalidThreadPriority","Invalid thread priority. Thread priority should be within…","InvalidProcessorId","Invalid processor id. Processor ID should exist on the…","InvalidHandle","Passed handle is invalid.","CopyFromUserFailed","Attempt to copy the userspace address failed.","The combination of argument is invalid.","A timeout was reached.","The syscall was cancelled through cancel_synchronization.","A size or address was given exceeding the maximum allowed…","InvalidEnum","No enum variants match this integer value.","NoSuchEntry","The given entry does not exist.","PortRemoteDead","The remote part of the session was closed.","Attempted to do an operation that's invalid in the…","Attempted to use an unknown value, reserved for future use.","Transforms a KernelError into the encoding acceptable for…","from_syscall_ret","Turns a syscall return value into a Kernel Error.","from_description","Turns a kernel error description into a KernelError.","description","Gets the underlying KernelError description.","The state the process is currently in.","READABLE","Align the address to the next alignment.","align_down","Align the address to the previous alignment.","align_up_checked","align_up, but checks if addr overflows","Counts the numbers of `b` in `a`, rounding the result up.","print_hexdump","Displays memory as hexdump","print_hexdump_as_if_at_addr","Makes a hexdump of a slice, but display different…","bit_array_first_zero","Returns the index of the first 0 in a bit array.","bit_array_first_one","Returns the index of the first 1 in a bit array.","bit_array_first_count_one","Returns the index of the first instance of count…","log2_floor","Returns the floored base 2 logarithm of the number.","log2_ceil","Returns the ceiled base 2 logarithm of the number.","Cast a slice while keeping the lifetimes.","The IO interface","A read-only wrapper around an IO device.","An Io that we can only write to.","Create a PIO from a given port","Create a new Mmio without initializing.","The Io trait allows for accessing device IO in a generic…","The width of the IO access. Should be a primitive type…","Mask `value` with `flags`, and write it to this device…","Create a read-only wrapper around the IO device address.","Creates a WriteOnly Io.","cursorwrite","Skip the given amount of bytes, returning a mutable slice…","Writes an u8 in the given byte ordering.","Writes a u16 in the given byte ordering.","Writes a u32 in the given byte ordering.","Writes a u64 in the given byte ordering.","Writes the given byte slice entirely.","Writes the given structure.","Reads an u8 in the given byteorder.","Reads an u16 in the given byteorder.","Reads an u32 in the given byteorder.","Reads an u64 in the given byteorder.","Reads `v.len()` bytes from the stream, and asserts that it…","Skips `bytelen` bytes, returning a slice to them for…","Reads the given structure from the bytestream.","loop_future","Definition of the `LoopFn` combinator, implementing…","A future implementing a tail-recursive loop.","Future representing the current loop iteration.","Function called on every new iteration to generate that…","The status of a `loop_fn` loop.","Indicates that the loop has completed with output `T`.","Indicates that the loop function should be called again…","Creates a new future implementing a tail-recursive loop.","Extension of the [BitField] trait, that adds the…","set_bits_area","Sets a range of bits to `value` in the BitField.","enum_with_val","Creates a fake C-like enum, where all bit values are…","initialize_to_zero","A macro to initialize a struct directly in global.","Performs a volatile read of the value.","Performs a volatile write of the value.","Debug volatilely reads `value`.","Debug does not access the write only value.","Indicates whether a value is available or if the current…","Represents that a value is immediately ready.","Represents that a value is not ready yet.","sunrise_libuser","Header for Kernel Builtins. Can be found in the…","Should be *b\"KIP1\".","Name of the program. Pad with \\0 if it's less than 12 bytes.","Titleid of the program. Should start with 0x02 to avoid…","Category of the process. Should always be KernelBuiltin.","main_thread_priority","Priority of the starting thread.","default_cpu_core","CPU core the starting thread runs on.","Reserved, leave to 0.","Bitflags controlling the behavior of the process:","stack_page_count","Number of pages for the starting thread's stack.","Category of the process.","Syscall numbers","SetHeapSize","SetMemoryPermission","SetMemoryAttribute","UnmapMemory","ExitProcess","CreateThread","StartThread","SleepThread","GetThreadPriority","SetThreadPriority","GetThreadCoreMask","SetThreadCoreMask","GetCurrentProcessorNumber","SignalEvent","MapSharedMemory","UnmapSharedMemory","CreateTransferMemory","CloseHandle","ResetSignal","WaitSynchronization","CancelSynchronization","ArbitrateLock","ArbitrateUnlock","WaitProcessWideKeyAtomic","SignalProcessWideKey","GetSystemTick","ConnectToNamedPort","SendSyncRequestLight","SendSyncRequest","SendSyncRequestWithUserBuffer","SendAsyncRequestWithUserBuffer","GetProcessId","GetThreadId","OutputDebugString","ReturnFromException","FlushEntireDataCache","FlushDataCache","MapPhysicalMemory","UnmapPhysicalMemory","GetFutureThreadInfo","GetLastThreadInfo","GetResourceLimitLimitValue","GetResourceLimitCurrentValue","SetThreadActivity","GetThreadContext3","WaitForAddress","SignalToAddress","DumpInfoNew","CreateSession","AcceptSession","ReplyAndReceiveLight","ReplyAndReceive","ReplyAndReceiveWithUserBuffer","CreateEvent","MapPhysicalMemoryUnsafe","UnmapPhysicalMemoryUnsafe","SetUnsafeLimit","CreateCodeMemory","ControlCodeMemory","SleepSystem","ReadWriteRegister","SetProcessActivity","CreateSharedMemory","MapTransferMemory","UnmapTransferMemory","CreateInterruptEvent","QueryPhysicalAddress","QueryIoMapping","CreateDeviceAddressSpace","AttachDeviceAddressSpace","DetachDeviceAddressSpace","MapDeviceAddressSpaceByForce","MapDeviceAddressSpaceAligned","MapDeviceAddressSpace","UnmapDeviceAddressSpace","InvalidateProcessDataCache","StoreProcessDataCache","FlushProcessDataCache","DebugActiveProcess","BreakDebugProcess","TerminateDebugProcess","GetDebugEvent","ContinueDebugEvent","GetProcessList","GetThreadList","GetDebugThreadContext","SetDebugThreadContext","QueryDebugProcessMemory","ReadDebugProcessMemory","WriteDebugProcessMemory","SetHardwareBreakPoint","GetDebugThreadParam","GetSystemInfo","ManageNamedPort","ConnectToPort","SetProcessMemoryPermission","MapProcessMemory","UnmapProcessMemory","QueryProcessMemory","MapProcessCodeMemory","UnmapProcessCodeMemory","CreateProcess","StartProcess","TerminateProcess","GetProcessInfo","CreateResourceLimit","SetResourceLimitLimitValue","CallSecureMonitor","MapFramebuffer","StartProcessEntrypoint","MapMmioRegion","SetThreadArea","sunrise_libuser::syscalls","The structure returned by the `query_memory` syscall.","The base address of this memory region.","The size of this memory region, from the base address.","The attributes of this mapping.","The permissions of this mapping.","ipc_ref_count","Counts how many IPC service requests have an IPC buffer in…","device_ref_count","Memory permissions of a memory area.","Kernel memory pool.","Application","Pool of memory usable by applications. Usually 3GiB.","Pool of memory usable by applets. Usually 512MiB.","Pool of memory usable by system modules.","Pool of memory usable by nvidia's driver.","Address space type to use when creating a process.","32-bit address space, spanning from 0x00200000 to…","AS32BitNoMap","32-bit address space without the map region.","36-bit address space, spanning from 0x08000000 to…","39-bit address space, spanning from 0x08000000 to…","Miscelaneous flags.","Informations necessary for the create_process syscall.","Name of the process (as seen by debuggers).","Category of the process. Should always be RegularTitle.","TitleId of the process (as seen by svcGetInfo and…","Address where the main module's code will be loaded. Must…","code_num_pages","Number of pages to allocate for code.","Miscelaneous flags","resource_limit_handle","Resource limit to use for this process. If None, will use…","system_resource_num_pages","Maximum amount of kernel memory used to create the…","Kind of information to extract from a process wit…","set_heap_size","Resize the heap of a process, just like a brk. It can both…","exit_process","create_thread","start_thread","exit_thread","sleep_thread","signal_event","Sets the \"signaled\" state of an event. Calling this on an…","clear_event","Clear the \"signaled\" state of an event. After calling this…","create_shared_memory","sharedmemory","map_shared_memory","unmap_shared_memory","close_handle","wait_synchronization","send_sync_request_with_user_buffer","output_debug_string","create_session","accept_session","reply_and_receive_with_user_buffer","create_event","create_interrupt_event","query_physical_address","Gets the physical region a given virtual address maps.","create_port","manage_named_port","Creates a named port.","connect_to_port","map_framebuffer","map_mmio_region","Maps a physical region in the address space of the process.","set_thread_area","Set thread local area pointer.","set_process_memory_permission","Change permission of a page-aligned memory region.…","map_process_memory","Maps the given src memory range from a remote process into…","unmap_process_memory","Unmaps a memory range mapped with [map_process_memory()].…","create_process","start_process","Start the given process on the provided CPU with the…","get_process_info","Extract information from a process.","reset_signal","Clear the \"signaled\" state of a readable event or process.…","handleref","get_process_id","Gets the PID of the given Process handle. Alias handles…","syscall_inner","The readable part of an event. The user shall use this end…","The writable part of an event. The user shall use this end…","Signals the event, setting its state to signaled and…","wait_async","workqueue","mappedsharedmemory","Represenens the header of an HIPC command.","Part of an HIPC command. Sent only when…","sunrise_libuser::ipc","sunrise_libuser::ipc::IPCBufferType","Determines what MemoryState to use with the mapped memory…","from_raw_parts","from_raw_parts_mut","num_x_descriptors","set_num_x_descriptors","num_a_descriptors","set_num_a_descriptors","num_b_descriptors","set_num_b_descriptors","num_w_descriptors","set_num_w_descriptors","raw_section_size","set_raw_section_size","c_descriptor_flags","set_c_descriptor_flags","enable_handle_descriptor","set_enable_handle_descriptor","set_send_pid","num_copy_handles","set_num_copy_handles","num_move_handles","set_num_move_handles","ipcbuffer","thread_local_storage","Elf TLS TCB","tp_self_ptr","Pointer containing its own address.","Pointer to the allocated memory","Layout of the allocated memory. Used when deallocating.","Offset of the TCB in this allocation.","tls_align_up","The `round` function, as defined in section 3.0:","Returns a pointer to the [ThreadControlBlock] in the…","threadcontrolblock","Service Manager","Initialize the UserInterface, acquiring the Pid of the…","get_service","Returns a handle to the given service. IPC messages may be…","futureobj","register_service","Registers a service with the given name. The user can use…","unregister_service","Unregisters a service with the given name. Future calls to…","dispatch","Handle an incoming IPC request.","iuserinterfaceproxy","Auto-generated documentation","Entry point interface.","ibufferproxy","create_buffer","Create a window.","get_screen_resolution","Gets the screen resolution.","get_font_height","Gets the height of the font used for rendering a terminal…","create_terminal","Create a terminal.","ipipeproxy","IPC Window object","Blit the buffer to the framebuffer.","viinterfaceproxy","Main ahci interface.","discovered_disks_count","Asks to the ahci service how many disks it has discovered.","Gets the interface to a disk.","idiskproxy","Interface to an AHCI device.","sector_count","Retrieves the number of addressable 512-octet sectors on…","Reads sectors from the disk.","Writes sectors to the disk.","ahciinterfaceproxy","Represent the basic informations of a local time.","day_of_week","day_of_year","The GMT offset of the timezone used to generate this local…","TimeZone service object","locationname","to_calendar_time","to_posix_time","get_device_location_name","Get the time zone name used on this devie","set_device_location_name","Set the time zone name used on this devie","get_total_location_name_count","Get the total count of location name available","load_location_name_list","Load the list of location name available","load_timezone_rule","Load a time zone rule","Convert a PosixTime to a local time using a TimeZoneRule","to_calendar_time_with_my_rule","Convert a PosixTime to a local time using the device…","Convert a local time to a PosixTime using a TimeZoneRule.","to_posix_time_with_my_rule","Convert a local time to a PosixTime using the device…","RTC interface","get_rtc_time","Get the current RTC time","get_rtc_event","Event triggered on RTC time update","Entry point interface","timezoneserviceproxy","get_timezone_service","Get the TimeZone service object","rtcmanagerproxy","staticserviceproxy","Creates a new [StaticServiceProxy] by connecting to the…","Represent a filesystem.","filesystempath","directoryentrytype","idirectoryproxy","filetimestampraw","filesystemtype","create_file","Create a file with a given `size` at the specified `path`.","delete_file","Delete a file at the specified `path`.","create_directory","Create a directory at the specified `path`.","delete_directory","Delete a directory at the specified `path`.","rename_file","Rename a file at `old_path` into `new_path`.","rename_directory","Rename a directory at `old_path` into `new_path`","get_entry_type","Get the informations about an entry on the filesystem.","Open a file at the specified `path` with the given `mode`…","ifileproxy","open_directory","Open a directory at the specified `path` with the given…","get_free_space_size","Get the total availaible space on the given filesystem.","get_total_space_size","Get the total size of the filesystem.","get_file_timestamp_raw","Return the attached timestamps on a resource at the given…","get_filesystem_type","Get the type of this filesystem.","This is the interface for a raw device, usually a block…","Read the content of a storage at a given `offset` in…","Write the content given `in_buf` at the given `offset` in…","Flush any data not written on the storage.","Resize the storage with the given `size`.","Return the current storage size.","Entry point of the file system interface.","ifilesystemproxy","istorageproxy","partitionid","open_disk_partition","Open a disk partition filesystem. This may fail if no…","open_disk_storage","Open a disk as a block device. This may fail if no…","format_disk_partition","Format a disk partition to the given filesystem type.","initialize_disk","Initialize a disk partition table","Represent a directory in a filesystem.","Read the next directory entries and return the number of…","get_entry_count","Return the count of entries in the directory.","Represent a file in a filesystem.","Read the content of a file at a given `offset` in…","Flush any data not written on the filesystem.","Resize the file with the given `size`. If the file isn't…","Return the current file size.","ifilesystemserviceproxy","StaticServiceProxy","StaticService","Keyboard interface","StaticServiceAsync","get_keyboard_event","Get an handle to an event triggered on keyboard update.","read_keyboard_states","Read the x last pressed keys into the given buffer. A size…","A mishmash of Nintendo's loader and pm in a single…","launch_title","Create, load and start the process `title_name` with the…","Wait for the process with the given pid, returning the…","iloaderinterfaceproxy","IPC Pipe Object","Reads data from the pipe.","Writes data to the other side of the pipe.","The Twili Manager is responsible for registering a…","register_pipes","Registers the pipe of a remote process.","The Twili Service is responsible for providing the…","Recover the stdin/stdout/stderr pipes for the current…","itwilimanagerserviceproxy","itwiliserviceproxy","open_pipes","An instance of this interface cannot be acquired by asking…","Let's make things a bit more interesting by adding a…","This is the most simple kind of function: It takes no…","Here's a more complex function. This function takes two…","Interfaces can also return other interfaces. We call an…","iexample3subsessionproxy","The type of an instance of an interface is…","There are two more kinds of types that are important:…","Here's a simple function taking a buffer as an argument…","Here's a simple example of an interface. This is a service…","iexample2proxy","function","iexample3proxy","iexample4proxy","iexample1proxy","TimeNotFound","The given calendar timestamp couldn't be computed.","Signed overflow/underflow happened.","OutOfRange","Safely expands the heap if possible.","try_read_key","If a key press is pending, return its unicode…","Auto generated for rebuilding…","sunrise_libuser::loop_future","sunrise_libuser::io","sunrise_libuser::types","sunrise_libuser::ipc::server","sunrise_libuser::threads","sunrise_libuser::thread_local_storage","sunrise_libuser::futures","sunrise_libuser::sm","sunrise_libuser::vi","sunrise_libuser::ahci","sunrise_libuser::time","sunrise_libuser::fs","sunrise_libuser::keyboard","sunrise_libuser::ldr","sunrise_libuser::twili","sunrise_libuser::example","sunrise_libuser::error","sunrise_libuser::allocator","sunrise_libuser::terminal","sunrise_libuser::ps2","sunrise_libuser::window","sunrise_libuser::zero_box","sunrise_libuser::log_impl","hidkeyboardstatetype","hidkeyboardscancode","filesystemerror","libusererror","loadererror","ipcbuffertype","simpleworkqueue","calendaradditionalinfo","ahcierror","timeerror","Changes the ready value of this `Poll` with the closure…","Returns `true` if this is `Poll::Ready`","Returns `true` if this is `Poll::Pending`","Changes the success value of this `Poll` with the closure…","Changes the error value of this `Poll` with the closure…","RegularTitle","Regular process created through the userspace loader.","KernelBuiltin","Process loaded by the kernel early during the boot process.","Checks that the permissions as valid - that is, it should…","The area is readable.","The area is writable.","The area is executable.","The area is ReadOnly.","The area is RW.","The area is RX.","Checks that the ProcInfoFlags doesn't contain any unknown…","address_space_type","set_address_space_type","is_application","set_application","use_secure_memory","pool_partition","set_pool_partition","optimize_memory_allocation","Process is freshly created with svcCreateProcess and has…","CreatedAttached","Process has been attached with a debugger before it was…","Process has been started.","Process has crashed.","StartedAttached","Process is started and has a debugger attached.","Process is currently exiting.","Process is stopped.","DebugSuspended","Process has been suspended.","Get the state the process is currently in.","MappedSharedMemory","IPCBufferType","FutureCallback","SizedIPCBuffer","StackContext","ThreadContext","ThreadLocalStaticRegion","SimpleWorkQueue","WaitableManager","IUserInterfaceProxy","IUserInterface","IUserInterfaceAsync","ViInterfaceProxy","IBufferProxy","ViInterface","ViInterfaceAsync","IBufferAsync","AhciInterfaceProxy","AhciInterface","AhciInterfaceAsync","TimeZoneServiceProxy","RTCManagerProxy","TimeZoneService","TimeZoneServiceAsync","RTCManagerAsync","DirectoryEntryType","FileTimeStampRaw","DirectoryEntry","FileSystemType","IFileSystemProxy","IStorageProxy","IFileSystemServiceProxy","IDirectoryProxy","IFileSystem","IFileSystemAsync","IStorageAsync","IFileSystemService","IFileSystemServiceAsync","IDirectoryAsync","HidKeyboardStateType","HidKeyboardScancode","HidKeyboardState","ILoaderInterfaceProxy","ILoaderInterface","ILoaderInterfaceAsync","ITwiliManagerServiceProxy","ITwiliServiceProxy","ITwiliManagerService","ITwiliManagerServiceAsync","ITwiliService","ITwiliServiceAsync","IExample3SubsessionProxy","IExample2Proxy","IExample3Proxy","IExample4Proxy","IExample1Proxy","IExample3Subsession","IExample3SubsessionAsync","IExample2Async","IExample3Async","IExample4Async","IExample1Async","FileSystemError","LibuserError","LoaderError","InnerKeyboard","Read key presses until a \\n is detected, and return the…","terminal","CURRENT_WORK_DIRECTORY","RTCManager","open_file","timezonefile","Set the time zone name used on this devie.","sunrise_time","CAPABILITIES","sunrise_time::timezone","timezoneservice","staticservice","ipctimezonerule","TimeZoneFile","TimeZoneManager","TimeZoneFileSystem","TimeZoneRuleWrapper","status_port","Set to true if the user is currently holding the right…","hidkeyboardstate","PRIMARY_PS2","has_read_key_event","Return true if the PS2 keyboard has an key event to read.","try_read_keyboard_state","Return a representation of a single key press if any…","Waits for a single key press, and return its unicode…","Get a ReadableEvent for the PS2 IRQ. Waiting on this event…","sunrise_keyboard","sunrise_keyboard::ps2","readable_event","SERVICES_EVENT","servicename","userinterface","ServiceName","UserInterface","Manage partition of a IStorage.","Iterator over GPT partitions","Partition sector start.","Partition count.","Partition entry size","Current position of the iterator.","fatdirectoryentry","arraystring","directoryentry","sunrise_fs::detail::driver::fat","libfat filesystem interface.","libuserresult","sunrise_fs::detail::driver","DRIVER_MANAGER","filesystemdriver","partitionstorage","sunrise_fs::detail","GPT definition module.","A raw uuid representation.","The header of a GPT table.","Signature of a GPT header.","GPT revision.","header_size","Header size.","CRC over the header.","Reserved field.","current_lba","The LBA of this header.","The LBA of the backup header.","first_usable","The first usable LBA. (partition table entries)","last_usable","The last usable LBA.","The GUID of this disk.","The LBA of the first partition entry.","The count of partition entries.","The size of a partition entry.","partition_table_crc32","The CRC over all partition entries.","A GPT partition entry.","partition_type","Partition type GUID.","Partition GUID.","First LBA of the partition.","Last LBA of the partition (inclusive).","Attribute flags.","partition_name","Partition name in UTF16LE.","from_fields","Create a RawUUID from raw parts","Convert to a UUID instance.","Convert a UUID to a RawUUID.","from_slice_le","Create a RawUUID from a little endian slice of bytes.","to_bytes_le","Convert to a little endian byte array.","set_partition_type","Set the partition type GUID.","set_unique_id","Set the unique partition GUID.","Set the name of the partition.","Create a GPTPartitionEntry from bytes.","Read the content of a raw array into a GPTPartitionEntry.","The magic of a GPT header (\"EFI PART\")","from_storage_device","Read the GPT header from the disk","Create a GPTHeader from a raw array.","Read the content of a raw array into a GPTHeader.","update_header_crc","Update the CRC32 of the header.","set_disk_guid","Set the disk GUID.","calculate_crc32","Compute the CRC32 of a given slice.","Convert a LBA to a CLS address.","Size of a block.","BLOCK_SIZE_U64","Create a new partition manager.","create_protective_mbr","Create a protective MBR","Initialize a IStorage partition table.","Create a new partition iterator.","sunrise_fs::interface","entry_count","filemodeflags","dirfilterflags","sunrise_fs","The detail implementation of this ipc interface.","Represent a file in the IPC.","fileoperations","Create a new IFile instance from it's detail.","directoryoperations","sunrise_fs::detail::driver::fat::directory","sunrise_fs::detail::driver::fat::file","sunrise_fs::detail::driver::fat::filesystem","sunrise_fs::detail::gpt","sunrise_fs::interface::filesystem","sunrise_fs::interface::storage","sunrise_fs::ipc","filesystemoperations","is_supported","Read the content of a file at a given `offset` in `buf`.","Set the total size of the storage in bytes.","gptpartitionentry","filesystem","filesystemproxy","filesystemservice","DriverManager","AhciDiskStorage","DirectoryInterface","DirectoryFilterPredicate","FileInterface","FatFileSystem","FileSystemProxy","FileSystemDriver","FileModeFlags","DirFilterFlags","FileOperations","DirectoryOperations","FileSystemOperations","PartitionStorage","FileStorage","FileSystemService","set_size","get_size","FileSystem","Gets the desired kernel access controls for a process…","sunrise_loader","BOOT_FROM_FS","loaderiface","LoaderIface","Read one of the 64 32-bit registers of a pci…","sunrise_ahci","cmdheader","Register FIS - host to device","Register FIS - device to host","DMA setup FIS - bidirectional","Data FIS - bidirectional","PIO setup FIS - device to host","Set device bits FIS - device to host","sunrise_ahci::pci","sunrise_ahci::hba","sunrise_ahci::fis","sunrise_ahci::disk","Debug does not access reserved registers.","ahciinterface","Returns the number of addressable 512-octet sectors for…","Reads sectors from disk.","Writes sectors to disk.","PciConfigPortsPair","PciHeader00","HbaMemoryRegisters","GenericHostControl","CmdHeaderFlags","CmdHeaderArray","ReceivedFis","FisPioSetup","FisDmaSetup","FisSetDeviceBits","write_dma","framebuffer","A rgb color","FRAMEBUFFER","The number of bits that forms a pixel. Used to compute…","get_px_offset","Gets the offset in memory of a pixel based on an x and y.","write_px_at","Gets the underlying framebuffer","Terminal rendering APIs","Creates a new Window of the requested size for terminal…","Ask the compositor to redraw the window.","sunrise_vi","get_real_bounds","sunrise_vi::vbe","sunrise_vi::terminal","terminalpipe","viinterface","Framebuffer","TerminalPipe"];
searchIndex["disk_initializer"]={"doc":"Disk initializer application","i":[[5,"write_file_to_filesystem",R[347],"Write a std file to FAT filesystem.",N,[[["fatfile"],[R[339]],["str"]],["fatfilesystemresult"]]],[5,"write_tempate_to_filesystem",E,"Write the template directory content to a FAT fileystem",N,[[["pathbuf"],[R[339]],["path"]],[R[23]]]],[5,"main",E,E,N,[[]]],[0,"gpt",E,R[1674],N,N],[3,"RawUUID",R[348],R[1675],N,N],[12,"d1",E,"Time low part.",0,N],[12,"d2",E,"Time mid part.",0,N],[12,"d3",E,"Time high part and version.",0,N],[12,"d4",E,"Node.",0,N],[3,R[350],E,R[1676],N,N],[12,"signature",E,R[1677],1,N],[12,"revision",E,R[1678],1,N],[12,R[1679],E,R[1680],1,N],[12,"crc32",E,R[1681],1,N],[12,R[35],E,R[1682],1,N],[12,R[1683],E,R[1684],1,N],[12,"backup_lba",E,R[1685],1,N],[12,R[1686],E,R[1687],1,N],[12,R[1688],E,R[1689],1,N],[12,"disk_guid",E,R[1690],1,N],[12,R[341],E,R[1691],1,N],[12,R[342],E,R[1692],1,N],[12,R[343],E,R[1693],1,N],[12,R[1694],E,R[1695],1,N],[3,R[351],E,R[1696],N,N],[12,R[1697],E,R[1698],2,N],[12,"unique_id",E,R[1699],2,N],[12,"first_lba",E,R[1700],2,N],[12,"last_lba",E,R[1701],2,N],[12,"attribute",E,R[1702],2,N],[12,R[1703],E,R[1704],2,N],[3,R[352],E,R[1657],N,N],[12,"inner",E,R[340],3,N],[3,R[353],E,R[1658],N,N],[12,"inner",E,R[340],4,N],[12,R[341],E,R[1659],4,N],[12,R[342],E,R[1660],4,N],[12,R[343],E,R[1661],4,N],[12,"position",E,R[1662],4,N],[5,R[1729],E,R[1730],N,[[],["u32"]]],[5,"lba_to_cls",E,R[1731],N,[[["u64"]]]],[17,"_",E,E,N,N],[17,"_",E,E,N,N],[11,R[1705],E,R[1706],0,[[["u16"],["u32"]],["self"]]],[11,"to_uuid",E,R[1707],0,[[],["uuid"]]],[11,"from_uuid",E,R[1708],0,[[["uuid"]],["self"]]],[11,R[1709],E,R[1710],0,[[],["self"]]],[11,R[1711],E,R[1712],0,[[["self"]]]],[11,R[1713],E,R[1714],2,[[["self"],["uuid"]]]],[11,R[1715],E,R[1716],2,[[["self"],["uuid"]]]],[11,"set_name",E,R[1717],2,[[["self"],["str"]]]],[11,R[344],E,R[1718],2,[[],["self"]]],[11,"read",E,R[1719],2,[[["self"]]]],[11,"write",E,R[345],2,[[["self"]]]],[18,"MAGIC",E,R[1720],1,N],[11,R[1721],E,R[1722],1,[[[R[346]],["u64"]],[[R[23]],["debug"]]]],[11,R[344],E,R[1723],1,[[],["self"]]],[11,"read",E,R[1724],1,[[["self"]]]],[11,"write",E,R[345],1,[[["self"],["bool"]]]],[11,R[1725],E,R[1726],1,[[["self"]]]],[11,R[1727],E,R[1728],1,[[["self"],["uuid"]]]],[11,"new",E,R[1734],3,[[[R[346]]],["self"]]],[11,R[1735],E,R[1736],3,[[["self"]],[R[23]]]],[11,R[231],E,R[1737],3,[[["self"]],[R[23]]]],[11,"new",E,R[1738],4,[[[R[346]]],[R[23]]]],[17,"BLOCK_SIZE",R[347],R[1732],N,N],[17,R[1733],E,"Size of an AHCI block in u64.",N,N],[11,"from",R[348],E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[189],E,E,0,[[["self"]],[T]]],[11,R[187],E,E,0,[[["self"],[T]]]],[11,R[20],E,E,0,[[[U]],[R[23]]]],[11,R[21],E,E,0,[[],[R[23]]]],[11,R[25],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],[T]]],[11,R[24],E,E,0,[[["self"]],[R[26]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[189],E,E,1,[[["self"]],[T]]],[11,R[187],E,E,1,[[["self"],[T]]]],[11,R[20],E,E,1,[[[U]],[R[23]]]],[11,R[21],E,E,1,[[],[R[23]]]],[11,R[25],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"]],[T]]],[11,R[24],E,E,1,[[["self"]],[R[26]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[189],E,E,2,[[["self"]],[T]]],[11,R[187],E,E,2,[[["self"],[T]]]],[11,R[20],E,E,2,[[[U]],[R[23]]]],[11,R[21],E,E,2,[[],[R[23]]]],[11,R[25],E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"]],[T]]],[11,R[24],E,E,2,[[["self"]],[R[26]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[20],E,E,3,[[[U]],[R[23]]]],[11,R[21],E,E,3,[[],[R[23]]]],[11,R[25],E,E,3,[[["self"]],[T]]],[11,R[22],E,E,3,[[["self"]],[T]]],[11,R[24],E,E,3,[[["self"]],[R[26]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[744],E,E,4,[[],["i"]]],[11,R[20],E,E,4,[[[U]],[R[23]]]],[11,R[21],E,E,4,[[],[R[23]]]],[11,R[25],E,E,4,[[["self"]],[T]]],[11,R[22],E,E,4,[[["self"]],[T]]],[11,R[24],E,E,4,[[["self"]],[R[26]]]],[11,"eq",E,E,0,[[["self"],["rawuuid"]],["bool"]]],[11,"ne",E,E,0,[[["self"],["rawuuid"]],["bool"]]],[11,"eq",E,E,1,[[["self"],[R[349]]],["bool"]]],[11,"ne",E,E,1,[[["self"],[R[349]]],["bool"]]],[11,"next",E,E,4,[[["self"]],[R[5]]]],[11,"clone",E,E,0,[[["self"]],["rawuuid"]]],[11,"clone",E,E,1,[[["self"]],[R[349]]]],[11,"clone",E,E,2,[[["self"]],[R[1760]]]],[11,R[49],E,E,0,[[],["self"]]],[11,R[49],E,E,2,[[],["self"]]],[11,R[49],E,E,1,[[],["self"]]],[11,R[211],E,E,0,[[["self"]]]],[11,R[211],E,E,1,[[["self"]]]],[11,"fmt",E,E,0,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,1,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,2,[[["self"],[R[28]]],[R[23]]]]],"p":[[3,"RawUUID"],[3,R[350]],[3,R[351]],[3,R[352]],[3,R[353]]]};
searchIndex["docs"]={"doc":"SunriseOS Architecture Documentation","i":[[5,"main","docs",E,N,[[]]],[0,"building",E,"Build Instructions",N,N],[0,"updating_rust_version",E,"Updating the Rust Toolchain",N,N],[0,"security_architecture",E,"SunriseOS Security Architecture",N,N]],"p":[]};
searchIndex["sunrise_ahci"]={"doc":"AHCI driver module","i":[[3,R[1574],R[1789],"Main interface to the AHCI driver.",N,N],[5,"main",E,"Ahci driver initialisation.",N,[[]]],[0,"pci",E,"PCI discovery",N,N],[3,R[1806],R[1797],"A struct tying the two pci config ports together.",N,N],[12,R[444],E,"The address port.",0,N],[12,"data",E,"The data port.",0,N],[3,"PciDevice",E,"A pci device, addressed by its bus number, slot, and…",N,N],[12,"bus",E,"The device's bus number.",1,N],[12,"slot",E,"The device's slot number on its bus.",1,N],[12,R[1474],E,"The device's function number.",1,N],[12,"did",E,"Device id.",1,N],[12,"vid",E,"Vendor id.",1,N],[12,"class",E,E,1,N],[12,"subclass",E,E,1,N],[12,"prog_if",E,E,1,N],[12,"rev_id",E,E,1,N],[12,"header_type",E,E,1,N],[12,"latency_timer",E,E,1,N],[12,"cache_line_size",E,E,1,N],[12,"header",E,"Remaining registers values, based on header type.",1,N],[3,R[1807],E,"Pci header when Header Type == 0x00 (General device).",N,N],[12,"bar0",E,E,2,N],[12,"bar1",E,E,2,N],[12,"bar2",E,E,2,N],[12,"bar3",E,E,2,N],[12,"bar4",E,E,2,N],[12,"bar5",E,E,2,N],[12,"cardbus_cis_ptr",E,E,2,N],[12,"subsystem_id",E,E,2,N],[12,"subsystem_vendor_id",E,E,2,N],[12,"expansion_rom_base_address",E,E,2,N],[12,"capabilities_ptr",E,E,2,N],[12,"max_latency",E,E,2,N],[12,"min_grant",E,E,2,N],[12,"interrupt_pin",E,E,2,N],[12,"interrupt_line",E,E,2,N],[4,"PciHeader",E,"Contents of pci config registers 0x4-0xf, structure varies…",N,N],[13,"GeneralDevice",E,"header type == 0x00",3,N],[13,"PCItoPCIBridge",E,"header type == 0x01, not implemented",3,N],[13,"CardBus",E,"header type == 0x02, not implemented",3,N],[13,"UnknownHeaderType",E,"header type == other",3,N],[4,"BAR",E,"Base Address Registers. Minimal implementation, does not…",N,N],[13,"Memory",E,"a memory space address and its size",4,N],[13,"Io",E,"an IO space address",4,N],[5,"pci_config_read_word",E,R[1788],N,[[["u8"]],["u32"]]],[5,"pci_config_write_word",E,R[1788],N,[[["u32"],["u8"]]]],[5,"discover",E,"Discover all pci devices, by probing the PID-VID of every…",N,[[],[["vec",["pcidevice"]],["pcidevice"]]]],[5,"get_ahci_controllers",E,"Gets the ahci controllers found by pci discovery.",N,[[],["vec"]]],[7,"PCI_CONFIG_PORTS",E,"A mutex around the two ports used to address pci…",N,N],[17,"CONFIG_ADDRESS",E,"The CONFIG_ADDRESS I/O location.",N,N],[17,"CONFIG_DATA",E,"The CONFIG_DATA I/O location.",N,N],[17,"MAX_BUS",E,"The highest addressable bus.",N,N],[17,"MAX_SLOT",E,"The highest addressable slot on a bus.",N,N],[17,"MAX_FUNC",E,"The highest addressable function on a slot on a bus.",N,N],[17,"MAX_REGISTER",E,"The highest addressable register on a function on a slot…",N,N],[11,"probe",E,"Checks if a device exists on given bus>slot>function.",1,[[["u8"]],[R[5]]]],[11,"read_config_register",E,"Reads a configuration space register.",1,[[["self"],["u8"]],["u32"]]],[11,"write_config_register",E,"Writes to a configuration space register.",1,[[["self"],["u32"],["u8"]]]],[11,"status",E,"Reads the status register.",1,[[["self"]],["u16"]]],[11,"command",E,"Reads the command register.",1,[[["self"]],["u16"]]],[0,"hba",R[1789],"HBA structures",N,N],[3,R[1808],R[1798],"HBA memory registers.",N,N],[12,"generic_host_control",E,E,5,N],[12,"_rsv",E,E,5,N],[12,"_rsv_vendor",E,E,5,N],[12,"ports",E,E,5,N],[3,R[1809],E,"HBA Generic Host Control.",N,N],[12,"cap",E,E,6,N],[12,"ghc",E,E,6,N],[12,"is",E,E,6,N],[12,"pi",E,E,6,N],[12,"vs",E,E,6,N],[12,"ccc_ctl",E,E,6,N],[12,"ccc_pts",E,E,6,N],[12,"em_loc",E,E,6,N],[12,"em_ctl",E,E,6,N],[12,"cap2",E,E,6,N],[12,"bohc",E,E,6,N],[3,"CAP",E,"HbaMem.CAP \"HBA Capabilities\" register bitfield.",N,N],[12,"0",E,E,7,N],[3,"GHC",E,"HbaMem.GHC \"Global HBA Control\" register bitfield.",N,N],[12,"0",E,E,8,N],[3,"CAP2",E,"HbaMem.CAP2 \"HBA Capabilities Extended\" register bitfield.",N,N],[12,"0",E,E,9,N],[3,"Px",E,"HBA Memory Port registers.",N,N],[12,"clb",E,E,10,N],[12,"fb",E,E,10,N],[12,"is",E,E,10,N],[12,"ie",E,E,10,N],[12,"cmd",E,E,10,N],[12,"_rsv0",E,E,10,N],[12,"tfd",E,E,10,N],[12,"sig",E,E,10,N],[12,"ssts",E,E,10,N],[12,"sctl",E,E,10,N],[12,"serr",E,E,10,N],[12,"sact",E,E,10,N],[12,"ci",E,E,10,N],[12,"sntf",E,E,10,N],[12,"fbs",E,E,10,N],[12,"_rsv1",E,E,10,N],[12,"vendor",E,E,10,N],[3,"PxIS",E,"`PxIS` \"Port x Interrupt status\" register bitfield.",N,N],[12,"0",E,E,11,N],[3,"PxIE",E,"`PxIE` \"Port x Interrupt Enable\" register bitfield.",N,N],[12,"0",E,E,12,N],[3,"PxCMD",E,"`PxCMD` \"Port x Command and Status\" register bitfield.",N,N],[12,"0",E,E,13,N],[3,"PxTFD",E,"`PxTFD` \"Port x Task File Data\" register bitfield.",N,N],[12,"0",E,E,14,N],[3,"PxSSTS",E,"`PxSSTS` \"Port x Serial ATA Status\" register bitfield.",N,N],[12,"0",E,E,15,N],[3,"CmdHeader",E,"Command Header. Pointed to by `PxCLB[i]`.",N,N],[12,"flags",E,E,16,N],[12,"prdtl",E,E,16,N],[12,"prdbc",E,E,16,N],[12,"ctba",E,E,16,N],[12,"_rsv1",E,E,16,N],[3,R[1810],E,"Command Header word 0.",N,N],[12,"0",E,E,17,N],[3,R[1811],E,"The array of 32 [CmdHeader].",N,N],[12,"slots",E,E,18,N],[3,"CmdTable",E,"Command Table.",N,N],[12,"cfis",E,E,19,N],[12,"acmd",E,E,19,N],[12,"_rsv",E,E,19,N],[12,"prdt",E,E,19,N],[3,"PrdtEntry",E,"Physical Region Descriptor Table entry.",N,N],[12,"dba",E,E,20,N],[12,"_rsv0",E,E,20,N],[12,"dbc",E,E,20,N],[3,R[1812],E,"Received FIS Structure. Pointed to by `PxFB`.",N,N],[12,"dsfis",E,E,21,N],[12,"_rsv0",E,E,21,N],[12,"psfis",E,E,21,N],[12,"_rsv1",E,E,21,N],[12,"rfis",E,E,21,N],[12,"_rsv2",E,E,21,N],[12,"sdbfis",E,E,21,N],[12,"ufis",E,E,21,N],[12,"_rsv3",E,E,21,N],[19,"Cfis",E,"Command FIS.",N,N],[12,"raw_bytes",E,E,22,N],[12,"h2d",E,E,22,N],[17,"_",E,E,N,N],[17,"_",E,E,N,N],[17,"_",E,E,N,N],[17,"_",E,E,N,N],[11,"s64a",E,E,7,[[["self"]],["bool"]]],[11,"sncq",E,E,7,[[["self"]],["bool"]]],[11,"ssntf",E,E,7,[[["self"]],["bool"]]],[11,"smps",E,E,7,[[["self"]],["bool"]]],[11,"sss",E,E,7,[[["self"]],["bool"]]],[11,"salp",E,E,7,[[["self"]],["bool"]]],[11,"sal",E,E,7,[[["self"]],["bool"]]],[11,"sclo",E,E,7,[[["self"]],["bool"]]],[11,"iss",E,E,7,[[["self"]],["u32"]]],[11,"sam",E,E,7,[[["self"]],["bool"]]],[11,"spm",E,E,7,[[["self"]],["bool"]]],[11,"fbss",E,E,7,[[["self"]],["bool"]]],[11,"pmd",E,E,7,[[["self"]],["bool"]]],[11,"scc",E,E,7,[[["self"]],["bool"]]],[11,"psc",E,E,7,[[["self"]],["bool"]]],[11,"ncs",E,E,7,[[["self"]],["u32"]]],[11,"cccs",E,E,7,[[["self"]],["bool"]]],[11,"ems",E,E,7,[[["self"]],["bool"]]],[11,"sxs",E,E,7,[[["self"]],["bool"]]],[11,"np",E,E,7,[[["self"]],["u32"]]],[11,"ae",E,E,8,[[["self"]],["bool"]]],[11,"set_ae",E,E,8,[[["self"],["bool"]]]],[11,"mrsm",E,E,8,[[["self"]],["bool"]]],[11,"ie",E,E,8,[[["self"]],["bool"]]],[11,"set_ie",E,E,8,[[["self"],["bool"]]]],[11,"hr",E,E,8,[[["self"]],["bool"]]],[11,"set_hr",E,E,8,[[["self"],["bool"]]]],[11,"deso",E,E,9,[[["self"]],["bool"]]],[11,"sadm",E,E,9,[[["self"]],["bool"]]],[11,"sds",E,E,9,[[["self"]],["bool"]]],[11,"apst",E,E,9,[[["self"]],["bool"]]],[11,"nvmp",E,E,9,[[["self"]],["bool"]]],[11,"boh",E,E,9,[[["self"]],["bool"]]],[11,"init",E,"Initializes an AHCI Controller.",5,[[[R[4]]],[["disk"],["vec",["disk"]]]]],[11,"cpds",E,E,11,[[["self"]],["bool"]]],[11,"set_cpds",E,E,11,[[["self"],["bool"]]]],[11,"tfes",E,E,11,[[["self"]],["bool"]]],[11,"set_tfes",E,E,11,[[["self"],["bool"]]]],[11,"hbfs",E,E,11,[[["self"]],["bool"]]],[11,"set_hbfs",E,E,11,[[["self"],["bool"]]]],[11,"hbds",E,E,11,[[["self"]],["bool"]]],[11,"set_hbds",E,E,11,[[["self"],["bool"]]]],[11,"ifs",E,E,11,[[["self"]],["bool"]]],[11,"set_ifs",E,E,11,[[["self"],["bool"]]]],[11,"infs",E,E,11,[[["self"]],["bool"]]],[11,"set_infs",E,E,11,[[["self"],["bool"]]]],[11,"ofs",E,E,11,[[["self"]],["bool"]]],[11,"set_ofs",E,E,11,[[["self"],["bool"]]]],[11,"ipms",E,E,11,[[["self"]],["bool"]]],[11,"set_ipms",E,E,11,[[["self"],["bool"]]]],[11,"prcs",E,E,11,[[["self"]],["bool"]]],[11,"dmps",E,E,11,[[["self"]],["bool"]]],[11,"set_dmps",E,E,11,[[["self"],["bool"]]]],[11,"pcs",E,E,11,[[["self"]],["bool"]]],[11,"dps",E,E,11,[[["self"]],["bool"]]],[11,"set_dps",E,E,11,[[["self"],["bool"]]]],[11,"ufs",E,E,11,[[["self"]],["bool"]]],[11,"sbds",E,E,11,[[["self"]],["bool"]]],[11,"set_sbds",E,E,11,[[["self"],["bool"]]]],[11,"dss",E,E,11,[[["self"]],["bool"]]],[11,"set_dss",E,E,11,[[["self"],["bool"]]]],[11,"pss",E,E,11,[[["self"]],["bool"]]],[11,"set_pss",E,E,11,[[["self"],["bool"]]]],[11,"dhrs",E,E,11,[[["self"]],["bool"]]],[11,"set_dhrs",E,E,11,[[["self"],["bool"]]]],[11,"is_err",E,"Checks if a PxIS has set any of the bits corresponding to…",11,[[],["bool"]]],[11,"cpde",E,E,12,[[["self"]],["bool"]]],[11,"set_cpde",E,E,12,[[["self"],["bool"]]]],[11,"tfee",E,E,12,[[["self"]],["bool"]]],[11,"set_tfee",E,E,12,[[["self"],["bool"]]]],[11,"hbfe",E,E,12,[[["self"]],["bool"]]],[11,"set_hbfe",E,E,12,[[["self"],["bool"]]]],[11,"hbde",E,E,12,[[["self"]],["bool"]]],[11,"set_hbde",E,E,12,[[["self"],["bool"]]]],[11,"ife",E,E,12,[[["self"]],["bool"]]],[11,"set_ife",E,E,12,[[["self"],["bool"]]]],[11,"infe",E,E,12,[[["self"]],["bool"]]],[11,"set_infe",E,E,12,[[["self"],["bool"]]]],[11,"ofe",E,E,12,[[["self"]],["bool"]]],[11,"set_ofe",E,E,12,[[["self"],["bool"]]]],[11,"ipme",E,E,12,[[["self"]],["bool"]]],[11,"set_ipme",E,E,12,[[["self"],["bool"]]]],[11,"prce",E,E,12,[[["self"]],["bool"]]],[11,"set_prce",E,E,12,[[["self"],["bool"]]]],[11,"dmpe",E,E,12,[[["self"]],["bool"]]],[11,"set_dmpe",E,E,12,[[["self"],["bool"]]]],[11,"pce",E,E,12,[[["self"]],["bool"]]],[11,"set_pce",E,E,12,[[["self"],["bool"]]]],[11,"dpe",E,E,12,[[["self"]],["bool"]]],[11,"set_dpe",E,E,12,[[["self"],["bool"]]]],[11,"ufe",E,E,12,[[["self"]],["bool"]]],[11,"set_ufe",E,E,12,[[["self"],["bool"]]]],[11,"sbde",E,E,12,[[["self"]],["bool"]]],[11,"set_sbde",E,E,12,[[["self"],["bool"]]]],[11,"dse",E,E,12,[[["self"]],["bool"]]],[11,"set_dse",E,E,12,[[["self"],["bool"]]]],[11,"pse",E,E,12,[[["self"]],["bool"]]],[11,"set_pse",E,E,12,[[["self"],["bool"]]]],[11,"dhre",E,E,12,[[["self"]],["bool"]]],[11,"set_dhre",E,E,12,[[["self"],["bool"]]]],[11,"cmd",E,E,13,[[["self"]],["u32"]]],[11,"set_cmd",E,E,13,[[["self"],["u32"]]]],[11,"asp",E,E,13,[[["self"]],["bool"]]],[11,"set_asp",E,E,13,[[["self"],["bool"]]]],[11,"alpe",E,E,13,[[["self"]],["bool"]]],[11,"set_alpe",E,E,13,[[["self"],["bool"]]]],[11,"dlae",E,E,13,[[["self"]],["bool"]]],[11,"set_dlae",E,E,13,[[["self"],["bool"]]]],[11,"atapi",E,E,13,[[["self"]],["bool"]]],[11,"set_atapi",E,E,13,[[["self"],["bool"]]]],[11,"apste",E,E,13,[[["self"]],["bool"]]],[11,"set_apste",E,E,13,[[["self"],["bool"]]]],[11,"fbscp",E,E,13,[[["self"]],["bool"]]],[11,"esp",E,E,13,[[["self"]],["bool"]]],[11,"cpd",E,E,13,[[["self"]],["bool"]]],[11,"mpsp",E,E,13,[[["self"]],["bool"]]],[11,"hpcp",E,E,13,[[["self"]],["bool"]]],[11,"pma",E,E,13,[[["self"]],["bool"]]],[11,"set_pma",E,E,13,[[["self"],["bool"]]]],[11,"cps",E,E,13,[[["self"]],["bool"]]],[11,"cr",E,E,13,[[["self"]],["bool"]]],[11,"fr",E,E,13,[[["self"]],["bool"]]],[11,"mpss",E,E,13,[[["self"]],["bool"]]],[11,"ccs",E,E,13,[[["self"]],["u32"]]],[11,"fre",E,E,13,[[["self"]],["bool"]]],[11,"set_fre",E,E,13,[[["self"],["bool"]]]],[11,"clo",E,E,13,[[["self"]],["bool"]]],[11,"set_clo",E,E,13,[[["self"],["bool"]]]],[11,"pod",E,E,13,[[["self"]],["bool"]]],[11,"set_pod",E,E,13,[[["self"],["bool"]]]],[11,"sud",E,E,13,[[["self"]],["bool"]]],[11,"set_sud",E,E,13,[[["self"],["bool"]]]],[11,"st",E,E,13,[[["self"]],["bool"]]],[11,"set_st",E,E,13,[[["self"],["bool"]]]],[11,"err",E,E,14,[[["self"]],["u32"]]],[11,"bsy",E,E,14,[[["self"]],["bool"]]],[11,"cs0",E,E,14,[[["self"]],["u32"]]],[11,"drq",E,E,14,[[["self"]],["bool"]]],[11,"cs1",E,E,14,[[["self"]],["u32"]]],[11,"err_flag",E,E,14,[[["self"]],["bool"]]],[11,"ipm",E,E,15,[[["self"]],["u32"]]],[11,"spd",E,E,15,[[["self"]],["u32"]]],[11,"det",E,E,15,[[["self"]],["u32"]]],[11,"stop",E,"Stop this port.",10,[[["self"]]]],[11,"start",E,"Start this port.",10,[[["self"],["cmdheaderarray"]]]],[11,"disable_fis_receive",E,"Disables FIS Receive.",10,[[["self"]]]],[11,"enable_fis_receive",E,"Enable FIS Receive.",10,[[["self"],["receivedfis"]]]],[11,"probe",E,"Checks if a functional device is present on the port.",10,[[["self"]],["bool"]]],[11,"clear_addresses",E,"Makes `PxFB` and `PxCLB` point to `0x00000000`.",10,[[["self"]]]],[11,"init",E,"Initializes a port, returning a [Disk] to interface with it.",10,[[["px"],[R[4]]],[[R[5],["disk"]],["disk"]]]],[11,"command_running",E,"Checks if the command issued in `slot` is still running.",10,[[["self"],[R[4]]],["bool"]]],[11,"wait_command_completion",E,"Polls the port until the command in `slot` is completed,…",10,[[["self"],[R[4]]],[["error"],[R[23],["error"]]]]],[11,"identify",E,"Sends the IDENTIFY DEVICE command to a port to gather some…",10,[[["px"],[R[4]],["cmdtable"],[R[1790]]],[[R[23],["error"]],["error"]]]],[11,"read_dma",E,"Read `sector_count` contiguous sectors from the disk into…",10,[[["px"],["bool"],[R[4]],["cmdtable"],["u64"],[R[1790]]],[["error"],[R[23],["error"]]]]],[11,R[1816],E,"Write `sector_count` contiguous sectors to the disk from…",10,[[["px"],["bool"],[R[4]],["cmdtable"],["u64"],[R[1790]]],[["error"],[R[23],["error"]]]]],[11,"pmp",E,E,17,[[["self"]],["u16"]]],[11,"set_pmp",E,E,17,[[["self"],["u16"]]]],[11,"c",E,E,17,[[["self"]],["bool"]]],[11,"set_c",E,E,17,[[["self"],["bool"]]]],[11,"b",E,E,17,[[["self"]],["bool"]]],[11,"set_b",E,E,17,[[["self"],["bool"]]]],[11,"r",E,E,17,[[["self"]],["bool"]]],[11,"set_r",E,E,17,[[["self"],["bool"]]]],[11,"p",E,E,17,[[["self"]],["bool"]]],[11,"set_p",E,E,17,[[["self"],["bool"]]]],[11,"w",E,E,17,[[["self"]],["bool"]]],[11,"set_w",E,E,17,[[["self"],["bool"]]]],[11,"a",E,E,17,[[["self"]],["bool"]]],[11,"set_a",E,E,17,[[["self"],["bool"]]]],[11,"cfl",E,E,17,[[["self"]],["u16"]]],[11,"set_cfl",E,E,17,[[["self"],["u16"]]]],[11,"init",E,"Initializes a CmdHeader, making it point to its [CmdTable].",16,[[["self"],["cmdtable"]]]],[11,"fill_prdt",E,"Fills a PRDT with the given buffer.",19,[[["self"],[R[4]],[R[1790]]],[["error"],[R[23],["error"]]]]],[11,"dsfis",E,"Return a const reference to the last received DMA Setup FIS.",21,[[["self"]],["fisdmasetup"]]],[11,"psfis",E,"Return a const reference to the last received PIO Setup FIS.",21,[[["self"]],["fispiosetup"]]],[11,"rfis",E,"Return a const reference to the last received D2H Register…",21,[[["self"]],["fisregd2h"]]],[11,"sdbfis",E,"Return a const reference to the last received Set Device…",21,[[["self"]],["fissetdevicebits"]]],[11,"ufis",E,"Return a const reference to the last received Unknown FIS.",21,[[["self"]]]],[0,"fis",R[1789],"Frame Information Structures",N,N],[3,"FisRegH2D",R[1799],R[1791],N,N],[12,"fis_type",E,E,23,N],[12,"pm",E,E,23,N],[12,"command",E,E,23,N],[12,"featurel",E,E,23,N],[12,"lba0",E,E,23,N],[12,"lba1",E,E,23,N],[12,"lba2",E,E,23,N],[12,"device",E,E,23,N],[12,"lba3",E,E,23,N],[12,"lba4",E,E,23,N],[12,"lba5",E,E,23,N],[12,"featureh",E,E,23,N],[12,"countl",E,E,23,N],[12,"counth",E,E,23,N],[12,"icc",E,E,23,N],[12,"control",E,E,23,N],[12,"rsv1",E,E,23,N],[3,"FisRegD2H",E,R[1792],N,N],[12,"fis_type",E,E,24,N],[12,"pm",E,E,24,N],[12,"status",E,E,24,N],[12,"error",E,E,24,N],[12,"lba0",E,E,24,N],[12,"lba1",E,E,24,N],[12,"lba2",E,E,24,N],[12,"device",E,E,24,N],[12,"lba3",E,E,24,N],[12,"lba4",E,E,24,N],[12,"lba5",E,E,24,N],[12,"rsv2",E,E,24,N],[12,"countl",E,E,24,N],[12,"counth",E,E,24,N],[12,"rsv3",E,E,24,N],[12,"rsv4",E,E,24,N],[3,"FisData",E,R[1794],N,N],[12,"fis_type",E,E,25,N],[12,"pm",E,E,25,N],[12,"rsv1",E,E,25,N],[12,"data",E,E,25,N],[3,R[1813],E,R[1795],N,N],[12,"fis_type",E,E,26,N],[12,"pm",E,E,26,N],[12,"status",E,E,26,N],[12,"error",E,E,26,N],[12,"lba0",E,E,26,N],[12,"lba1",E,E,26,N],[12,"lba2",E,E,26,N],[12,"device",E,E,26,N],[12,"lba3",E,E,26,N],[12,"lba4",E,E,26,N],[12,"lba5",E,E,26,N],[12,"rsv2",E,E,26,N],[12,"countl",E,E,26,N],[12,"counth",E,E,26,N],[12,"rsv3",E,E,26,N],[12,"e_status",E,E,26,N],[12,"tc",E,E,26,N],[12,"rsv4",E,E,26,N],[3,R[1814],E,R[1793],N,N],[12,"fis_type",E,E,27,N],[12,"pm",E,E,27,N],[12,"rsv1",E,E,27,N],[12,"dma_buffer_id",E,E,27,N],[12,"rsv3",E,E,27,N],[12,"dma_buffer_offset",E,E,27,N],[12,"transfer_count",E,E,27,N],[12,"rsv6",E,E,27,N],[3,R[1815],E,R[1796],N,N],[12,"fis_type",E,E,28,N],[12,"i",E,E,28,N],[12,"status",E,E,28,N],[12,"error",E,E,28,N],[12,"_rsv",E,E,28,N],[4,"FisType",E,"The types of a FIS.",N,N],[13,"RegH2D",E,R[1791],29,N],[13,"RegD2H",E,R[1792],29,N],[13,"DmaAct",E,"DMA activate FIS - device to host",29,N],[13,"DmaSetup",E,R[1793],29,N],[13,"Data",E,R[1794],29,N],[13,"Bist",E,"BIST activate FIS - bidirectional",29,N],[13,"PioSetup",E,R[1795],29,N],[13,"DevBits",E,R[1796],29,N],[0,"disk",R[1789],"AHCI Disk",N,N],[3,"Disk",R[1800],"An AHCI Disk",N,N],[12,"px",E,"Pointer back to the corresponding Port Control Registers,…",30,N],[12,"rfis",E,"The allocated Received FIS memory zone that the port uses.",30,N],[12,"cmd_list",E,"The allocated Command List memory zone that the port uses.",30,N],[12,"cmd_tables",E,"An allocated Command Table for each implemented Command…",30,N],[12,"sectors",E,"Number of addressable sectors of this disk. Each sector is…",30,N],[12,"supports_48_bit",E,"Indicates if the device supports 48 bit addresses.",30,N],[3,"IDisk",E,"Interface to a disk.",N,N],[12,"0",E,E,31,N],[11,R[1338],E,R[1803],30,[[["self"]],[["error"],["u64"],[R[23],["u64","error"]]]]],[11,"read_dma",E,R[1804],30,[[["self"],[R[4]],["u64"]],[["error"],[R[23],["error"]]]]],[11,R[1816],E,R[1805],30,[[["self"],[R[4]],["u64"]],[["error"],[R[23],["error"]]]]],[11,"new",E,"Creates an IDisk from the wrapped [Disk].",31,[[["arc",["mutex"]],["mutex",["disk"]]],["self"]]],[7,"DISKS",R[1789],"Array of discovered disk.",N,N],[7,"HEADER",E,E,N,N],[7,R[1630],E,E,N,N],[11,R[20],E,E,32,[[[U]],[R[23]]]],[11,"into",E,E,32,[[],[U]]],[11,"from",E,E,32,[[[T]],[T]]],[11,R[21],E,E,32,[[],[R[23]]]],[11,R[25],E,E,32,[[["self"]],[T]]],[11,R[22],E,E,32,[[["self"]],[T]]],[11,R[24],E,E,32,[[["self"]],[R[26]]]],[11,R[189],E,E,32,[[["self"]],[T]]],[11,R[187],E,E,32,[[["self"],[T]]]],[11,"size",E,E,32,[[["self"]],[R[4]]]],[11,"is_cool",E,E,32,[[[R[4]]],["bool"]]],[11,R[1272],E,E,32,[[[R[4]]],[T]]],[11,R[1273],E,E,32,[[[R[4]]],[T]]],[11,R[20],R[1797],E,0,[[[U]],[R[23]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[21],E,E,0,[[],[R[23]]]],[11,R[25],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],[T]]],[11,R[24],E,E,0,[[["self"]],[R[26]]]],[11,"size",E,E,0,[[["self"]],[R[4]]]],[11,"is_cool",E,E,0,[[[R[4]]],["bool"]]],[11,R[1272],E,E,0,[[[R[4]]],[T]]],[11,R[1273],E,E,0,[[[R[4]]],[T]]],[11,R[20],E,E,1,[[[U]],[R[23]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[21],E,E,1,[[],[R[23]]]],[11,R[25],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"]],[T]]],[11,R[24],E,E,1,[[["self"]],[R[26]]]],[11,R[189],E,E,1,[[["self"]],[T]]],[11,R[187],E,E,1,[[["self"],[T]]]],[11,"size",E,E,1,[[["self"]],[R[4]]]],[11,"is_cool",E,E,1,[[[R[4]]],["bool"]]],[11,R[1272],E,E,1,[[[R[4]]],[T]]],[11,R[1273],E,E,1,[[[R[4]]],[T]]],[11,R[20],E,E,2,[[[U]],[R[23]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[21],E,E,2,[[],[R[23]]]],[11,R[25],E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"]],[T]]],[11,R[24],E,E,2,[[["self"]],[R[26]]]],[11,R[189],E,E,2,[[["self"]],[T]]],[11,R[187],E,E,2,[[["self"],[T]]]],[11,"size",E,E,2,[[["self"]],[R[4]]]],[11,"is_cool",E,E,2,[[[R[4]]],["bool"]]],[11,R[1272],E,E,2,[[[R[4]]],[T]]],[11,R[1273],E,E,2,[[[R[4]]],[T]]],[11,R[20],E,E,3,[[[U]],[R[23]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[21],E,E,3,[[],[R[23]]]],[11,R[25],E,E,3,[[["self"]],[T]]],[11,R[22],E,E,3,[[["self"]],[T]]],[11,R[24],E,E,3,[[["self"]],[R[26]]]],[11,R[189],E,E,3,[[["self"]],[T]]],[11,R[187],E,E,3,[[["self"],[T]]]],[11,"size",E,E,3,[[["self"]],[R[4]]]],[11,"is_cool",E,E,3,[[[R[4]]],["bool"]]],[11,R[1272],E,E,3,[[[R[4]]],[T]]],[11,R[1273],E,E,3,[[[R[4]]],[T]]],[11,R[20],E,E,4,[[[U]],[R[23]]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[21],E,E,4,[[],[R[23]]]],[11,R[25],E,E,4,[[["self"]],[T]]],[11,R[22],E,E,4,[[["self"]],[T]]],[11,R[24],E,E,4,[[["self"]],[R[26]]]],[11,R[189],E,E,4,[[["self"]],[T]]],[11,R[187],E,E,4,[[["self"],[T]]]],[11,"size",E,E,4,[[["self"]],[R[4]]]],[11,"is_cool",E,E,4,[[[R[4]]],["bool"]]],[11,R[1272],E,E,4,[[[R[4]]],[T]]],[11,R[1273],E,E,4,[[[R[4]]],[T]]],[11,R[20],R[1798],E,5,[[[U]],[R[23]]]],[11,"into",E,E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[21],E,E,5,[[],[R[23]]]],[11,R[25],E,E,5,[[["self"]],[T]]],[11,R[22],E,E,5,[[["self"]],[T]]],[11,R[24],E,E,5,[[["self"]],[R[26]]]],[11,"size",E,E,5,[[["self"]],[R[4]]]],[11,"is_cool",E,E,5,[[[R[4]]],["bool"]]],[11,R[1272],E,E,5,[[[R[4]]],[T]]],[11,R[1273],E,E,5,[[[R[4]]],[T]]],[11,R[20],E,E,6,[[[U]],[R[23]]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[21],E,E,6,[[],[R[23]]]],[11,R[25],E,E,6,[[["self"]],[T]]],[11,R[22],E,E,6,[[["self"]],[T]]],[11,R[24],E,E,6,[[["self"]],[R[26]]]],[11,"size",E,E,6,[[["self"]],[R[4]]]],[11,"is_cool",E,E,6,[[[R[4]]],["bool"]]],[11,R[1272],E,E,6,[[[R[4]]],[T]]],[11,R[1273],E,E,6,[[[R[4]]],[T]]],[11,R[20],E,E,7,[[[U]],[R[23]]]],[11,"into",E,E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[21],E,E,7,[[],[R[23]]]],[11,R[25],E,E,7,[[["self"]],[T]]],[11,R[22],E,E,7,[[["self"]],[T]]],[11,R[24],E,E,7,[[["self"]],[R[26]]]],[11,R[189],E,E,7,[[["self"]],[T]]],[11,R[187],E,E,7,[[["self"],[T]]]],[11,"size",E,E,7,[[["self"]],[R[4]]]],[11,"is_cool",E,E,7,[[[R[4]]],["bool"]]],[11,R[1272],E,E,7,[[[R[4]]],[T]]],[11,R[1273],E,E,7,[[[R[4]]],[T]]],[11,"bit",E,E,7,[[["self"],[R[4]]],["bool"]]],[11,R[752],E,E,7,[[["self"],[R[4]],["bool"]]]],[11,R[20],E,E,8,[[[U]],[R[23]]]],[11,"into",E,E,8,[[],[U]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[21],E,E,8,[[],[R[23]]]],[11,R[25],E,E,8,[[["self"]],[T]]],[11,R[22],E,E,8,[[["self"]],[T]]],[11,R[24],E,E,8,[[["self"]],[R[26]]]],[11,R[189],E,E,8,[[["self"]],[T]]],[11,R[187],E,E,8,[[["self"],[T]]]],[11,"size",E,E,8,[[["self"]],[R[4]]]],[11,"is_cool",E,E,8,[[[R[4]]],["bool"]]],[11,R[1272],E,E,8,[[[R[4]]],[T]]],[11,R[1273],E,E,8,[[[R[4]]],[T]]],[11,"bit",E,E,8,[[["self"],[R[4]]],["bool"]]],[11,R[752],E,E,8,[[["self"],[R[4]],["bool"]]]],[11,R[20],E,E,9,[[[U]],[R[23]]]],[11,"into",E,E,9,[[],[U]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[21],E,E,9,[[],[R[23]]]],[11,R[25],E,E,9,[[["self"]],[T]]],[11,R[22],E,E,9,[[["self"]],[T]]],[11,R[24],E,E,9,[[["self"]],[R[26]]]],[11,R[189],E,E,9,[[["self"]],[T]]],[11,R[187],E,E,9,[[["self"],[T]]]],[11,"size",E,E,9,[[["self"]],[R[4]]]],[11,"is_cool",E,E,9,[[[R[4]]],["bool"]]],[11,R[1272],E,E,9,[[[R[4]]],[T]]],[11,R[1273],E,E,9,[[[R[4]]],[T]]],[11,"bit",E,E,9,[[["self"],[R[4]]],["bool"]]],[11,R[752],E,E,9,[[["self"],[R[4]],["bool"]]]],[11,R[20],E,E,10,[[[U]],[R[23]]]],[11,"into",E,E,10,[[],[U]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[21],E,E,10,[[],[R[23]]]],[11,R[25],E,E,10,[[["self"]],[T]]],[11,R[22],E,E,10,[[["self"]],[T]]],[11,R[24],E,E,10,[[["self"]],[R[26]]]],[11,"size",E,E,10,[[["self"]],[R[4]]]],[11,"is_cool",E,E,10,[[[R[4]]],["bool"]]],[11,R[1272],E,E,10,[[[R[4]]],[T]]],[11,R[1273],E,E,10,[[[R[4]]],[T]]],[11,R[20],E,E,11,[[[U]],[R[23]]]],[11,"into",E,E,11,[[],[U]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[21],E,E,11,[[],[R[23]]]],[11,R[25],E,E,11,[[["self"]],[T]]],[11,R[22],E,E,11,[[["self"]],[T]]],[11,R[24],E,E,11,[[["self"]],[R[26]]]],[11,R[189],E,E,11,[[["self"]],[T]]],[11,R[187],E,E,11,[[["self"],[T]]]],[11,"size",E,E,11,[[["self"]],[R[4]]]],[11,"is_cool",E,E,11,[[[R[4]]],["bool"]]],[11,R[1272],E,E,11,[[[R[4]]],[T]]],[11,R[1273],E,E,11,[[[R[4]]],[T]]],[11,"bit",E,E,11,[[["self"],[R[4]]],["bool"]]],[11,R[752],E,E,11,[[["self"],[R[4]],["bool"]]]],[11,R[20],E,E,12,[[[U]],[R[23]]]],[11,"into",E,E,12,[[],[U]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[21],E,E,12,[[],[R[23]]]],[11,R[25],E,E,12,[[["self"]],[T]]],[11,R[22],E,E,12,[[["self"]],[T]]],[11,R[24],E,E,12,[[["self"]],[R[26]]]],[11,R[189],E,E,12,[[["self"]],[T]]],[11,R[187],E,E,12,[[["self"],[T]]]],[11,"size",E,E,12,[[["self"]],[R[4]]]],[11,"is_cool",E,E,12,[[[R[4]]],["bool"]]],[11,R[1272],E,E,12,[[[R[4]]],[T]]],[11,R[1273],E,E,12,[[[R[4]]],[T]]],[11,"bit",E,E,12,[[["self"],[R[4]]],["bool"]]],[11,R[752],E,E,12,[[["self"],[R[4]],["bool"]]]],[11,R[20],E,E,13,[[[U]],[R[23]]]],[11,"into",E,E,13,[[],[U]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[21],E,E,13,[[],[R[23]]]],[11,R[25],E,E,13,[[["self"]],[T]]],[11,R[22],E,E,13,[[["self"]],[T]]],[11,R[24],E,E,13,[[["self"]],[R[26]]]],[11,R[189],E,E,13,[[["self"]],[T]]],[11,R[187],E,E,13,[[["self"],[T]]]],[11,"size",E,E,13,[[["self"]],[R[4]]]],[11,"is_cool",E,E,13,[[[R[4]]],["bool"]]],[11,R[1272],E,E,13,[[[R[4]]],[T]]],[11,R[1273],E,E,13,[[[R[4]]],[T]]],[11,"bit",E,E,13,[[["self"],[R[4]]],["bool"]]],[11,R[752],E,E,13,[[["self"],[R[4]],["bool"]]]],[11,R[20],E,E,14,[[[U]],[R[23]]]],[11,"into",E,E,14,[[],[U]]],[11,"from",E,E,14,[[[T]],[T]]],[11,R[21],E,E,14,[[],[R[23]]]],[11,R[25],E,E,14,[[["self"]],[T]]],[11,R[22],E,E,14,[[["self"]],[T]]],[11,R[24],E,E,14,[[["self"]],[R[26]]]],[11,R[189],E,E,14,[[["self"]],[T]]],[11,R[187],E,E,14,[[["self"],[T]]]],[11,"size",E,E,14,[[["self"]],[R[4]]]],[11,"is_cool",E,E,14,[[[R[4]]],["bool"]]],[11,R[1272],E,E,14,[[[R[4]]],[T]]],[11,R[1273],E,E,14,[[[R[4]]],[T]]],[11,"bit",E,E,14,[[["self"],[R[4]]],["bool"]]],[11,R[752],E,E,14,[[["self"],[R[4]],["bool"]]]],[11,R[20],E,E,15,[[[U]],[R[23]]]],[11,"into",E,E,15,[[],[U]]],[11,"from",E,E,15,[[[T]],[T]]],[11,R[21],E,E,15,[[],[R[23]]]],[11,R[25],E,E,15,[[["self"]],[T]]],[11,R[22],E,E,15,[[["self"]],[T]]],[11,R[24],E,E,15,[[["self"]],[R[26]]]],[11,R[189],E,E,15,[[["self"]],[T]]],[11,R[187],E,E,15,[[["self"],[T]]]],[11,"size",E,E,15,[[["self"]],[R[4]]]],[11,"is_cool",E,E,15,[[[R[4]]],["bool"]]],[11,R[1272],E,E,15,[[[R[4]]],[T]]],[11,R[1273],E,E,15,[[[R[4]]],[T]]],[11,"bit",E,E,15,[[["self"],[R[4]]],["bool"]]],[11,R[752],E,E,15,[[["self"],[R[4]],["bool"]]]],[11,R[20],E,E,16,[[[U]],[R[23]]]],[11,"into",E,E,16,[[],[U]]],[11,"from",E,E,16,[[[T]],[T]]],[11,R[21],E,E,16,[[],[R[23]]]],[11,R[25],E,E,16,[[["self"]],[T]]],[11,R[22],E,E,16,[[["self"]],[T]]],[11,R[24],E,E,16,[[["self"]],[R[26]]]],[11,"size",E,E,16,[[["self"]],[R[4]]]],[11,"is_cool",E,E,16,[[[R[4]]],["bool"]]],[11,R[1272],E,E,16,[[[R[4]]],[T]]],[11,R[1273],E,E,16,[[[R[4]]],[T]]],[11,R[20],E,E,17,[[[U]],[R[23]]]],[11,"into",E,E,17,[[],[U]]],[11,"from",E,E,17,[[[T]],[T]]],[11,R[21],E,E,17,[[],[R[23]]]],[11,R[25],E,E,17,[[["self"]],[T]]],[11,R[22],E,E,17,[[["self"]],[T]]],[11,R[24],E,E,17,[[["self"]],[R[26]]]],[11,R[189],E,E,17,[[["self"]],[T]]],[11,R[187],E,E,17,[[["self"],[T]]]],[11,"size",E,E,17,[[["self"]],[R[4]]]],[11,"is_cool",E,E,17,[[[R[4]]],["bool"]]],[11,R[1272],E,E,17,[[[R[4]]],[T]]],[11,R[1273],E,E,17,[[[R[4]]],[T]]],[11,"bit",E,E,17,[[["self"],[R[4]]],["bool"]]],[11,R[752],E,E,17,[[["self"],[R[4]],["bool"]]]],[11,R[20],E,E,18,[[[U]],[R[23]]]],[11,"into",E,E,18,[[],[U]]],[11,"from",E,E,18,[[[T]],[T]]],[11,R[21],E,E,18,[[],[R[23]]]],[11,R[25],E,E,18,[[["self"]],[T]]],[11,R[22],E,E,18,[[["self"]],[T]]],[11,R[24],E,E,18,[[["self"]],[R[26]]]],[11,"size",E,E,18,[[["self"]],[R[4]]]],[11,"is_cool",E,E,18,[[[R[4]]],["bool"]]],[11,R[1272],E,E,18,[[[R[4]]],[T]]],[11,R[1273],E,E,18,[[[R[4]]],[T]]],[11,R[20],E,E,19,[[[U]],[R[23]]]],[11,"into",E,E,19,[[],[U]]],[11,"from",E,E,19,[[[T]],[T]]],[11,R[21],E,E,19,[[],[R[23]]]],[11,R[25],E,E,19,[[["self"]],[T]]],[11,R[22],E,E,19,[[["self"]],[T]]],[11,R[24],E,E,19,[[["self"]],[R[26]]]],[11,"size",E,E,19,[[["self"]],[R[4]]]],[11,"is_cool",E,E,19,[[[R[4]]],["bool"]]],[11,R[1272],E,E,19,[[[R[4]]],[T]]],[11,R[1273],E,E,19,[[[R[4]]],[T]]],[11,R[20],E,E,20,[[[U]],[R[23]]]],[11,"into",E,E,20,[[],[U]]],[11,"from",E,E,20,[[[T]],[T]]],[11,R[21],E,E,20,[[],[R[23]]]],[11,R[25],E,E,20,[[["self"]],[T]]],[11,R[22],E,E,20,[[["self"]],[T]]],[11,R[24],E,E,20,[[["self"]],[R[26]]]],[11,"size",E,E,20,[[["self"]],[R[4]]]],[11,"is_cool",E,E,20,[[[R[4]]],["bool"]]],[11,R[1272],E,E,20,[[[R[4]]],[T]]],[11,R[1273],E,E,20,[[[R[4]]],[T]]],[11,R[20],E,E,21,[[[U]],[R[23]]]],[11,"into",E,E,21,[[],[U]]],[11,"from",E,E,21,[[[T]],[T]]],[11,R[21],E,E,21,[[],[R[23]]]],[11,R[25],E,E,21,[[["self"]],[T]]],[11,R[22],E,E,21,[[["self"]],[T]]],[11,R[24],E,E,21,[[["self"]],[R[26]]]],[11,"size",E,E,21,[[["self"]],[R[4]]]],[11,"is_cool",E,E,21,[[[R[4]]],["bool"]]],[11,R[1272],E,E,21,[[[R[4]]],[T]]],[11,R[1273],E,E,21,[[[R[4]]],[T]]],[11,R[20],E,E,22,[[[U]],[R[23]]]],[11,"into",E,E,22,[[],[U]]],[11,"from",E,E,22,[[[T]],[T]]],[11,R[21],E,E,22,[[],[R[23]]]],[11,R[25],E,E,22,[[["self"]],[T]]],[11,R[22],E,E,22,[[["self"]],[T]]],[11,R[24],E,E,22,[[["self"]],[R[26]]]],[11,"size",E,E,22,[[["self"]],[R[4]]]],[11,"is_cool",E,E,22,[[[R[4]]],["bool"]]],[11,R[1272],E,E,22,[[[R[4]]],[T]]],[11,R[1273],E,E,22,[[[R[4]]],[T]]],[11,R[20],R[1799],E,23,[[[U]],[R[23]]]],[11,"into",E,E,23,[[],[U]]],[11,"from",E,E,23,[[[T]],[T]]],[11,R[21],E,E,23,[[],[R[23]]]],[11,R[25],E,E,23,[[["self"]],[T]]],[11,R[22],E,E,23,[[["self"]],[T]]],[11,R[24],E,E,23,[[["self"]],[R[26]]]],[11,"size",E,E,23,[[["self"]],[R[4]]]],[11,"is_cool",E,E,23,[[[R[4]]],["bool"]]],[11,R[1272],E,E,23,[[[R[4]]],[T]]],[11,R[1273],E,E,23,[[[R[4]]],[T]]],[11,R[20],E,E,24,[[[U]],[R[23]]]],[11,"into",E,E,24,[[],[U]]],[11,"from",E,E,24,[[[T]],[T]]],[11,R[21],E,E,24,[[],[R[23]]]],[11,R[25],E,E,24,[[["self"]],[T]]],[11,R[22],E,E,24,[[["self"]],[T]]],[11,R[24],E,E,24,[[["self"]],[R[26]]]],[11,"size",E,E,24,[[["self"]],[R[4]]]],[11,"is_cool",E,E,24,[[[R[4]]],["bool"]]],[11,R[1272],E,E,24,[[[R[4]]],[T]]],[11,R[1273],E,E,24,[[[R[4]]],[T]]],[11,R[20],E,E,25,[[[U]],[R[23]]]],[11,"into",E,E,25,[[],[U]]],[11,"from",E,E,25,[[[T]],[T]]],[11,R[21],E,E,25,[[],[R[23]]]],[11,R[25],E,E,25,[[["self"]],[T]]],[11,R[22],E,E,25,[[["self"]],[T]]],[11,R[24],E,E,25,[[["self"]],[R[26]]]],[11,"size",E,E,25,[[["self"]],[R[4]]]],[11,"is_cool",E,E,25,[[[R[4]]],["bool"]]],[11,R[1272],E,E,25,[[[R[4]]],[T]]],[11,R[1273],E,E,25,[[[R[4]]],[T]]],[11,R[20],E,E,26,[[[U]],[R[23]]]],[11,"into",E,E,26,[[],[U]]],[11,"from",E,E,26,[[[T]],[T]]],[11,R[21],E,E,26,[[],[R[23]]]],[11,R[25],E,E,26,[[["self"]],[T]]],[11,R[22],E,E,26,[[["self"]],[T]]],[11,R[24],E,E,26,[[["self"]],[R[26]]]],[11,"size",E,E,26,[[["self"]],[R[4]]]],[11,"is_cool",E,E,26,[[[R[4]]],["bool"]]],[11,R[1272],E,E,26,[[[R[4]]],[T]]],[11,R[1273],E,E,26,[[[R[4]]],[T]]],[11,R[20],E,E,27,[[[U]],[R[23]]]],[11,"into",E,E,27,[[],[U]]],[11,"from",E,E,27,[[[T]],[T]]],[11,R[21],E,E,27,[[],[R[23]]]],[11,R[25],E,E,27,[[["self"]],[T]]],[11,R[22],E,E,27,[[["self"]],[T]]],[11,R[24],E,E,27,[[["self"]],[R[26]]]],[11,"size",E,E,27,[[["self"]],[R[4]]]],[11,"is_cool",E,E,27,[[[R[4]]],["bool"]]],[11,R[1272],E,E,27,[[[R[4]]],[T]]],[11,R[1273],E,E,27,[[[R[4]]],[T]]],[11,R[20],E,E,28,[[[U]],[R[23]]]],[11,"into",E,E,28,[[],[U]]],[11,"from",E,E,28,[[[T]],[T]]],[11,R[21],E,E,28,[[],[R[23]]]],[11,R[25],E,E,28,[[["self"]],[T]]],[11,R[22],E,E,28,[[["self"]],[T]]],[11,R[24],E,E,28,[[["self"]],[R[26]]]],[11,"size",E,E,28,[[["self"]],[R[4]]]],[11,"is_cool",E,E,28,[[[R[4]]],["bool"]]],[11,R[1272],E,E,28,[[[R[4]]],[T]]],[11,R[1273],E,E,28,[[[R[4]]],[T]]],[11,R[20],E,E,29,[[[U]],[R[23]]]],[11,"into",E,E,29,[[],[U]]],[11,"from",E,E,29,[[[T]],[T]]],[11,R[21],E,E,29,[[],[R[23]]]],[11,R[25],E,E,29,[[["self"]],[T]]],[11,R[22],E,E,29,[[["self"]],[T]]],[11,R[24],E,E,29,[[["self"]],[R[26]]]],[11,"size",E,E,29,[[["self"]],[R[4]]]],[11,"is_cool",E,E,29,[[[R[4]]],["bool"]]],[11,R[1272],E,E,29,[[[R[4]]],[T]]],[11,R[1273],E,E,29,[[[R[4]]],[T]]],[11,R[20],R[1800],E,30,[[[U]],[R[23]]]],[11,"into",E,E,30,[[],[U]]],[11,"from",E,E,30,[[[T]],[T]]],[11,R[21],E,E,30,[[],[R[23]]]],[11,R[25],E,E,30,[[["self"]],[T]]],[11,R[22],E,E,30,[[["self"]],[T]]],[11,R[24],E,E,30,[[["self"]],[R[26]]]],[11,"size",E,E,30,[[["self"]],[R[4]]]],[11,"is_cool",E,E,30,[[[R[4]]],["bool"]]],[11,R[1272],E,E,30,[[[R[4]]],[T]]],[11,R[1273],E,E,30,[[[R[4]]],[T]]],[11,R[20],E,E,31,[[[U]],[R[23]]]],[11,"into",E,E,31,[[],[U]]],[11,"from",E,E,31,[[[T]],[T]]],[11,R[21],E,E,31,[[],[R[23]]]],[11,R[25],E,E,31,[[["self"]],[T]]],[11,R[22],E,E,31,[[["self"]],[T]]],[11,R[24],E,E,31,[[["self"]],[R[26]]]],[11,R[189],E,E,31,[[["self"]],[T]]],[11,R[187],E,E,31,[[["self"],[T]]]],[11,"size",E,E,31,[[["self"]],[R[4]]]],[11,"is_cool",E,E,31,[[[R[4]]],["bool"]]],[11,R[1272],E,E,31,[[[R[4]]],[T]]],[11,R[1273],E,E,31,[[[R[4]]],[T]]],[11,"fmt",R[1797],E,1,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,2,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,3,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,4,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1798],R[1801],6,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,7,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,8,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,9,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,11,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,12,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,13,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,14,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,15,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,R[1801],10,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,R[1801],16,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,17,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,R[1801],20,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",R[1800],E,30,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,31,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1789],E,32,[[["self"],[R[28]]],[R[23]]]],[11,"drop",R[1800],"Dropping a disk brings the port to a stop, and clears the…",30,[[["self"]]]],[11,"clone",R[1797],E,1,[[["self"]],["pcidevice"]]],[11,"clone",E,E,2,[[["self"]],["pciheader00"]]],[11,"clone",E,E,3,[[["self"]],["pciheader"]]],[11,"clone",E,E,4,[[["self"]],["bar"]]],[11,"clone",R[1798],E,7,[[["self"]],["cap"]]],[11,"clone",E,E,8,[[["self"]],["ghc"]]],[11,"clone",E,E,9,[[["self"]],["cap2"]]],[11,"clone",E,E,11,[[["self"]],["pxis"]]],[11,"clone",E,E,12,[[["self"]],["pxie"]]],[11,"clone",E,E,13,[[["self"]],["pxcmd"]]],[11,"clone",E,E,14,[[["self"]],["pxtfd"]]],[11,"clone",E,E,15,[[["self"]],["pxssts"]]],[11,"clone",E,E,17,[[["self"]],["cmdheaderflags"]]],[11,"clone",R[1800],E,31,[[["self"]],["idisk"]]],[11,"clone",R[1789],E,32,[[["self"]],[R[1802]]]],[11,R[49],E,E,32,[[],[R[1802]]]],[11,R[1333],E,"Returns the number of discovered disks.",32,[[["self"],[R[1265]]],[["u32"],["error"],[R[23],["u32","error"]]]]],[11,"get_disk",E,R[1335],32,[[["self"],["u32"],[R[1265]]],[["error"],[R[23],[R[1336],"error"]],[R[1336]]]]],[11,R[1338],R[1800],R[1803],31,[[["self"],[R[1265]]],[["error"],["u64"],[R[23],["u64","error"]]]]],[11,"read_dma",E,R[1804],31,[[["self"],[R[1265]],["u64"]],[["error"],[R[23],["error"]]]]],[11,R[1816],E,R[1805],31,[[["self"],[R[1265]],["u64"]],[["error"],[R[23],["error"]]]]],[11,R[830],R[1798],E,7,[[["self"],[R[4]]],[T]]],[11,R[831],E,E,7,[[["self"],[R[4]],[T]]]],[11,R[830],E,E,8,[[["self"],[R[4]]],[T]]],[11,R[831],E,E,8,[[["self"],[R[4]],[T]]]],[11,R[830],E,E,9,[[["self"],[R[4]]],[T]]],[11,R[831],E,E,9,[[["self"],[R[4]],[T]]]],[11,R[830],E,E,11,[[["self"],[R[4]]],[T]]],[11,R[831],E,E,11,[[["self"],[R[4]],[T]]]],[11,R[830],E,E,12,[[["self"],[R[4]]],[T]]],[11,R[831],E,E,12,[[["self"],[R[4]],[T]]]],[11,R[830],E,E,13,[[["self"],[R[4]]],[T]]],[11,R[831],E,E,13,[[["self"],[R[4]],[T]]]],[11,R[830],E,E,14,[[["self"],[R[4]]],[T]]],[11,R[831],E,E,14,[[["self"],[R[4]],[T]]]],[11,R[830],E,E,15,[[["self"],[R[4]]],[T]]],[11,R[831],E,E,15,[[["self"],[R[4]],[T]]]],[11,R[830],E,E,17,[[["self"],[R[4]]],[T]]],[11,R[831],E,E,17,[[["self"],[R[4]],[T]]]]],"p":[[3,R[1806]],[3,"PciDevice"],[3,R[1807]],[4,"PciHeader"],[4,"BAR"],[3,R[1808]],[3,R[1809]],[3,"CAP"],[3,"GHC"],[3,"CAP2"],[3,"Px"],[3,"PxIS"],[3,"PxIE"],[3,"PxCMD"],[3,"PxTFD"],[3,"PxSSTS"],[3,"CmdHeader"],[3,R[1810]],[3,R[1811]],[3,"CmdTable"],[3,"PrdtEntry"],[3,R[1812]],[19,"Cfis"],[3,"FisRegH2D"],[3,"FisRegD2H"],[3,"FisData"],[3,R[1813]],[3,R[1814]],[3,R[1815]],[4,"FisType"],[3,"Disk"],[3,"IDisk"],[3,R[1574]]]};
searchIndex["sunrise_bootstrap"]={"doc":"Bootstrap stage","i":[[3,R[232],R[59],"4 pages, PAGE_SIZE aligned.",N,N],[12,"0",E,E,0,N],[3,"EndTag",E,E,N,N],[12,"tag",E,E,1,N],[12,"flag",E,E,1,N],[12,"size",E,E,1,N],[3,R[233],E,E,N,N],[12,"tag",E,E,2,N],[12,"flags",E,E,2,N],[12,"size",E,E,2,N],[12,"width",E,E,2,N],[12,"height",E,E,2,N],[12,"depth",E,E,2,N],[3,R[234],E,E,N,N],[12,"tag",E,E,3,N],[12,"flags",E,E,3,N],[12,"size",E,E,3,N],[3,R[235],E,"The multiboot header structure of our binary.",N,N],[12,"magic",E,E,4,N],[12,"architecture",E,E,4,N],[12,"header_length",E,E,4,N],[12,"checksum",E,E,4,N],[12,R[1817],E,E,4,N],[12,"end",E,E,4,N],[5,"print_stack",E,"Prints raw hexdump of the stack. Use this if everything…",N,[[]]],[5,"bootstrap_start",E,"The very start.",N,[[]]],[5,"do_bootstrap",E,"bootstrap stage and call kernel",N,[[[R[4]]]]],[0,"bootstrap_logging",E,"bootstrap logging on rs232",N,N],[3,"Serial",R[186],R[612],N,N],[5,"init_bootstrap_log",E,"Init the rs232 COM1. Must be called before logging anything.",N,[[]]],[5,"bootstrap_log",E,"Sends a string to COM1.",N,[[["str"]]]],[5,"bootstrap_inb",E,E,N,[[["u16"]],["u8"]]],[5,"bootstrap_outb",E,E,N,[[["u16"],["u8"]]]],[17,"COM1",E,E,N,N],[0,"gdt",R[59],R[504],N,N],[3,R[67],R[62],E,N,N],[12,R[60],E,E,5,N],[3,R[68],E,E,N,N],[12,R[60],E,E,6,N],[3,R[236],E,"A structure containing our GDT. We can have at most 16…",N,N],[12,"table",E,E,7,N],[3,R[237],E,E,N,N],[12,"0",E,E,8,N],[4,R[238],E,E,N,N],[13,R[507],E,E,9,N],[13,"Ldt",E,E,9,N],[13,R[508],E,E,9,N],[13,R[509],E,E,9,N],[13,"TaskGate",E,E,9,N],[13,R[494],E,E,9,N],[13,R[495],E,E,9,N],[13,R[510],E,E,9,N],[13,R[511],E,E,9,N],[13,R[512],E,E,9,N],[13,R[496],E,E,9,N],[13,R[497],E,E,9,N],[5,"init_gdt",E,E,N,[[]]],[0,"segment_selector",E,R[487],N,N],[3,R[239],R[188],R[488],N,N],[12,"0",E,E,10,N],[11,"new",E,R[489],10,[[["u16"],[R[61]]],[R[63]]]],[11,"index",E,R[490],10,[[["self"]],["u16"]]],[11,"rpl",E,R[491],10,[[["self"]],[R[61]]]],[0,"i386",R[62],R[449],N,N],[3,R[240],R[66],R[450],N,N],[12,R[263],E,E,11,N],[12,"link",E,E,11,N],[12,"esp0",E,E,11,N],[12,R[451],E,E,11,N],[12,"ss0",E,E,11,N],[12,"esp1",E,E,11,N],[12,R[452],E,E,11,N],[12,"ss1",E,E,11,N],[12,"esp2",E,E,11,N],[12,R[453],E,E,11,N],[12,"ss2",E,E,11,N],[12,"cr3",E,E,11,N],[12,"eip",E,E,11,N],[12,"eflags",E,E,11,N],[12,"eax",E,E,11,N],[12,"ecx",E,E,11,N],[12,"edx",E,E,11,N],[12,"ebx",E,E,11,N],[12,"esp",E,E,11,N],[12,"ebp",E,E,11,N],[12,"esi",E,E,11,N],[12,"edi",E,E,11,N],[12,R[454],E,E,11,N],[12,"es",E,E,11,N],[12,R[455],E,E,11,N],[12,"cs",E,E,11,N],[12,R[456],E,E,11,N],[12,"ss",E,E,11,N],[12,R[457],E,E,11,N],[12,"ds",E,E,11,N],[12,R[458],E,E,11,N],[12,"fs",E,E,11,N],[12,R[459],E,E,11,N],[12,"gs",E,E,11,N],[12,R[461],E,E,11,N],[12,R[460],E,E,11,N],[12,R[463],E,E,11,N],[12,R[462],E,E,11,N],[4,R[241],E,R[464],N,N],[13,"Ring0",E,R[465],12,N],[13,"Ring1",E,R[466],12,N],[13,"Ring2",E,R[467],12,N],[13,"Ring3",E,R[468],12,N],[0,R[537],E,R[538],N,N],[0,"tables",R[65],R[539],N,N],[3,R[242],R[190],R[540],N,N],[12,"limit",E,R[541],13,N],[12,"base",E,"Pointer to the memory region containing the DT.",13,N],[5,"lgdt",E,R[542],N,[[[R[64]]]]],[5,"lldt",E,R[543],N,[[[R[63]]]]],[5,"ltr",E,R[544],N,[[[R[63]]]]],[5,"lidt",E,R[545],N,[[[R[64]]]]],[0,R[546],R[65],R[548],N,N],[5,"set_cs","sunrise_bootstrap::gdt::i386::instructions::segmentation",R[549],N,[[[R[63]]]]],[5,"load_ss",E,R[550],N,[[[R[63]]]]],[5,"load_ds",E,R[551],N,[[[R[63]]]]],[5,"load_es",E,R[552],N,[[[R[63]]]]],[5,"load_fs",E,R[553],N,[[[R[63]]]]],[5,"load_gs",E,R[554],N,[[[R[63]]]]],[5,"cs",E,R[555],N,[[],[R[63]]]],[0,R[493],R[65],R[556],N,N],[5,"sti","sunrise_bootstrap::gdt::i386::instructions::interrupts",R[557],N,[[]]],[5,"cli",E,R[558],N,[[]]],[11,"from_u16",R[66],R[559],12,[[["u16"]],[R[61]]]],[11,"new",E,E,11,[[["u32"],[R[63]]],[R[72]]]],[7,"GDT",R[62],"The GDT set-up by the bootstrap",N,N],[7,R[513],E,R[514],N,N],[7,R[67],E,E,N,N],[7,R[68],E,E,N,N],[11,"new",E,E,7,[[],[R[71]]]],[11,"push",E,E,7,[[["self"],[R[69]]]]],[11,R[515],E,E,7,[[["u16"],["self"]]]],[11,R[516],E,E,8,[[],[R[69]]]],[11,"new",E,R[70],8,[[[R[61]],["u32"],["bool"]],[R[69]]]],[11,R[517],E,R[70],8,[[[R[61]],[R[230]],["u32"]],[R[69]]]],[11,"new_ldt",E,R[518],8,[[[R[61]],[R[71]]],[R[69]]]],[11,"new_tss",E,R[519],8,[[[R[72]],[R[61]]],[R[69]]]],[11,R[520],E,E,8,[[],["u32"]]],[11,R[521],E,E,8,[[["self"],["u32"]]]],[11,"get_base",E,E,8,[[],["u32"]]],[11,"set_base",E,E,8,[[["self"],["u32"]]]],[11,R[522],E,E,8,[[],["bool"]]],[11,R[523],E,E,8,[[],["bool"]]],[11,R[524],E,E,8,[[],["bool"]]],[11,R[525],E,E,8,[[],["bool"]]],[11,R[526],E,E,8,[[],[R[61]]]],[11,R[527],E,E,8,[[],["bool"]]],[11,R[528],E,E,8,[[],["bool"]]],[11,R[529],E,E,8,[[["self"],["bool"]]]],[11,"is_32bit",E,E,8,[[],["bool"]]],[0,R[444],R[59],"Physical and Virtual address wrappers",N,N],[3,R[243],R[191],R[691],N,N],[12,"0",E,E,14,N],[3,R[244],E,R[692],N,N],[12,"0",E,E,15,N],[11,"addr",E,R[73],15,[[],[R[4]]]],[11,"addr",E,R[73],14,[[],[R[4]]]],[11,"floor",E,R[75],14,[[],[R[74]]]],[11,"ceil",E,R[76],14,[[],[R[74]]]],[11,"floor",E,R[75],15,[[],[R[77]]]],[11,"ceil",E,R[76],15,[[],[R[77]]]],[0,"paging",R[59],"Paging on i386",N,N],[3,R[84],R[83],R[85],N,N],[3,R[86],E,R[87],N,N],[12,R[78],E,E,16,N],[3,R[88],E,R[89],N,N],[12,R[78],E,E,17,N],[3,R[79],E,R[80],N,N],[12,"bits",E,E,18,N],[3,R[259],E,R[370],N,N],[3,R[371],E,R[372],N,N],[4,R[90],E,R[91],N,N],[13,R[92],E,E,19,N],[13,"Guard",E,E,19,N],[5,R[390],E,R[391],N,[[],["bool"]]],[5,R[150],E,E,N,[[[R[74]]]]],[5,R[392],E,R[393],N,[[]]],[5,"swap_cr3",E,R[394],N,[[[R[74]]],[R[74]]]],[5,"map_bootstrap",E,"Creates a set of page tables identity mapping the Bootstrap.",N,[[[R[183]]],[R[184]]]],[5,R[160],E,R[145],N,[[],[R[77]]]],[0,"entry",E,R[93],N,N],[3,R[79],R[193],R[80],N,N],[12,"bits",E,E,20,N],[3,"Entry",E,R[94],N,N],[12,"0",E,E,21,N],[4,R[95],E,R[96],N,N],[13,R[97],E,E,22,N],[13,"Guarded",E,E,22,N],[13,R[92],E,E,22,N],[17,R[98],E,E,N,N],[18,R[785],E,E,20,N],[18,R[99],E,E,20,N],[18,R[100],E,E,20,N],[18,R[101],E,E,20,N],[18,R[205],E,E,20,N],[18,R[206],E,E,20,N],[18,"DIRTY",E,E,20,N],[18,R[102],E,E,20,N],[18,"GLOBAL",E,E,20,N],[18,R[103],E,E,20,N],[18,R[104],E,E,20,N],[18,R[105],E,E,20,N],[11,"empty",E,R[106],20,[[],[R[81]]]],[11,"all",E,R[107],20,[[],[R[81]]]],[11,"bits",E,R[108],20,[[["self"]],["u32"]]],[11,R[109],E,R[110],20,[[["u32"]],[[R[81]],[R[5],[R[81]]]]]],[11,R[111],E,R[112],20,[[["u32"]],[R[81]]]],[11,R[147],E,R[113],20,[[["self"]],["bool"]]],[11,"is_all",E,R[114],20,[[["self"]],["bool"]]],[11,R[115],E,R[116],20,[[["self"],[R[81]]],["bool"]]],[11,R[148],E,R[117],20,[[["self"],[R[81]]],["bool"]]],[11,"insert",E,R[118],20,[[["self"],[R[81]]]]],[11,"remove",E,R[119],20,[[["self"],[R[81]]]]],[11,"toggle",E,R[120],20,[[["self"],[R[81]]]]],[11,"set",E,R[121],20,[[["self"],[R[81]],["bool"]]]],[11,R[122],E,R[123],21,[[],["bool"]]],[11,R[124],E,R[125],21,[[["self"]],[[R[82],["frame"]],["frame"]]]],[11,R[384],E,R[126],21,[[],["bool"]]],[11,"flags",E,R[127],21,[[],[R[81]]]],[11,R[128],E,R[129],21,[[],[[R[74]],[R[82],[R[74]]]]]],[11,"set",E,R[130],21,[[["self"],["frame"],[R[81]]]]],[11,R[131],E,R[132],21,[[["self"]]]],[11,"unwrap",E,R[133],22,[[],[T]]],[11,"map",E,R[134],22,[[["f"]],[R[82]]]],[11,R[135],E,R[136],22,[[["self"]],[[R[5]],[T]]]],[0,"table",R[83],"i386 page table / directory",N,N],[3,R[245],R[137],"A page table",N,N],[12,R[198],E,E,23,N],[3,R[246],E,"A page directory",N,N],[12,"0",E,E,24,N],[3,R[79],E,R[80],N,N],[12,"bits",E,E,18,N],[3,R[84],E,R[85],N,N],[3,R[247],E,"The page directory currently in use.",N,N],[12,"0",E,E,25,N],[3,R[248],E,"A page table currently in use.",N,N],[12,"0",E,E,26,N],[3,R[249],E,"This is just a wrapper for a pointer to a Table or a…",N,N],[12,"0",E,E,27,N],[12,"1",E,E,27,N],[3,R[86],E,R[87],N,N],[12,R[78],E,E,16,N],[3,R[250],E,"A temporary mapped page directory.",N,N],[12,"0",E,E,28,N],[3,R[251],E,"A temporary mapped page table.",N,N],[12,"0",E,E,29,N],[3,R[88],E,R[89],N,N],[12,R[78],E,E,17,N],[3,R[252],E,"A directory we can modify by directly accessing physical…",N,N],[12,"0",E,E,30,N],[3,R[253],E,"A table we can modify by directly accessing physical…",N,N],[12,"0",E,E,31,N],[3,R[401],E,R[402],N,N],[3,"NoFlush",E,"When passing this struct the TLB will not be flushed. Used…",N,N],[4,R[90],E,R[91],N,N],[13,R[92],E,E,19,N],[13,"Guard",E,E,19,N],[0,"entry",E,R[93],N,N],[3,R[79],R[194],R[80],N,N],[12,"bits",E,E,32,N],[3,"Entry",E,R[94],N,N],[12,"0",E,E,33,N],[4,R[95],E,R[96],N,N],[13,R[97],E,E,34,N],[13,"Guarded",E,E,34,N],[13,R[92],E,E,34,N],[17,R[98],E,E,N,N],[18,R[785],E,E,32,N],[18,R[99],E,E,32,N],[18,R[100],E,E,32,N],[18,R[101],E,E,32,N],[18,R[205],E,E,32,N],[18,R[206],E,E,32,N],[18,"DIRTY",E,E,32,N],[18,R[102],E,E,32,N],[18,"GLOBAL",E,E,32,N],[18,R[103],E,E,32,N],[18,R[104],E,E,32,N],[18,R[105],E,E,32,N],[11,"empty",E,R[106],32,[[],[R[81]]]],[11,"all",E,R[107],32,[[],[R[81]]]],[11,"bits",E,R[108],32,[[["self"]],["u32"]]],[11,R[109],E,R[110],32,[[["u32"]],[[R[81]],[R[5],[R[81]]]]]],[11,R[111],E,R[112],32,[[["u32"]],[R[81]]]],[11,R[147],E,R[113],32,[[["self"]],["bool"]]],[11,"is_all",E,R[114],32,[[["self"]],["bool"]]],[11,R[115],E,R[116],32,[[["self"],[R[81]]],["bool"]]],[11,R[148],E,R[117],32,[[["self"],[R[81]]],["bool"]]],[11,"insert",E,R[118],32,[[["self"],[R[81]]]]],[11,"remove",E,R[119],32,[[["self"],[R[81]]]]],[11,"toggle",E,R[120],32,[[["self"],[R[81]]]]],[11,"set",E,R[121],32,[[["self"],[R[81]],["bool"]]]],[11,R[122],E,R[123],33,[[],["bool"]]],[11,R[124],E,R[125],33,[[["self"]],[[R[82],["frame"]],["frame"]]]],[11,R[384],E,R[126],33,[[],["bool"]]],[11,"flags",E,R[127],33,[[],[R[81]]]],[11,R[128],E,R[129],33,[[],[[R[74]],[R[82],[R[74]]]]]],[11,"set",E,R[130],33,[[["self"],[R[81]],["frame"]]]],[11,R[131],E,R[132],33,[[["self"]]]],[11,"unwrap",E,R[133],34,[[],[T]]],[11,"map",E,R[134],34,[[["f"]],[R[82]]]],[11,R[135],E,R[136],34,[[["self"]],[[R[5]],[T]]]],[0,"detail",R[137],E,N,N],[8,R[254],"sunrise_bootstrap::paging::table::detail","A trait describing the interface of a PageTable hierarchy.",N,N],[16,"PageDirectoryType",E,E,35,N],[10,R[202],E,"Gets a reference to the directory",35,[[["self"]],[R[141]]]],[17,"_",R[137],E,N,N],[17,"_",E,E,N,N],[17,"_",E,E,N,N],[17,R[407],E,R[408],N,N],[8,R[255],E,"A table of entries, either the directory or one of the…",N,N],[10,R[198],E,E,36,[[["self"]]]],[10,R[197],E,E,36,[[["self"]]]],[11,"zero",E,R[385],36,[[["self"]]]],[11,R[386],E,"Creates a mapping on the nth entry of a table T is a…",36,[[["self"],[R[138]],[R[4]],["frame"]]]],[11,R[387],E,"Marks the nth entry as guard page T is a flusher…",36,[[["self"],[R[4]]]]],[11,R[146],E,E,36,[[]]],[8,R[256],E,E,N,N],[16,R[140],E,E,37,N],[11,"map_whole_table",E,R[139],37,[[["self"],[R[74]],[R[138]]]]],[11,"map_guard_whole_table",E,R[139],37,[[["self"]]]],[8,R[257],E,"A trait describing all the things that a PageDirectory can…",N,N],[16,"PageTableType",E,E,38,N],[16,R[140],E,E,38,N],[10,R[199],E,"Gets a reference to a page table",38,[[["self"],[R[4]]],[[R[82],[R[141]]],[R[141]]]]],[10,R[200],E,R[201],38,[[["self"],[R[4]]],[R[141]]]],[11,"get_table_or_create",E,"Gets the page table at given index, or creates it if it…",38,[[["self"],[R[4]]],[R[141]]]],[11,"map_to",E,R[142],38,[[["self"],[R[138]],["frame"],[R[77]]]]],[11,"guard",E,"Creates a guard page",38,[[["self"],[R[77]]]]],[11,"__unmap",E,"Deletes a mapping in the page tables, returning the frame…",38,[[["self"],[R[77]]],[[R[82],["frame"]],["frame"]]]],[11,R[143],E,R[144],38,[[["self"],[R[4]]],[[R[5],[R[77]]],[R[77]]]]],[8,R[151],E,E,N,N],[10,"map_to",E,R[142],39,[[["self"],[R[77]],[R[152]]]]],[10,"get_phys",E,R[153],39,[[["self"],[R[77]]],[[R[74]],[R[82],[R[74]]]]]],[10,R[143],E,R[144],39,[[["self"],[R[4]]],[[R[5],[R[77]]],[R[77]]]]],[11,R[154],E,R[155],39,[[["self"]]]],[10,"unmap",E,R[156],39,[[["self"],[R[77]]],[[R[82],["frame"]],["frame"]]]],[11,R[157],E,R[145],39,[[["self"],[R[77]],[R[81]]]]],[11,R[158],E,R[159],39,[[["self"],["frame"],[R[81]]],[R[77]]]],[11,R[160],E,R[145],39,[[["self"]],[R[77]]]],[11,R[161],E,R[162],39,[[["self"],[R[77]]]]],[11,R[163],E,R[164],39,[[["self"],[R[77]],[R[4]]]]],[11,R[165],E,R[166],39,[[["self"],[R[74]],[R[4]],[R[81]],[R[77]]]]],[11,R[167],E,R[168],39,[[["self"],[R[4]],[R[81]],[R[77]]]]],[11,R[169],E,R[170],39,[[["self"],["frame"],[R[81]]]]],[11,R[171],E,R[172],39,[[["self"],[R[74]],[R[4]],[R[81]]]]],[11,R[173],E,R[144],39,[[["self"],[R[4]]],[[R[5],[R[77]]],[R[77]]]]],[11,R[174],E,R[175],39,[[["self"],[R[77]]]]],[11,R[176],E,R[177],39,[[["self"],[R[77]],[R[4]]]]],[8,"Flusher",E,"A trait used to decide if the TLB cache should be flushed…",N,N],[11,R[146],E,E,40,[[]]],[18,R[99],R[83],E,18,N],[18,R[100],E,E,18,N],[11,"empty",E,R[106],18,[[],[R[81]]]],[11,"all",E,R[107],18,[[],[R[81]]]],[11,"bits",E,R[108],18,[[["self"]],["u32"]]],[11,R[109],E,R[110],18,[[["u32"]],[[R[81]],[R[5],[R[81]]]]]],[11,R[111],E,R[112],18,[[["u32"]],[R[81]]]],[11,R[147],E,R[113],18,[[["self"]],["bool"]]],[11,"is_all",E,R[114],18,[[["self"]],["bool"]]],[11,R[115],E,R[116],18,[[["self"],[R[81]]],["bool"]]],[11,R[148],E,R[117],18,[[["self"],[R[81]]],["bool"]]],[11,"insert",E,R[118],18,[[["self"],[R[81]]]]],[11,"remove",E,R[119],18,[[["self"],[R[81]]]]],[11,"toggle",E,R[120],18,[[["self"],[R[81]]]]],[11,"set",E,R[121],18,[[["self"],[R[81]],["bool"]]]],[11,R[403],R[137],R[404],25,[[["self"],[R[4]]],[[R[82],[R[4]]],[R[4]]]]],[11,"new",E,E,27,[[],[R[141]]]],[11,"new",R[83],"Creates a new set of inactive page tables",16,[[],[R[149]]]],[11,R[363],E,"Switch to this page tables set. Returns the old active…",16,[[],[R[149]]]],[11,"delete",E,E,16,[[]]],[11,"delete_userspace",R[137],E,28,[[["self"]]]],[11,"copy_active_kernelspace",E,"Copies all the entries in the directory mapping tables…",28,[[["self"]]]],[11,"free_all_frames",E,"Frees all pages mapped by this table, and mark the frames…",29,[[["self"]]]],[11,"paging_off_create_page_set",R[83],"Used at startup when the paging is disabled and creating…",17,[[],["self"]]],[11,R[150],E,"Enables paging with this tables as active tables",17,[[]]],[11,"init_directory",R[137],"Initializes the directory. This function does two things:",30,[[["self"]]]],[7,"ACTIVE_PAGE_TABLES",R[83],"Currently active page tables.",N,N],[17,R[409],E,"The size of a single page.",N,N],[17,R[410],E,E,N,N],[17,"_",E,E,N,N],[17,"_",E,E,N,N],[17,"_",E,E,N,N],[17,"_",E,E,N,N],[8,R[151],E,E,N,N],[10,"map_to",E,R[142],39,[[["self"],[R[77]],[R[152]]]]],[10,"get_phys",E,R[153],39,[[["self"],[R[77]]],[[R[74]],[R[82],[R[74]]]]]],[10,R[143],E,R[144],39,[[["self"],[R[4]]],[[R[5],[R[77]]],[R[77]]]]],[11,R[154],R[137],R[155],39,[[["self"]]]],[10,"unmap",R[83],R[156],39,[[["self"],[R[77]]],[[R[82],["frame"]],["frame"]]]],[11,R[157],R[137],R[145],39,[[["self"],[R[77]],[R[81]]]]],[11,R[158],E,R[159],39,[[["self"],["frame"],[R[81]]],[R[77]]]],[11,R[160],E,R[145],39,[[["self"]],[R[77]]]],[11,R[161],E,R[162],39,[[["self"],[R[77]]]]],[11,R[163],E,R[164],39,[[["self"],[R[77]],[R[4]]]]],[11,R[165],E,R[166],39,[[["self"],[R[74]],[R[4]],[R[81]],[R[77]]]]],[11,R[167],E,R[168],39,[[["self"],[R[4]],[R[81]],[R[77]]]]],[11,R[169],E,R[170],39,[[["self"],["frame"],[R[81]]]]],[11,R[171],E,R[172],39,[[["self"],[R[74]],[R[4]],[R[81]]]]],[11,R[173],E,R[144],39,[[["self"],[R[4]]],[[R[5],[R[77]]],[R[77]]]]],[11,R[174],E,R[175],39,[[["self"],[R[77]]]]],[11,R[176],E,R[177],39,[[["self"],[R[77]],[R[4]]]]],[8,R[258],R[83],R[373],N,N],[10,R[178],E,R[374],41,[[],[R[77]]]],[10,R[179],E,R[375],41,[[],[R[77]]]],[11,"start_table",E,"The index in page directory of the first table of this land",41,[[],[R[4]]]],[11,"end_table",E,"The index in page directory of the last table of this land",41,[[],[R[4]]]],[11,R[178],E,E,42,[[],[R[77]]]],[11,R[179],E,E,42,[[],[R[77]]]],[11,R[178],E,E,43,[[],[R[77]]]],[11,R[179],E,E,43,[[],[R[77]]]],[0,"frame_alloc",R[59],"A module implementing a physical memory manager that…",N,N],[3,R[260],R[195],R[180],N,N],[12,R[568],E,E,44,N],[12,R[569],E,E,44,N],[3,"Frame",E,"A pointer to a physical frame",N,N],[12,"physical_addr",E,E,45,N],[12,R[181],E,E,45,N],[3,R[261],E,R[582],N,N],[5,R[571],E,R[572],N,[[[R[4]]],[R[4]]]],[5,R[573],E,R[574],N,[[[R[4]]],[R[4]]]],[5,R[693],E,R[694],N,[[[R[4]]],[R[4]]]],[5,R[695],E,R[696],N,[[[R[4]]],[R[4]]]],[7,"FRAMES_BITMAP",E,R[180],N,N],[17,"MEMORY_FRAME_SIZE",E,"A memory frame is the same size as a page",N,N],[17,R[583],E,E,N,N],[17,R[584],E,E,N,N],[17,R[585],E,E,N,N],[17,R[586],E,"When testing we use a much smaller array.",N,N],[17,R[587],E,E,N,N],[17,R[588],E,E,N,N],[11,R[444],E,"Get the physical address of this Frame",45,[[["self"]],[R[74]]]],[11,R[181],E,"Gets the current allocation state",45,[[["self"]],["bool"]]],[11,"from_physical_addr",E,R[182],45,[[[R[74]]],["frame"]]],[11,"from_allocated_addr",E,R[182],45,[[[R[74]]],["frame"]]],[11,"init",E,"Initialize the FrameAllocator by parsing the multiboot…",46,[[[R[183]]]]],[11,"check_initialized",E,"Panics if the frames bitmap was not initialized",46,[[["allocatorbitmap"]]]],[11,R[576],E,R[577],46,[[[R[4]]]]],[11,R[578],E,R[579],46,[[[R[4]]]]],[11,"alloc_frame",E,"Allocates a free frame",46,[[],["frame"]]],[11,"alloc_contiguous_frames",E,"Allocates count contiguous frames.",46,[[[R[4]]],[R[74]]]],[11,"free_frame",E,"Frees an allocated frame.",46,[[["frame"]]]],[0,R[714],R[59],"Loads the kernel in high memory",N,N],[5,"load_kernel","sunrise_bootstrap::elf_loader","Loads the kernel in high memory Returns address of entry…",N,[[[R[184]],[R[183]]],[R[4]]]],[5,R[716],E,R[717],N,[[[R[718]],[R[184]],["elffile"]]]],[0,"bootstrap_stack",R[59],"Bootstrap stack",N,N],[3,R[262],R[196],"A structure representing a kernel stack",N,N],[12,R[472],E,E,47,N],[17,R[473],E,R[474],N,N],[17,R[475],E,R[476],N,N],[17,R[477],E,R[478],N,N],[17,R[479],E,R[480],N,N],[11,R[481],E,"Allocates the bootstrap stack",47,[[],[[R[185]],[R[5],[R[185]]]]]],[18,R[483],E,"We keep 2 poison pointers for fake saved ebp and saved esp…",47,N],[11,R[484],E,R[485],47,[[["self"]]]],[11,R[486],E,"Get the address of the beginning of usable stack. Used for…",47,[[["self"]],[R[4]]]],[7,"STACK",R[59],"The stack we start on.",N,N],[7,"MULTIBOOT_HEADER",E,"The multiboot header of our binary.",N,N],[11,R[49],E,E,1,[[],["endtag"]]],[11,"new",E,E,2,[[["u32"]],["framebuffertag"]]],[11,"new",E,E,3,[[],["modulealignmenttag"]]],[11,R[20],E,E,0,[[[U]],[R[23]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[21],E,E,0,[[],[R[23]]]],[11,R[25],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],[T]]],[11,R[24],E,E,0,[[["self"]],[R[26]]]],[11,R[20],E,E,1,[[[U]],[R[23]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[21],E,E,1,[[],[R[23]]]],[11,R[25],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"]],[T]]],[11,R[24],E,E,1,[[["self"]],[R[26]]]],[11,R[20],E,E,2,[[[U]],[R[23]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[21],E,E,2,[[],[R[23]]]],[11,R[25],E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"]],[T]]],[11,R[24],E,E,2,[[["self"]],[R[26]]]],[11,R[20],E,E,3,[[[U]],[R[23]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[21],E,E,3,[[],[R[23]]]],[11,R[25],E,E,3,[[["self"]],[T]]],[11,R[22],E,E,3,[[["self"]],[T]]],[11,R[24],E,E,3,[[["self"]],[R[26]]]],[11,R[20],E,E,4,[[[U]],[R[23]]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[21],E,E,4,[[],[R[23]]]],[11,R[25],E,E,4,[[["self"]],[T]]],[11,R[22],E,E,4,[[["self"]],[T]]],[11,R[24],E,E,4,[[["self"]],[R[26]]]],[11,R[20],R[186],E,48,[[[U]],[R[23]]]],[11,"into",E,E,48,[[],[U]]],[11,"from",E,E,48,[[[T]],[T]]],[11,R[21],E,E,48,[[],[R[23]]]],[11,R[25],E,E,48,[[["self"]],[T]]],[11,R[22],E,E,48,[[["self"]],[T]]],[11,R[24],E,E,48,[[["self"]],[R[26]]]],[11,R[20],R[62],E,5,[[[U]],[R[23]]]],[11,"into",E,E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[21],E,E,5,[[],[R[23]]]],[11,R[25],E,E,5,[[["self"]],[T]]],[11,R[22],E,E,5,[[["self"]],[T]]],[11,R[24],E,E,5,[[["self"]],[R[26]]]],[11,R[20],E,E,6,[[[U]],[R[23]]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[21],E,E,6,[[],[R[23]]]],[11,R[25],E,E,6,[[["self"]],[T]]],[11,R[22],E,E,6,[[["self"]],[T]]],[11,R[24],E,E,6,[[["self"]],[R[26]]]],[11,R[20],E,E,7,[[[U]],[R[23]]]],[11,"into",E,E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[21],E,E,7,[[],[R[23]]]],[11,R[25],E,E,7,[[["self"]],[T]]],[11,R[22],E,E,7,[[["self"]],[T]]],[11,R[24],E,E,7,[[["self"]],[R[26]]]],[11,R[20],E,E,8,[[[U]],[R[23]]]],[11,"into",E,E,8,[[],[U]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[21],E,E,8,[[],[R[23]]]],[11,R[25],E,E,8,[[["self"]],[T]]],[11,R[22],E,E,8,[[["self"]],[T]]],[11,R[24],E,E,8,[[["self"]],[R[26]]]],[11,R[189],E,E,8,[[["self"]],[T]]],[11,R[187],E,E,8,[[["self"],[T]]]],[11,R[20],E,E,9,[[[U]],[R[23]]]],[11,"into",E,E,9,[[],[U]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[21],E,E,9,[[],[R[23]]]],[11,R[25],E,E,9,[[["self"]],[T]]],[11,R[22],E,E,9,[[["self"]],[T]]],[11,R[24],E,E,9,[[["self"]],[R[26]]]],[11,R[189],E,E,9,[[["self"]],[T]]],[11,R[187],E,E,9,[[["self"],[T]]]],[11,R[20],R[188],E,10,[[[U]],[R[23]]]],[11,"into",E,E,10,[[],[U]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[21],E,E,10,[[],[R[23]]]],[11,R[25],E,E,10,[[["self"]],[T]]],[11,R[22],E,E,10,[[["self"]],[T]]],[11,R[24],E,E,10,[[["self"]],[R[26]]]],[11,R[20],R[66],E,11,[[[U]],[R[23]]]],[11,"into",E,E,11,[[],[U]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[21],E,E,11,[[],[R[23]]]],[11,R[25],E,E,11,[[["self"]],[T]]],[11,R[22],E,E,11,[[["self"]],[T]]],[11,R[24],E,E,11,[[["self"]],[R[26]]]],[11,R[189],E,E,11,[[["self"]],[T]]],[11,R[187],E,E,11,[[["self"],[T]]]],[11,R[20],E,E,12,[[[U]],[R[23]]]],[11,"into",E,E,12,[[],[U]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[21],E,E,12,[[],[R[23]]]],[11,R[25],E,E,12,[[["self"]],[T]]],[11,R[22],E,E,12,[[["self"]],[T]]],[11,R[24],E,E,12,[[["self"]],[R[26]]]],[11,R[189],E,E,12,[[["self"]],[T]]],[11,R[187],E,E,12,[[["self"],[T]]]],[11,R[20],R[190],E,13,[[[U]],[R[23]]]],[11,"into",E,E,13,[[],[U]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[21],E,E,13,[[],[R[23]]]],[11,R[25],E,E,13,[[["self"]],[T]]],[11,R[22],E,E,13,[[["self"]],[T]]],[11,R[24],E,E,13,[[["self"]],[R[26]]]],[11,R[20],R[191],E,14,[[[U]],[R[23]]]],[11,"into",E,E,14,[[],[U]]],[11,"from",E,E,14,[[[T]],[T]]],[11,R[21],E,E,14,[[],[R[23]]]],[11,R[25],E,E,14,[[["self"]],[T]]],[11,R[22],E,E,14,[[["self"]],[T]]],[11,R[24],E,E,14,[[["self"]],[R[26]]]],[11,R[192],E,E,14,[[["self"]],["string"]]],[11,R[189],E,E,14,[[["self"]],[T]]],[11,R[187],E,E,14,[[["self"],[T]]]],[11,R[20],E,E,15,[[[U]],[R[23]]]],[11,"into",E,E,15,[[],[U]]],[11,"from",E,E,15,[[[T]],[T]]],[11,R[21],E,E,15,[[],[R[23]]]],[11,R[25],E,E,15,[[["self"]],[T]]],[11,R[22],E,E,15,[[["self"]],[T]]],[11,R[24],E,E,15,[[["self"]],[R[26]]]],[11,R[192],E,E,15,[[["self"]],["string"]]],[11,R[189],E,E,15,[[["self"]],[T]]],[11,R[187],E,E,15,[[["self"],[T]]]],[11,R[20],R[83],E,49,[[[U]],[R[23]]]],[11,"into",E,E,49,[[],[U]]],[11,"from",E,E,49,[[[T]],[T]]],[11,R[21],E,E,49,[[],[R[23]]]],[11,R[25],E,E,49,[[["self"]],[T]]],[11,R[22],E,E,49,[[["self"]],[T]]],[11,R[24],E,E,49,[[["self"]],[R[26]]]],[11,R[20],E,E,16,[[[U]],[R[23]]]],[11,"into",E,E,16,[[],[U]]],[11,"from",E,E,16,[[[T]],[T]]],[11,R[21],E,E,16,[[],[R[23]]]],[11,R[25],E,E,16,[[["self"]],[T]]],[11,R[22],E,E,16,[[["self"]],[T]]],[11,R[24],E,E,16,[[["self"]],[R[26]]]],[11,R[20],E,E,17,[[[U]],[R[23]]]],[11,"into",E,E,17,[[],[U]]],[11,"from",E,E,17,[[[T]],[T]]],[11,R[21],E,E,17,[[],[R[23]]]],[11,R[25],E,E,17,[[["self"]],[T]]],[11,R[22],E,E,17,[[["self"]],[T]]],[11,R[24],E,E,17,[[["self"]],[R[26]]]],[11,R[20],E,E,18,[[[U]],[R[23]]]],[11,"into",E,E,18,[[],[U]]],[11,"from",E,E,18,[[[T]],[T]]],[11,R[21],E,E,18,[[],[R[23]]]],[11,R[25],E,E,18,[[["self"]],[T]]],[11,R[22],E,E,18,[[["self"]],[T]]],[11,R[24],E,E,18,[[["self"]],[R[26]]]],[11,R[189],E,E,18,[[["self"]],[T]]],[11,R[187],E,E,18,[[["self"],[T]]]],[11,R[20],E,E,42,[[[U]],[R[23]]]],[11,"into",E,E,42,[[],[U]]],[11,"from",E,E,42,[[[T]],[T]]],[11,R[21],E,E,42,[[],[R[23]]]],[11,R[25],E,E,42,[[["self"]],[T]]],[11,R[22],E,E,42,[[["self"]],[T]]],[11,R[24],E,E,42,[[["self"]],[R[26]]]],[11,R[20],E,E,43,[[[U]],[R[23]]]],[11,"into",E,E,43,[[],[U]]],[11,"from",E,E,43,[[[T]],[T]]],[11,R[21],E,E,43,[[],[R[23]]]],[11,R[25],E,E,43,[[["self"]],[T]]],[11,R[22],E,E,43,[[["self"]],[T]]],[11,R[24],E,E,43,[[["self"]],[R[26]]]],[11,R[20],E,E,19,[[[U]],[R[23]]]],[11,"into",E,E,19,[[],[U]]],[11,"from",E,E,19,[[[T]],[T]]],[11,R[21],E,E,19,[[],[R[23]]]],[11,R[25],E,E,19,[[["self"]],[T]]],[11,R[22],E,E,19,[[["self"]],[T]]],[11,R[24],E,E,19,[[["self"]],[R[26]]]],[11,R[20],R[193],E,20,[[[U]],[R[23]]]],[11,"into",E,E,20,[[],[U]]],[11,"from",E,E,20,[[[T]],[T]]],[11,R[21],E,E,20,[[],[R[23]]]],[11,R[25],E,E,20,[[["self"]],[T]]],[11,R[22],E,E,20,[[["self"]],[T]]],[11,R[24],E,E,20,[[["self"]],[R[26]]]],[11,R[189],E,E,20,[[["self"]],[T]]],[11,R[187],E,E,20,[[["self"],[T]]]],[11,R[20],E,E,21,[[[U]],[R[23]]]],[11,"into",E,E,21,[[],[U]]],[11,"from",E,E,21,[[[T]],[T]]],[11,R[21],E,E,21,[[],[R[23]]]],[11,R[25],E,E,21,[[["self"]],[T]]],[11,R[22],E,E,21,[[["self"]],[T]]],[11,R[24],E,E,21,[[["self"]],[R[26]]]],[11,R[189],E,E,21,[[["self"]],[T]]],[11,R[187],E,E,21,[[["self"],[T]]]],[11,R[20],E,E,22,[[[U]],[R[23]]]],[11,"into",E,E,22,[[],[U]]],[11,"from",E,E,22,[[[T]],[T]]],[11,R[21],E,E,22,[[],[R[23]]]],[11,R[25],E,E,22,[[["self"]],[T]]],[11,R[22],E,E,22,[[["self"]],[T]]],[11,R[24],E,E,22,[[["self"]],[R[26]]]],[11,R[20],R[137],E,23,[[[U]],[R[23]]]],[11,"into",E,E,23,[[],[U]]],[11,"from",E,E,23,[[[T]],[T]]],[11,R[21],E,E,23,[[],[R[23]]]],[11,R[25],E,E,23,[[["self"]],[T]]],[11,R[22],E,E,23,[[["self"]],[T]]],[11,R[24],E,E,23,[[["self"]],[R[26]]]],[11,R[20],E,E,24,[[[U]],[R[23]]]],[11,"into",E,E,24,[[],[U]]],[11,"from",E,E,24,[[[T]],[T]]],[11,R[21],E,E,24,[[],[R[23]]]],[11,R[25],E,E,24,[[["self"]],[T]]],[11,R[22],E,E,24,[[["self"]],[T]]],[11,R[24],E,E,24,[[["self"]],[R[26]]]],[11,R[20],E,E,25,[[[U]],[R[23]]]],[11,"into",E,E,25,[[],[U]]],[11,"from",E,E,25,[[[T]],[T]]],[11,R[21],E,E,25,[[],[R[23]]]],[11,R[25],E,E,25,[[["self"]],[T]]],[11,R[22],E,E,25,[[["self"]],[T]]],[11,R[24],E,E,25,[[["self"]],[R[26]]]],[11,R[20],E,E,26,[[[U]],[R[23]]]],[11,"into",E,E,26,[[],[U]]],[11,"from",E,E,26,[[[T]],[T]]],[11,R[21],E,E,26,[[],[R[23]]]],[11,R[25],E,E,26,[[["self"]],[T]]],[11,R[22],E,E,26,[[["self"]],[T]]],[11,R[24],E,E,26,[[["self"]],[R[26]]]],[11,R[20],E,E,27,[[[U]],[R[23]]]],[11,"into",E,E,27,[[],[U]]],[11,"from",E,E,27,[[[T]],[T]]],[11,R[21],E,E,27,[[],[R[23]]]],[11,R[25],E,E,27,[[["self"]],[T]]],[11,R[22],E,E,27,[[["self"]],[T]]],[11,R[24],E,E,27,[[["self"]],[R[26]]]],[11,R[20],E,E,28,[[[U]],[R[23]]]],[11,"into",E,E,28,[[],[U]]],[11,"from",E,E,28,[[[T]],[T]]],[11,R[21],E,E,28,[[],[R[23]]]],[11,R[25],E,E,28,[[["self"]],[T]]],[11,R[22],E,E,28,[[["self"]],[T]]],[11,R[24],E,E,28,[[["self"]],[R[26]]]],[11,R[20],E,E,29,[[[U]],[R[23]]]],[11,"into",E,E,29,[[],[U]]],[11,"from",E,E,29,[[[T]],[T]]],[11,R[21],E,E,29,[[],[R[23]]]],[11,R[25],E,E,29,[[["self"]],[T]]],[11,R[22],E,E,29,[[["self"]],[T]]],[11,R[24],E,E,29,[[["self"]],[R[26]]]],[11,R[20],E,E,30,[[[U]],[R[23]]]],[11,"into",E,E,30,[[],[U]]],[11,"from",E,E,30,[[[T]],[T]]],[11,R[21],E,E,30,[[],[R[23]]]],[11,R[25],E,E,30,[[["self"]],[T]]],[11,R[22],E,E,30,[[["self"]],[T]]],[11,R[24],E,E,30,[[["self"]],[R[26]]]],[11,R[20],E,E,31,[[[U]],[R[23]]]],[11,"into",E,E,31,[[],[U]]],[11,"from",E,E,31,[[[T]],[T]]],[11,R[21],E,E,31,[[],[R[23]]]],[11,R[25],E,E,31,[[["self"]],[T]]],[11,R[22],E,E,31,[[["self"]],[T]]],[11,R[24],E,E,31,[[["self"]],[R[26]]]],[11,R[20],E,E,50,[[[U]],[R[23]]]],[11,"into",E,E,50,[[],[U]]],[11,"from",E,E,50,[[[T]],[T]]],[11,R[21],E,E,50,[[],[R[23]]]],[11,R[25],E,E,50,[[["self"]],[T]]],[11,R[22],E,E,50,[[["self"]],[T]]],[11,R[24],E,E,50,[[["self"]],[R[26]]]],[11,R[20],E,E,51,[[[U]],[R[23]]]],[11,"into",E,E,51,[[],[U]]],[11,"from",E,E,51,[[[T]],[T]]],[11,R[21],E,E,51,[[],[R[23]]]],[11,R[25],E,E,51,[[["self"]],[T]]],[11,R[22],E,E,51,[[["self"]],[T]]],[11,R[24],E,E,51,[[["self"]],[R[26]]]],[11,R[20],R[194],E,32,[[[U]],[R[23]]]],[11,"into",E,E,32,[[],[U]]],[11,"from",E,E,32,[[[T]],[T]]],[11,R[21],E,E,32,[[],[R[23]]]],[11,R[25],E,E,32,[[["self"]],[T]]],[11,R[22],E,E,32,[[["self"]],[T]]],[11,R[24],E,E,32,[[["self"]],[R[26]]]],[11,R[189],E,E,32,[[["self"]],[T]]],[11,R[187],E,E,32,[[["self"],[T]]]],[11,R[20],E,E,33,[[[U]],[R[23]]]],[11,"into",E,E,33,[[],[U]]],[11,"from",E,E,33,[[[T]],[T]]],[11,R[21],E,E,33,[[],[R[23]]]],[11,R[25],E,E,33,[[["self"]],[T]]],[11,R[22],E,E,33,[[["self"]],[T]]],[11,R[24],E,E,33,[[["self"]],[R[26]]]],[11,R[189],E,E,33,[[["self"]],[T]]],[11,R[187],E,E,33,[[["self"],[T]]]],[11,R[20],E,E,34,[[[U]],[R[23]]]],[11,"into",E,E,34,[[],[U]]],[11,"from",E,E,34,[[[T]],[T]]],[11,R[21],E,E,34,[[],[R[23]]]],[11,R[25],E,E,34,[[["self"]],[T]]],[11,R[22],E,E,34,[[["self"]],[T]]],[11,R[24],E,E,34,[[["self"]],[R[26]]]],[11,R[20],R[195],E,44,[[[U]],[R[23]]]],[11,"into",E,E,44,[[],[U]]],[11,"from",E,E,44,[[[T]],[T]]],[11,R[21],E,E,44,[[],[R[23]]]],[11,R[25],E,E,44,[[["self"]],[T]]],[11,R[22],E,E,44,[[["self"]],[T]]],[11,R[24],E,E,44,[[["self"]],[R[26]]]],[11,R[20],E,E,45,[[[U]],[R[23]]]],[11,"into",E,E,45,[[],[U]]],[11,"from",E,E,45,[[[T]],[T]]],[11,R[21],E,E,45,[[],[R[23]]]],[11,R[25],E,E,45,[[["self"]],[T]]],[11,R[22],E,E,45,[[["self"]],[T]]],[11,R[24],E,E,45,[[["self"]],[R[26]]]],[11,R[20],E,E,46,[[[U]],[R[23]]]],[11,"into",E,E,46,[[],[U]]],[11,"from",E,E,46,[[[T]],[T]]],[11,R[21],E,E,46,[[],[R[23]]]],[11,R[25],E,E,46,[[["self"]],[T]]],[11,R[22],E,E,46,[[["self"]],[T]]],[11,R[24],E,E,46,[[["self"]],[R[26]]]],[11,R[20],R[196],E,47,[[[U]],[R[23]]]],[11,"into",E,E,47,[[],[U]]],[11,"from",E,E,47,[[[T]],[T]]],[11,R[21],E,E,47,[[],[R[23]]]],[11,R[25],E,E,47,[[["self"]],[T]]],[11,R[22],E,E,47,[[["self"]],[T]]],[11,R[24],E,E,47,[[["self"]],[R[26]]]],[11,R[198],R[137],E,23,[[["self"]]]],[11,R[197],E,E,23,[[["self"]]]],[11,R[198],E,E,24,[[["self"]]]],[11,R[197],E,E,24,[[["self"]]]],[11,R[198],E,E,25,[[["self"]]]],[11,R[197],E,E,25,[[["self"]]]],[11,R[198],E,E,26,[[["self"]]]],[11,R[197],E,E,26,[[["self"]]]],[11,R[198],E,E,28,[[["self"]]]],[11,R[197],E,E,28,[[["self"]]]],[11,R[198],E,E,29,[[["self"]]]],[11,R[197],E,E,29,[[["self"]]]],[11,R[198],E,E,30,[[["self"]]]],[11,R[197],E,E,30,[[["self"]]]],[11,R[198],E,E,31,[[["self"]]]],[11,R[197],E,E,31,[[["self"]]]],[11,R[199],E,"Gets a reference to a page table through recursive mapping",25,[[["self"],[R[4]]],[[R[82],[R[141]]],[R[141]]]]],[11,R[200],E,R[201],25,[[["self"],[R[4]]],[R[141]]]],[11,R[199],E,"Temporary map the table",28,[[["self"],[R[4]]],[[R[82],[R[141]]],[R[141]]]]],[11,R[200],E,"Allocates a page table, temporarily map it, zero it and…",28,[[["self"],[R[4]]],[R[141]]]],[11,R[199],E,"Simply cast pointed frame as PageTable",30,[[["self"],[R[4]]],[[R[82],[R[141]]],[R[141]]]]],[11,R[200],E,R[201],30,[[["self"],[R[4]]],[R[141]]]],[11,R[202],R[83],E,49,[[["self"]],[[R[203]],[R[141],[R[203]]]]]],[11,R[202],E,"Temporary map the directory",16,[[["self"]],[[R[141],[R[204]]],[R[204]]]]],[11,R[202],E,E,17,[[["self"]],[R[141]]]],[11,R[146],R[137],E,50,[[]]],[11,R[146],E,E,51,[[]]],[11,R[178],R[83],E,42,[[],[R[77]]]],[11,R[179],E,E,42,[[],[R[77]]]],[11,R[178],E,E,43,[[],[R[77]]]],[11,R[179],E,E,43,[[],[R[77]]]],[11,R[785],R[193],E,20,[[["self"]],["bool"]]],[11,R[99],E,E,20,[[["self"]],["bool"]]],[11,R[100],E,E,20,[[["self"]],["bool"]]],[11,R[101],E,E,20,[[["self"]],["bool"]]],[11,R[205],E,E,20,[[["self"]],["bool"]]],[11,R[206],E,E,20,[[["self"]],["bool"]]],[11,"DIRTY",E,E,20,[[["self"]],["bool"]]],[11,R[102],E,E,20,[[["self"]],["bool"]]],[11,"GLOBAL",E,E,20,[[["self"]],["bool"]]],[11,R[103],E,E,20,[[["self"]],["bool"]]],[11,R[104],E,E,20,[[["self"]],["bool"]]],[11,R[105],E,E,20,[[["self"]],["bool"]]],[11,R[785],R[194],E,32,[[["self"]],["bool"]]],[11,R[99],E,E,32,[[["self"]],["bool"]]],[11,R[100],E,E,32,[[["self"]],["bool"]]],[11,R[101],E,E,32,[[["self"]],["bool"]]],[11,R[205],E,E,32,[[["self"]],["bool"]]],[11,R[206],E,E,32,[[["self"]],["bool"]]],[11,"DIRTY",E,E,32,[[["self"]],["bool"]]],[11,R[102],E,E,32,[[["self"]],["bool"]]],[11,"GLOBAL",E,E,32,[[["self"]],["bool"]]],[11,R[103],E,E,32,[[["self"]],["bool"]]],[11,R[104],E,E,32,[[["self"]],["bool"]]],[11,R[105],E,E,32,[[["self"]],["bool"]]],[11,R[99],R[83],E,18,[[["self"]],["bool"]]],[11,R[100],E,E,18,[[["self"]],["bool"]]],[11,R[207],R[137],E,25,[[["self"]]]],[11,R[207],E,E,26,[[["self"]]]],[11,R[207],E,E,27,[[["self"]],[T]]],[11,R[207],E,E,28,[[["self"]]]],[11,R[207],E,E,29,[[["self"]]]],[11,R[207],E,E,30,[[["self"]]]],[11,R[207],E,E,31,[[["self"]]]],[11,"deref",R[62],E,5,[[["self"]],[R[72]]]],[11,"deref",E,E,6,[[["self"]],[R[72]]]],[11,"deref",R[137],E,25,[[["self"]]]],[11,"deref",E,E,26,[[["self"]]]],[11,"deref",E,E,27,[[["self"]],[T]]],[11,"deref",E,E,28,[[["self"]]]],[11,"deref",E,E,29,[[["self"]]]],[11,"deref",E,E,30,[[["self"]]]],[11,"deref",E,E,31,[[["self"]]]],[11,"fmt",R[191],E,14,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,15,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",R[188],E,10,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[66],E,12,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,11,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[62],E,9,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,8,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[191],E,14,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,15,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",R[193],E,20,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,21,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,22,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[194],E,32,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,33,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,34,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[83],E,18,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[195],E,45,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[196],E,47,[[["self"],[R[28]]],[R[23]]]],[11,"sub",R[191],R[208],15,[[[R[4]]],[R[77]]]],[11,"sub",E,R[208],14,[[[R[4]]],[R[74]]]],[11,"sub",E,R[209],15,[[[R[77]]],[R[4]]]],[11,"sub",E,R[209],14,[[[R[74]]],[R[4]]]],[11,"sub",R[193],R[210],20,[[[R[81]]],[R[81]]]],[11,"sub",R[194],R[210],32,[[[R[81]]],[R[81]]]],[11,"sub",R[83],R[210],18,[[[R[81]]],[R[81]]]],[11,"eq",R[66],E,12,[[["self"],[R[61]]],["bool"]]],[11,"eq",R[191],E,14,[[["self"],[R[74]]],["bool"]]],[11,"ne",E,E,14,[[["self"],[R[74]]],["bool"]]],[11,"eq",E,E,15,[[["self"],[R[77]]],["bool"]]],[11,"ne",E,E,15,[[["self"],[R[77]]],["bool"]]],[11,"eq",R[193],E,20,[[["self"],[R[81]]],["bool"]]],[11,"ne",E,E,20,[[["self"],[R[81]]],["bool"]]],[11,"eq",R[194],E,32,[[["self"],[R[81]]],["bool"]]],[11,"ne",E,E,32,[[["self"],[R[81]]],["bool"]]],[11,"eq",R[83],E,18,[[["self"],[R[81]]],["bool"]]],[11,"ne",E,E,18,[[["self"],[R[81]]],["bool"]]],[11,R[211],R[66],E,12,[[["self"]]]],[11,R[211],R[191],E,14,[[["self"]]]],[11,R[211],E,E,15,[[["self"]]]],[11,R[211],R[193],E,20,[[["self"]]]],[11,R[211],R[194],E,32,[[["self"]]]],[11,R[211],R[83],E,18,[[["self"]]]],[11,"cmp",R[191],E,14,[[["self"],[R[74]]],[R[47]]]],[11,"cmp",E,E,15,[[["self"],[R[77]]],[R[47]]]],[11,"cmp",R[193],E,20,[[["self"],[R[81]]],[R[47]]]],[11,"cmp",R[194],E,32,[[["self"],[R[81]]],[R[47]]]],[11,"cmp",R[83],E,18,[[["self"],[R[81]]],[R[47]]]],[11,R[212],R[191],E,14,[[["self"],[R[74]]],[[R[5],[R[47]]],[R[47]]]]],[11,"lt",E,E,14,[[["self"],[R[74]]],["bool"]]],[11,"le",E,E,14,[[["self"],[R[74]]],["bool"]]],[11,"gt",E,E,14,[[["self"],[R[74]]],["bool"]]],[11,"ge",E,E,14,[[["self"],[R[74]]],["bool"]]],[11,R[212],E,E,15,[[["self"],[R[77]]],[[R[5],[R[47]]],[R[47]]]]],[11,"lt",E,E,15,[[["self"],[R[77]]],["bool"]]],[11,"le",E,E,15,[[["self"],[R[77]]],["bool"]]],[11,"gt",E,E,15,[[["self"],[R[77]]],["bool"]]],[11,"ge",E,E,15,[[["self"],[R[77]]],["bool"]]],[11,R[212],R[193],E,20,[[["self"],[R[81]]],[[R[5],[R[47]]],[R[47]]]]],[11,"lt",E,E,20,[[["self"],[R[81]]],["bool"]]],[11,"le",E,E,20,[[["self"],[R[81]]],["bool"]]],[11,"gt",E,E,20,[[["self"],[R[81]]],["bool"]]],[11,"ge",E,E,20,[[["self"],[R[81]]],["bool"]]],[11,R[212],R[194],E,32,[[["self"],[R[81]]],[[R[5],[R[47]]],[R[47]]]]],[11,"lt",E,E,32,[[["self"],[R[81]]],["bool"]]],[11,"le",E,E,32,[[["self"],[R[81]]],["bool"]]],[11,"gt",E,E,32,[[["self"],[R[81]]],["bool"]]],[11,"ge",E,E,32,[[["self"],[R[81]]],["bool"]]],[11,R[212],R[83],E,18,[[["self"],[R[81]]],[[R[5],[R[47]]],[R[47]]]]],[11,"lt",E,E,18,[[["self"],[R[81]]],["bool"]]],[11,"le",E,E,18,[[["self"],[R[81]]],["bool"]]],[11,"gt",E,E,18,[[["self"],[R[81]]],["bool"]]],[11,"ge",E,E,18,[[["self"],[R[81]]],["bool"]]],[11,R[823],R[186],R[824],48,[[["self"],["str"]],[[R[23],["error"]],["error"]]]],[11,"add",R[191],R[213],15,[[[R[4]]],[R[77]]]],[11,"add",E,R[213],14,[[[R[4]]],[R[74]]]],[11,R[214],E,R[213],15,[[["self"],[R[4]]]]],[11,R[214],E,R[213],14,[[["self"],[R[4]]]]],[11,R[215],E,R[208],15,[[["self"],[R[4]]]]],[11,R[215],E,R[208],14,[[["self"],[R[4]]]]],[11,R[215],R[193],R[216],20,[[["self"],[R[81]]]]],[11,R[215],R[194],R[216],32,[[["self"],[R[81]]]]],[11,R[215],R[83],R[216],18,[[["self"],[R[81]]]]],[11,"not",R[193],R[217],20,[[],[R[81]]]],[11,"not",R[194],R[217],32,[[],[R[81]]]],[11,"not",R[83],R[217],18,[[],[R[81]]]],[11,R[3],R[193],R[218],20,[[[R[81]]],[R[81]]]],[11,R[3],R[194],R[218],32,[[[R[81]]],[R[81]]]],[11,R[3],R[83],R[218],18,[[[R[81]]],[R[81]]]],[11,"bitor",R[193],R[219],20,[[[R[81]]],[R[81]]]],[11,"bitor",R[194],R[219],32,[[[R[81]]],[R[81]]]],[11,"bitor",R[83],R[219],18,[[[R[81]]],[R[81]]]],[11,"bitxor",R[193],R[220],20,[[[R[81]]],[R[81]]]],[11,"bitxor",R[194],R[220],32,[[[R[81]]],[R[81]]]],[11,"bitxor",R[83],R[220],18,[[[R[81]]],[R[81]]]],[11,R[221],R[193],R[222],20,[[["self"],[R[81]]]]],[11,R[221],R[194],R[222],32,[[["self"],[R[81]]]]],[11,R[221],R[83],R[222],18,[[["self"],[R[81]]]]],[11,R[223],R[193],R[224],20,[[["self"],[R[81]]]]],[11,R[223],R[194],R[224],32,[[["self"],[R[81]]]]],[11,R[223],R[83],R[224],18,[[["self"],[R[81]]]]],[11,R[225],R[193],R[226],20,[[["self"],[R[81]]]]],[11,R[225],R[194],R[226],32,[[["self"],[R[81]]]]],[11,R[225],R[83],R[226],18,[[["self"],[R[81]]]]],[11,"drop",R[137],E,27,[[["self"]]]],[11,"drop",E,E,28,[[["self"]]]],[11,"drop",E,E,29,[[["self"]]]],[11,"drop",R[195],E,45,[[["self"]]]],[11,"index",R[137],E,24,[[["self"],[R[4]]],["entry"]]],[11,"index",E,E,23,[[["self"],[R[4]]],["entry"]]],[11,"index",E,E,25,[[["self"],[R[4]]],["entry"]]],[11,"index",E,E,26,[[["self"],[R[4]]],["entry"]]],[11,"index",E,E,28,[[["self"],[R[4]]],["entry"]]],[11,"index",E,E,29,[[["self"],[R[4]]],["entry"]]],[11,"index",E,E,30,[[["self"],[R[4]]],["entry"]]],[11,"index",E,E,31,[[["self"],[R[4]]],["entry"]]],[11,R[227],E,E,24,[[["self"],[R[4]]],["entry"]]],[11,R[227],E,E,23,[[["self"],[R[4]]],["entry"]]],[11,R[227],E,E,25,[[["self"],[R[4]]],["entry"]]],[11,R[227],E,E,26,[[["self"],[R[4]]],["entry"]]],[11,R[227],E,E,28,[[["self"],[R[4]]],["entry"]]],[11,R[227],E,E,29,[[["self"],[R[4]]],["entry"]]],[11,R[227],E,E,30,[[["self"],[R[4]]],["entry"]]],[11,R[227],E,E,31,[[["self"],[R[4]]],["entry"]]],[11,"hash",R[191],E,14,[[["self"],["__h"]]]],[11,"hash",E,E,15,[[["self"],["__h"]]]],[11,"hash",R[193],E,20,[[["self"],["__h"]]]],[11,"hash",R[194],E,32,[[["self"],["__h"]]]],[11,"hash",R[83],E,18,[[["self"],["__h"]]]],[11,"extend",R[193],E,20,[[["self"],[R[228]]]]],[11,"extend",R[194],E,32,[[["self"],[R[228]]]]],[11,"extend",R[83],E,18,[[["self"],[R[228]]]]],[11,R[229],R[193],E,20,[[[R[228]]],[R[81]]]],[11,R[229],R[194],E,32,[[[R[228]]],[R[81]]]],[11,R[229],R[83],E,18,[[[R[228]]],[R[81]]]],[11,"from",R[193],E,20,[[[R[81]]],[R[81]]]],[11,"from",R[194],E,32,[[[R[81]]],[R[81]]]],[11,"fmt",R[193],E,20,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[194],E,32,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[83],E,18,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[193],E,20,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[194],E,32,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[83],E,18,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[191],E,14,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,15,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",R[193],E,20,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[194],E,32,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[83],E,18,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[193],E,20,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[194],E,32,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[83],E,18,[[["self"],[R[28]]],[R[23]]]],[11,"clone",R[66],E,12,[[["self"]],[R[61]]]],[11,"clone",E,E,11,[[["self"]],[R[72]]]],[11,"clone",R[62],E,9,[[["self"]],[R[230]]]],[11,"clone",E,E,8,[[["self"]],[R[69]]]],[11,"clone",R[191],E,14,[[["self"]],[R[74]]]],[11,"clone",E,E,15,[[["self"]],[R[77]]]],[11,"clone",R[193],E,20,[[["self"]],[R[81]]]],[11,"clone",E,E,21,[[["self"]],["entry"]]],[11,"clone",R[194],E,32,[[["self"]],[R[81]]]],[11,"clone",E,E,33,[[["self"]],["entry"]]],[11,"clone",R[83],E,18,[[["self"]],[R[81]]]],[11,R[49],R[66],E,11,[[],[R[72]]]],[11,R[49],R[83],E,16,[[],[R[149]]]],[11,R[231],R[62],E,5,[[["self"]]]],[11,R[231],E,E,6,[[["self"]]]]],"p":[[3,R[232]],[3,"EndTag"],[3,R[233]],[3,R[234]],[3,R[235]],[3,R[67]],[3,R[68]],[3,R[236]],[3,R[237]],[4,R[238]],[3,R[239]],[3,R[240]],[4,R[241]],[3,R[242]],[3,R[243]],[3,R[244]],[3,R[86]],[3,R[88]],[3,R[79]],[4,R[90]],[3,R[79]],[3,"Entry"],[4,R[95]],[3,R[245]],[3,R[246]],[3,R[247]],[3,R[248]],[3,R[249]],[3,R[250]],[3,R[251]],[3,R[252]],[3,R[253]],[3,R[79]],[3,"Entry"],[4,R[95]],[8,R[254]],[8,R[255]],[8,R[256]],[8,R[257]],[8,R[151]],[8,"Flusher"],[8,R[258]],[3,R[259]],[3,R[371]],[3,R[260]],[3,"Frame"],[3,R[261]],[3,R[262]],[3,"Serial"],[3,R[84]],[3,R[401]],[3,"NoFlush"]]};
searchIndex["sunrise_fs"]={"doc":"Filesystem sysmodule","i":[[5,"main",R[1743],E,N,[[]]],[0,"detail",E,"Detail module",N,N],[3,R[352],R[1673],R[1657],N,N],[12,"inner",E,R[340],0,N],[3,R[353],E,R[1658],N,N],[12,"inner",E,R[340],1,N],[12,R[341],E,R[1659],1,N],[12,R[342],E,R[1660],1,N],[12,R[343],E,R[1661],1,N],[12,"position",E,R[1662],1,N],[12,"block_at_free_entry",E,"Stop the iterator at free entries.",1,N],[3,R[1770],E,R[1417],N,N],[0,"driver",E,"Contains driver implementations of file system.",N,N],[3,R[1764],R[1669],"Instance handling drivers registration and usage.",N,N],[12,"registry",E,"The registry of the drivers availaible.",2,N],[12,"drives",E,"The drives actually opened.",2,N],[12,"partitions",E,"The partitions opened in drives.",2,N],[12,"ahci_interface",E,"AHCI IPC interface.",2,N],[3,R[1670],E,E,N,N],[12,R[60],E,E,3,N],[3,R[1765],E,"A wrapper to a ahci IDisk.",N,N],[12,"inner",E,"The inner IDisk.",4,N],[0,"fat",E,"FAT driver implementation layer",N,N],[3,"FATDriver",R[1666],"A FAT driver.",N,N],[0,"directory",E,"FAT filesystem implementation of DirectoryOperations",N,N],[3,R[1767],R[1749],"Predicate helper used to filter directory entries.",N,N],[3,R[1766],E,"A libfat directory reader implementing…",N,N],[12,"base_path",E,"The opened directory path. Used to get the complete path…",5,N],[12,"inner_fs",E,R[1667],5,N],[12,"internal_iter",E,"The iterator used to iter over libfat's directory entries.",5,N],[12,"filter_fn",E,"The filter required by the user.",5,N],[12,R[1740],E,"The number of entries in the directory after `filter_fn`.",5,N],[11,"all",E,"Accept all entries except \".\" & \"..\".",6,[[[R[1663]]],["bool"]]],[11,"dirs",E,"Only accept directory entries.",6,[[[R[1663]]],["bool"]]],[11,"files",E,"Only accept file entries.",6,[[[R[1663]]],["bool"]]],[11,"new",E,"Create a new DirectoryInterface.",5,[[["fatdirectoryentryiterator"],["u64"],[R[1664]],["mutex",[R[339]]],["arc",["mutex"]]],["self"]]],[11,"convert_entry",E,"convert libfat's DirectoryEntry to libfs's DirectoryEntry.",5,[[[R[1663]],[R[1664]]],[[R[1668],[R[1665]]],[R[1665]]]]],[0,"file",R[1666],"FAT filesystem implementation of FileOperations",N,N],[3,R[1768],R[1750],"A libfat file interface implementing `FileOperations`.",N,N],[12,"inner_fs",E,R[1667],7,N],[12,"file_inner",E,"The libfat's directory entry of this file.",7,N],[12,"mode",E,"File mode flags.",7,N],[11,"new",E,"Create a new FileInterface.",7,[[[R[1741]],["file"],["mutex",[R[339]]],["arc",["mutex"]]],["self"]]],[0,R[1761],R[1666],"IFileSystem implementation using libfat.",N,N],[3,R[1769],R[1751],"A wrapper arround libfat `FatFileSystem` implementing…",N,N],[12,"inner",E,R[1667],8,N],[11,"new",E,"Create a new FAT filesystem instance.",8,[[["box",[R[346]]],[R[339],["box"]]],["self"]]],[11,"from_storage",E,"Construct a FAT filesystem instance with an IStorage.",8,[[["box",[R[346]]],[R[346]]],[R[1668]]]],[0,"error",R[1666],"Error utils for the libuser <=> libfat",N,N],[5,"from_driver","sunrise_fs::detail::driver::fat::error","Convert a FatError to a libuser Error",N,[[["faterror"]],["error"]]],[6,"PartitionHashMap",R[1669],"A type to let clippy slide over it.",N,N],[6,"BoxedIStorage",E,"A boxed IStorage using the proper Error type.",N,N],[7,R[1670],E,E,N,N],[11,"register_driver",E,"Register a new driver",2,[[["self"],["box",[R[1671]]],[R[1671]]]]],[11,"add_opened_drive",E,"Add a new drive to the open hashmap.",2,[[["self"],["mutex",["box"]],["arc",["mutex"]],["diskid"]]]],[11,"init_drives",E,"Do the disk init using AHCI",2,[[["self"]],[R[1668]]]],[11,R[1423],E,"Open a AHCI disk as a IStorage.",2,[[["self"],["diskid"]],[[R[1668],["arc"]],["arc",["mutex"]]]]],[11,"construct_filesystem_from_disk_partition",E,"Open an instance of a filesystem.",2,[[["self"],[R[1420]],[R[1672]],["diskid"]],[["arc",["mutex"]],[R[1668],["arc"]]]]],[11,R[1425],E,"Format a partition storage to a given filesystem.",2,[[["self"],[R[1384]],[R[1672]]],[R[1668]]]],[11,"new",E,"Create a new AhciDiskStorage.",4,[[[R[1336]]],["self"]]],[0,"gpt",R[1673],R[1674],N,N],[3,"RawUUID",R[1752],R[1675],N,N],[12,"d1",E,"Low part.",9,N],[12,"d2",E,"Mid part.",9,N],[12,"d3",E,"High part and version.",9,N],[12,"d4",E,"Node.",9,N],[3,R[350],E,R[1676],N,N],[12,"signature",E,R[1677],10,N],[12,"revision",E,R[1678],10,N],[12,R[1679],E,R[1680],10,N],[12,"crc32",E,R[1681],10,N],[12,R[35],E,R[1682],10,N],[12,R[1683],E,R[1684],10,N],[12,"backup_lba",E,R[1685],10,N],[12,R[1686],E,R[1687],10,N],[12,R[1688],E,R[1689],10,N],[12,"disk_guid",E,R[1690],10,N],[12,R[341],E,R[1691],10,N],[12,R[342],E,R[1692],10,N],[12,R[343],E,R[1693],10,N],[12,R[1694],E,R[1695],10,N],[3,R[351],E,R[1696],N,N],[12,R[1697],E,R[1698],11,N],[12,"unique_id",E,R[1699],11,N],[12,"first_lba",E,R[1700],11,N],[12,"last_lba",E,R[1701],11,N],[12,"attribute",E,R[1702],11,N],[12,R[1703],E,R[1704],11,N],[17,"_",E,E,N,N],[17,"_",E,E,N,N],[11,R[1705],E,R[1706],9,[[["u16"],["u32"]],["self"]]],[11,"to_uuid",E,R[1707],9,[[],["uuid"]]],[11,"from_uuid",E,R[1708],9,[[["uuid"]],["self"]]],[11,R[1709],E,R[1710],9,[[],["self"]]],[11,R[1711],E,R[1712],9,[[["self"]]]],[11,R[1713],E,R[1714],11,[[["self"],["uuid"]]]],[11,"get_partition_type",E,"Get the partition type GUID.",11,[[["self"]],["uuid"]]],[11,R[1715],E,R[1716],11,[[["self"],["uuid"]]]],[11,"get_unique_id",E,"Get the unique partition GUID.",11,[[["self"]],["uuid"]]],[11,"set_name",E,R[1717],11,[[["self"],["str"]]]],[11,R[344],E,R[1718],11,[[],["self"]]],[11,"read",E,R[1719],11,[[["self"]]]],[11,"write",E,R[345],11,[[["self"]]]],[18,"MAGIC",E,R[1720],10,N],[11,R[1721],E,R[1722],10,[[["u64"],["istorage"]],[R[1668]]]],[11,R[344],E,R[1723],10,[[],["self"]]],[11,"read",E,R[1724],10,[[["self"]]]],[11,"write",E,R[345],10,[[["self"],["bool"]]]],[11,R[1725],E,R[1726],10,[[["self"]]]],[11,"is_valid",E,"Check if the GPT Header looks valid.",10,[[["self"]],["bool"]]],[11,R[1727],E,R[1728],10,[[["self"],["uuid"]]]],[11,"get_disk_guid",E,"Get the disk GUID.",10,[[["self"]],["uuid"]]],[0,"utils",R[1673],"Utils of the detail module.",N,N],[5,R[1729],"sunrise_fs::detail::utils",R[1730],N,[[],["u32"]]],[5,"lba_to_cls",E,R[1731],N,[[["u64"]]]],[17,"MBR_LEN",R[1673],"Size of an MBR header.",N,N],[17,"MBR_LEN_U64",E,"Size of an MBR header in u64.",N,N],[17,"BLOCK_SIZE",E,R[1732],N,N],[17,R[1733],E,"Size of a block in u64.",N,N],[11,"new",E,R[1734],0,[[["istorage"]],["self"]]],[11,"is_valid",E,"Check if the partition table is valid.",0,[[["self"]],["bool"]]],[11,R[1735],E,R[1736],0,[[["self"]],[R[1668]]]],[11,R[231],E,R[1737],0,[[["self"]],[R[1668]]]],[11,"new",E,R[1738],1,[[["istorage"],["bool"]],[R[1668]]]],[11,R[1421],E,R[1422],12,[[["self"],["diskid"],[R[1420]]],[["arc",["mutex"]],[R[1668],["arc"]]]]],[11,R[1423],E,R[1424],12,[[["self"],["diskid"]],[[R[1668],["arc"]],["arc",["mutex"]]]]],[11,R[1425],E,R[1426],12,[[["self"],[R[1420]],[R[1384]],["diskid"]],[R[1668]]]],[11,R[1427],E,R[1428],12,[[["self"],["diskid"]],[R[1668]]]],[0,R[333],R[1743],"Interface module This module contains trait that are used…",N,N],[0,"driver",R[1739],"Driver interfaces Allows to detect and select filesystem…",N,N],[8,R[1771],"sunrise_fs::interface::driver","Driver instance.",N,N],[10,"construct",E,"Construct a new filesystem instance if the driver…",13,[[["self"],["box",[R[346]]],[R[346]]],[[R[1668],["box"]],["box",[R[1756]]]]]],[10,"probe",E,"Proble the detected filesystem on the given partition.",13,[[["self"],[R[346]]],[[R[5],[R[1384]]],[R[1384]]]]],[10,R[1757],E,"Check if this driver support the given filesystem type.",13,[[["self"],[R[1384]]],["bool"]]],[10,"format",E,"Format a given storage to hold a filesystem supported by…",13,[[["self"],[R[346]],[R[1384]],["box",[R[346]]]],[R[1668]]]],[0,R[1761],R[1739],"Interface to manipulate filesystem",N,N],[3,R[1772],R[1753],"Flags indicating the way a file should be open.",N,N],[12,"bits",E,E,14,N],[3,R[1773],E,"Flags indicating the filters when walking a directory.",N,N],[12,"bits",E,E,15,N],[5,"convert_path",E,"Import a UTF8 raw path to a slice of str",N,[[],[[R[1668],["str"]],["str"]]]],[17,"PATH_LEN",E,"Represent the max path size (in bytes) supported.",N,N],[8,R[1774],E,"Represent the operation on a file.",N,N],[10,"read",E,R[1758],16,[[["self"],["u64"]],[[R[1668],["u64"]],["u64"]]]],[10,"write",E,"Write the content given `buf` at the given `offset` in the…",16,[[["self"],["u64"]],[R[1668]]]],[10,"flush",E,R[1435],16,[[["self"]],[R[1668]]]],[10,"set_len",E,R[1436],16,[[["self"],["u64"]],[R[1668]]]],[10,"get_len",E,R[1437],16,[[["self"]],[[R[1668],["u64"]],["u64"]]]],[8,R[1775],E,"Represent the operation on a directory.",N,N],[10,"read",E,R[1430],17,[[["self"]],[[R[1668],["u64"]],["u64"]]]],[10,R[1740],E,R[1432],17,[[["self"]],[[R[1668],["u64"]],["u64"]]]],[8,R[1776],E,"Represent the operation on a filesystem.",N,N],[10,R[1385],E,R[1386],18,[[["self"],["str"],["u64"]],[R[1668]]]],[10,R[1389],E,R[1390],18,[[["self"],["str"]],[R[1668]]]],[10,R[1393],E,R[1394],18,[[["self"],["str"]],[R[1668]]]],[10,R[1395],E,R[1396],18,[[["self"],["str"]],[R[1668]]]],[10,R[1387],E,R[1388],18,[[["self"],["str"]],[R[1668]]]],[10,R[1391],E,R[1392],18,[[["self"],["str"]],[R[1668]]]],[10,R[1397],E,R[1398],18,[[["self"],["str"]],[[R[1381]],[R[1668],[R[1381]]]]]],[10,R[1626],E,R[1399],18,[[["self"],["str"],[R[1741]]],[[R[1668],["box"]],["box",[R[1746]]]]]],[10,R[1401],E,R[1402],18,[[["self"],[R[1742]],["str"]],[["box",[R[1748]]],[R[1668],["box"]]]]],[10,R[1403],E,R[1404],18,[[["self"],["str"]],[[R[1668],["u64"]],["u64"]]]],[10,R[1405],E,R[1406],18,[[["self"],["str"]],[[R[1668],["u64"]],["u64"]]]],[10,R[1407],E,R[1408],18,[[["self"],["str"]],[[R[1668],[R[1383]]],[R[1383]]]]],[10,R[1409],E,"Get the type of the filesystem",18,[[["self"]],[R[1384]]]],[18,R[975],E,E,14,N],[18,R[99],E,E,14,N],[18,"APPENDABLE",E,E,14,N],[11,"empty",E,R[106],14,[[],[R[1741]]]],[11,"all",E,R[107],14,[[],[R[1741]]]],[11,"bits",E,R[108],14,[[["self"]],["u32"]]],[11,R[109],E,R[110],14,[[["u32"]],[[R[5],[R[1741]]],[R[1741]]]]],[11,R[111],E,R[112],14,[[["u32"]],[R[1741]]]],[11,R[147],E,R[113],14,[[["self"]],["bool"]]],[11,"is_all",E,R[114],14,[[["self"]],["bool"]]],[11,R[115],E,R[116],14,[[["self"],[R[1741]]],["bool"]]],[11,R[148],E,R[117],14,[[["self"],[R[1741]]],["bool"]]],[11,"insert",E,R[118],14,[[["self"],[R[1741]]]]],[11,"remove",E,R[119],14,[[["self"],[R[1741]]]]],[11,"toggle",E,R[120],14,[[["self"],[R[1741]]]]],[11,"set",E,R[121],14,[[["self"],["bool"],[R[1741]]]]],[18,"DIRECTORY",E,"Accept directories.",15,N],[18,"FILE",E,"Accept files.",15,N],[18,"ALL",E,"Do not filter anything.",15,N],[11,"empty",E,R[106],15,[[],[R[1742]]]],[11,"all",E,R[107],15,[[],[R[1742]]]],[11,"bits",E,R[108],15,[[["self"]],["u32"]]],[11,R[109],E,R[110],15,[[["u32"]],[[R[5],[R[1742]]],[R[1742]]]]],[11,R[111],E,R[112],15,[[["u32"]],[R[1742]]]],[11,R[147],E,R[113],15,[[["self"]],["bool"]]],[11,"is_all",E,R[114],15,[[["self"]],["bool"]]],[11,R[115],E,R[116],15,[[["self"],[R[1742]]],["bool"]]],[11,R[148],E,R[117],15,[[["self"],[R[1742]]],["bool"]]],[11,"insert",E,R[118],15,[[["self"],[R[1742]]]]],[11,"remove",E,R[119],15,[[["self"],[R[1742]]]]],[11,"toggle",E,R[120],15,[[["self"],[R[1742]]]]],[11,"set",E,R[121],15,[[["self"],[R[1742]],["bool"]]]],[0,"storage",R[1739],"Storage related interfaces Those interface allows to…",N,N],[3,R[1777],R[1754],"Wrapper over a IStorage that permit to access only a…",N,N],[12,"inner",E,"The backing IStorage implementation",19,N],[12,"partition_start",E,"The start of the partition.",19,N],[12,"partition_len",E,"The size of the partition.",19,N],[3,R[1778],E,"Wrapper around a [FileOperations] exposing a StorageDevice…",N,N],[12,"0",E,E,20,N],[8,"IStorage",E,R[1411],N,N],[10,R[1780],E,R[1759],21,[[["self"],["u64"]],[R[1668]]]],[11,"new",E,"Create a new PartitionStorage",19,[[["mutex",["box"]],["arc",["mutex"]],["u64"]],["self"]]],[11,"new",E,"Creates a new StorageDevice from the given FileOperations.",20,[[["f"]],["filestorage"]]],[0,"ipc",R[1743],"IPC module This contains all IPC interfaces definition of…",N,N],[3,"Storage",R[1755],"This is the ipc interface for a raw device, usually a…",N,N],[12,"inner",E,R[1744],22,N],[3,R[1779],E,R[1417],N,N],[12,"inner",E,R[1744],23,N],[3,"File",E,R[1745],N,N],[12,"inner",E,R[1744],24,N],[3,"Directory",E,R[1745],N,N],[12,"inner",E,R[1744],25,N],[3,R[1782],E,"Represent a filesystem in the IPC.",N,N],[12,"inner",E,R[1744],26,N],[11,"new",E,"Create a new instance of IStorage using a boxed detail.",22,[[["mutex",["box"]],["arc",["mutex"]]],["self"]]],[11,"new",E,R[1747],24,[[[R[1746]],["box",[R[1746]]]],["self"]]],[11,"new",E,R[1747],25,[[[R[1748]],["box",[R[1748]]]],["self"]]],[11,"new",E,"Create a new FileSystem instance from it's detail.",26,[[["arc",["mutex"]],["mutex",["box"]]],["self"]]],[6,"LibUserResult",R[1743],"A libuser result.",N,N],[7,"HEADER",E,E,N,N],[7,R[1630],E,E,N,N],[11,R[20],R[1673],E,0,[[[U]],[R[23]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[21],E,E,0,[[],[R[23]]]],[11,R[25],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],[T]]],[11,R[24],E,E,0,[[["self"]],[R[26]]]],[11,"size",E,E,0,[[["self"]],[R[4]]]],[11,"is_cool",E,E,0,[[[R[4]]],["bool"]]],[11,R[1272],E,E,0,[[[R[4]]],[T]]],[11,R[1273],E,E,0,[[[R[4]]],[T]]],[11,R[20],E,E,1,[[[U]],[R[23]]]],[11,R[744],E,E,1,[[],["i"]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[21],E,E,1,[[],[R[23]]]],[11,R[25],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"]],[T]]],[11,R[24],E,E,1,[[["self"]],[R[26]]]],[11,"size",E,E,1,[[["self"]],[R[4]]]],[11,"is_cool",E,E,1,[[[R[4]]],["bool"]]],[11,R[1272],E,E,1,[[[R[4]]],[T]]],[11,R[1273],E,E,1,[[[R[4]]],[T]]],[11,R[20],E,E,12,[[[U]],[R[23]]]],[11,"into",E,E,12,[[],[U]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[21],E,E,12,[[],[R[23]]]],[11,R[25],E,E,12,[[["self"]],[T]]],[11,R[22],E,E,12,[[["self"]],[T]]],[11,R[24],E,E,12,[[["self"]],[R[26]]]],[11,R[189],E,E,12,[[["self"]],[T]]],[11,R[187],E,E,12,[[["self"],[T]]]],[11,"size",E,E,12,[[["self"]],[R[4]]]],[11,"is_cool",E,E,12,[[[R[4]]],["bool"]]],[11,R[1272],E,E,12,[[[R[4]]],[T]]],[11,R[1273],E,E,12,[[[R[4]]],[T]]],[11,R[20],R[1669],E,2,[[[U]],[R[23]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[21],E,E,2,[[],[R[23]]]],[11,R[25],E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"]],[T]]],[11,R[24],E,E,2,[[["self"]],[R[26]]]],[11,"size",E,E,2,[[["self"]],[R[4]]]],[11,"is_cool",E,E,2,[[[R[4]]],["bool"]]],[11,R[1272],E,E,2,[[[R[4]]],[T]]],[11,R[1273],E,E,2,[[[R[4]]],[T]]],[11,R[20],E,E,3,[[[U]],[R[23]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[21],E,E,3,[[],[R[23]]]],[11,R[25],E,E,3,[[["self"]],[T]]],[11,R[22],E,E,3,[[["self"]],[T]]],[11,R[24],E,E,3,[[["self"]],[R[26]]]],[11,"size",E,E,3,[[["self"]],[R[4]]]],[11,"is_cool",E,E,3,[[[R[4]]],["bool"]]],[11,R[1272],E,E,3,[[[R[4]]],[T]]],[11,R[1273],E,E,3,[[[R[4]]],[T]]],[11,R[20],E,E,4,[[[U]],[R[23]]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[21],E,E,4,[[],[R[23]]]],[11,R[25],E,E,4,[[["self"]],[T]]],[11,R[22],E,E,4,[[["self"]],[T]]],[11,R[24],E,E,4,[[["self"]],[R[26]]]],[11,"size",E,E,4,[[["self"]],[R[4]]]],[11,"is_cool",E,E,4,[[[R[4]]],["bool"]]],[11,R[1272],E,E,4,[[[R[4]]],[T]]],[11,R[1273],E,E,4,[[[R[4]]],[T]]],[11,R[20],R[1666],E,27,[[[U]],[R[23]]]],[11,"into",E,E,27,[[],[U]]],[11,"from",E,E,27,[[[T]],[T]]],[11,R[21],E,E,27,[[],[R[23]]]],[11,R[25],E,E,27,[[["self"]],[T]]],[11,R[22],E,E,27,[[["self"]],[T]]],[11,R[24],E,E,27,[[["self"]],[R[26]]]],[11,"size",E,E,27,[[["self"]],[R[4]]]],[11,"is_cool",E,E,27,[[[R[4]]],["bool"]]],[11,R[1272],E,E,27,[[[R[4]]],[T]]],[11,R[1273],E,E,27,[[[R[4]]],[T]]],[11,R[20],R[1749],E,6,[[[U]],[R[23]]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[21],E,E,6,[[],[R[23]]]],[11,R[25],E,E,6,[[["self"]],[T]]],[11,R[22],E,E,6,[[["self"]],[T]]],[11,R[24],E,E,6,[[["self"]],[R[26]]]],[11,"size",E,E,6,[[["self"]],[R[4]]]],[11,"is_cool",E,E,6,[[[R[4]]],["bool"]]],[11,R[1272],E,E,6,[[[R[4]]],[T]]],[11,R[1273],E,E,6,[[[R[4]]],[T]]],[11,R[20],E,E,5,[[[U]],[R[23]]]],[11,"into",E,E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[21],E,E,5,[[],[R[23]]]],[11,R[25],E,E,5,[[["self"]],[T]]],[11,R[22],E,E,5,[[["self"]],[T]]],[11,R[24],E,E,5,[[["self"]],[R[26]]]],[11,"size",E,E,5,[[["self"]],[R[4]]]],[11,"is_cool",E,E,5,[[[R[4]]],["bool"]]],[11,R[1272],E,E,5,[[[R[4]]],[T]]],[11,R[1273],E,E,5,[[[R[4]]],[T]]],[11,R[20],R[1750],E,7,[[[U]],[R[23]]]],[11,"into",E,E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[21],E,E,7,[[],[R[23]]]],[11,R[25],E,E,7,[[["self"]],[T]]],[11,R[22],E,E,7,[[["self"]],[T]]],[11,R[24],E,E,7,[[["self"]],[R[26]]]],[11,"size",E,E,7,[[["self"]],[R[4]]]],[11,"is_cool",E,E,7,[[[R[4]]],["bool"]]],[11,R[1272],E,E,7,[[[R[4]]],[T]]],[11,R[1273],E,E,7,[[[R[4]]],[T]]],[11,R[20],R[1751],E,8,[[[U]],[R[23]]]],[11,"into",E,E,8,[[],[U]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[21],E,E,8,[[],[R[23]]]],[11,R[25],E,E,8,[[["self"]],[T]]],[11,R[22],E,E,8,[[["self"]],[T]]],[11,R[24],E,E,8,[[["self"]],[R[26]]]],[11,"size",E,E,8,[[["self"]],[R[4]]]],[11,"is_cool",E,E,8,[[[R[4]]],["bool"]]],[11,R[1272],E,E,8,[[[R[4]]],[T]]],[11,R[1273],E,E,8,[[[R[4]]],[T]]],[11,R[20],R[1752],E,9,[[[U]],[R[23]]]],[11,"into",E,E,9,[[],[U]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[21],E,E,9,[[],[R[23]]]],[11,R[25],E,E,9,[[["self"]],[T]]],[11,R[22],E,E,9,[[["self"]],[T]]],[11,R[24],E,E,9,[[["self"]],[R[26]]]],[11,R[189],E,E,9,[[["self"]],[T]]],[11,R[187],E,E,9,[[["self"],[T]]]],[11,"size",E,E,9,[[["self"]],[R[4]]]],[11,"is_cool",E,E,9,[[[R[4]]],["bool"]]],[11,R[1272],E,E,9,[[[R[4]]],[T]]],[11,R[1273],E,E,9,[[[R[4]]],[T]]],[11,R[20],E,E,10,[[[U]],[R[23]]]],[11,"into",E,E,10,[[],[U]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[21],E,E,10,[[],[R[23]]]],[11,R[25],E,E,10,[[["self"]],[T]]],[11,R[22],E,E,10,[[["self"]],[T]]],[11,R[24],E,E,10,[[["self"]],[R[26]]]],[11,R[189],E,E,10,[[["self"]],[T]]],[11,R[187],E,E,10,[[["self"],[T]]]],[11,"size",E,E,10,[[["self"]],[R[4]]]],[11,"is_cool",E,E,10,[[[R[4]]],["bool"]]],[11,R[1272],E,E,10,[[[R[4]]],[T]]],[11,R[1273],E,E,10,[[[R[4]]],[T]]],[11,R[20],E,E,11,[[[U]],[R[23]]]],[11,"into",E,E,11,[[],[U]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[21],E,E,11,[[],[R[23]]]],[11,R[25],E,E,11,[[["self"]],[T]]],[11,R[22],E,E,11,[[["self"]],[T]]],[11,R[24],E,E,11,[[["self"]],[R[26]]]],[11,R[189],E,E,11,[[["self"]],[T]]],[11,R[187],E,E,11,[[["self"],[T]]]],[11,"size",E,E,11,[[["self"]],[R[4]]]],[11,"is_cool",E,E,11,[[[R[4]]],["bool"]]],[11,R[1272],E,E,11,[[[R[4]]],[T]]],[11,R[1273],E,E,11,[[[R[4]]],[T]]],[11,R[20],R[1753],E,14,[[[U]],[R[23]]]],[11,"into",E,E,14,[[],[U]]],[11,"from",E,E,14,[[[T]],[T]]],[11,R[21],E,E,14,[[],[R[23]]]],[11,R[25],E,E,14,[[["self"]],[T]]],[11,R[22],E,E,14,[[["self"]],[T]]],[11,R[24],E,E,14,[[["self"]],[R[26]]]],[11,R[189],E,E,14,[[["self"]],[T]]],[11,R[187],E,E,14,[[["self"],[T]]]],[11,"size",E,E,14,[[["self"]],[R[4]]]],[11,"is_cool",E,E,14,[[[R[4]]],["bool"]]],[11,R[1272],E,E,14,[[[R[4]]],[T]]],[11,R[1273],E,E,14,[[[R[4]]],[T]]],[11,R[20],E,E,15,[[[U]],[R[23]]]],[11,"into",E,E,15,[[],[U]]],[11,"from",E,E,15,[[[T]],[T]]],[11,R[21],E,E,15,[[],[R[23]]]],[11,R[25],E,E,15,[[["self"]],[T]]],[11,R[22],E,E,15,[[["self"]],[T]]],[11,R[24],E,E,15,[[["self"]],[R[26]]]],[11,R[189],E,E,15,[[["self"]],[T]]],[11,R[187],E,E,15,[[["self"],[T]]]],[11,"size",E,E,15,[[["self"]],[R[4]]]],[11,"is_cool",E,E,15,[[[R[4]]],["bool"]]],[11,R[1272],E,E,15,[[[R[4]]],[T]]],[11,R[1273],E,E,15,[[[R[4]]],[T]]],[11,R[20],R[1754],E,19,[[[U]],[R[23]]]],[11,"into",E,E,19,[[],[U]]],[11,"from",E,E,19,[[[T]],[T]]],[11,R[21],E,E,19,[[],[R[23]]]],[11,R[25],E,E,19,[[["self"]],[T]]],[11,R[22],E,E,19,[[["self"]],[T]]],[11,R[24],E,E,19,[[["self"]],[R[26]]]],[11,"size",E,E,19,[[["self"]],[R[4]]]],[11,"is_cool",E,E,19,[[[R[4]]],["bool"]]],[11,R[1272],E,E,19,[[[R[4]]],[T]]],[11,R[1273],E,E,19,[[[R[4]]],[T]]],[11,R[20],E,E,20,[[[U]],[R[23]]]],[11,"into",E,E,20,[[],[U]]],[11,"from",E,E,20,[[[T]],[T]]],[11,R[21],E,E,20,[[],[R[23]]]],[11,R[25],E,E,20,[[["self"]],[T]]],[11,R[22],E,E,20,[[["self"]],[T]]],[11,R[24],E,E,20,[[["self"]],[R[26]]]],[11,"size",E,E,20,[[["self"]],[R[4]]]],[11,"is_cool",E,E,20,[[[R[4]]],["bool"]]],[11,R[1272],E,E,20,[[[R[4]]],[T]]],[11,R[1273],E,E,20,[[[R[4]]],[T]]],[11,R[20],R[1755],E,22,[[[U]],[R[23]]]],[11,"into",E,E,22,[[],[U]]],[11,"from",E,E,22,[[[T]],[T]]],[11,R[21],E,E,22,[[],[R[23]]]],[11,R[25],E,E,22,[[["self"]],[T]]],[11,R[22],E,E,22,[[["self"]],[T]]],[11,R[24],E,E,22,[[["self"]],[R[26]]]],[11,R[189],E,E,22,[[["self"]],[T]]],[11,R[187],E,E,22,[[["self"],[T]]]],[11,"size",E,E,22,[[["self"]],[R[4]]]],[11,"is_cool",E,E,22,[[[R[4]]],["bool"]]],[11,R[1272],E,E,22,[[[R[4]]],[T]]],[11,R[1273],E,E,22,[[[R[4]]],[T]]],[11,R[20],E,E,23,[[[U]],[R[23]]]],[11,"into",E,E,23,[[],[U]]],[11,"from",E,E,23,[[[T]],[T]]],[11,R[21],E,E,23,[[],[R[23]]]],[11,R[25],E,E,23,[[["self"]],[T]]],[11,R[22],E,E,23,[[["self"]],[T]]],[11,R[24],E,E,23,[[["self"]],[R[26]]]],[11,R[189],E,E,23,[[["self"]],[T]]],[11,R[187],E,E,23,[[["self"],[T]]]],[11,"size",E,E,23,[[["self"]],[R[4]]]],[11,"is_cool",E,E,23,[[[R[4]]],["bool"]]],[11,R[1272],E,E,23,[[[R[4]]],[T]]],[11,R[1273],E,E,23,[[[R[4]]],[T]]],[11,R[20],E,E,24,[[[U]],[R[23]]]],[11,"into",E,E,24,[[],[U]]],[11,"from",E,E,24,[[[T]],[T]]],[11,R[21],E,E,24,[[],[R[23]]]],[11,R[25],E,E,24,[[["self"]],[T]]],[11,R[22],E,E,24,[[["self"]],[T]]],[11,R[24],E,E,24,[[["self"]],[R[26]]]],[11,R[189],E,E,24,[[["self"]],[T]]],[11,R[187],E,E,24,[[["self"],[T]]]],[11,"size",E,E,24,[[["self"]],[R[4]]]],[11,"is_cool",E,E,24,[[[R[4]]],["bool"]]],[11,R[1272],E,E,24,[[[R[4]]],[T]]],[11,R[1273],E,E,24,[[[R[4]]],[T]]],[11,R[20],E,E,25,[[[U]],[R[23]]]],[11,"into",E,E,25,[[],[U]]],[11,"from",E,E,25,[[[T]],[T]]],[11,R[21],E,E,25,[[],[R[23]]]],[11,R[25],E,E,25,[[["self"]],[T]]],[11,R[22],E,E,25,[[["self"]],[T]]],[11,R[24],E,E,25,[[["self"]],[R[26]]]],[11,R[189],E,E,25,[[["self"]],[T]]],[11,R[187],E,E,25,[[["self"],[T]]]],[11,"size",E,E,25,[[["self"]],[R[4]]]],[11,"is_cool",E,E,25,[[[R[4]]],["bool"]]],[11,R[1272],E,E,25,[[[R[4]]],[T]]],[11,R[1273],E,E,25,[[[R[4]]],[T]]],[11,R[20],E,E,26,[[[U]],[R[23]]]],[11,"into",E,E,26,[[],[U]]],[11,"from",E,E,26,[[[T]],[T]]],[11,R[21],E,E,26,[[],[R[23]]]],[11,R[25],E,E,26,[[["self"]],[T]]],[11,R[22],E,E,26,[[["self"]],[T]]],[11,R[24],E,E,26,[[["self"]],[R[26]]]],[11,R[189],E,E,26,[[["self"]],[T]]],[11,R[187],E,E,26,[[["self"],[T]]]],[11,"size",E,E,26,[[["self"]],[R[4]]]],[11,"is_cool",E,E,26,[[[R[4]]],["bool"]]],[11,R[1272],E,E,26,[[[R[4]]],[T]]],[11,R[1273],E,E,26,[[[R[4]]],[T]]],[11,"construct",R[1666],E,27,[[["self"],["box",[R[346]]],[R[346]]],[[R[1668],["box"]],["box",[R[1756]]]]]],[11,"probe",E,E,27,[[["self"],[R[346]]],[[R[5],[R[1384]]],[R[1384]]]]],[11,R[1757],E,E,27,[[["self"],[R[1384]]],["bool"]]],[11,"format",E,E,27,[[["self"],[R[346]],[R[1384]],["box",[R[346]]]],[R[1668]]]],[11,"read",R[1750],R[1758],7,[[["self"],["u64"]],[[R[1668],["u64"]],["u64"]]]],[11,"write",E,E,7,[[["self"],["u64"]],[R[1668]]]],[11,"flush",E,E,7,[[["self"]],[R[1668]]]],[11,"set_len",E,E,7,[[["self"],["u64"]],[R[1668]]]],[11,"get_len",E,E,7,[[["self"]],[[R[1668],["u64"]],["u64"]]]],[11,"read",R[1749],E,5,[[["self"]],[[R[1668],["u64"]],["u64"]]]],[11,R[1740],E,E,5,[[["self"]],[[R[1668],["u64"]],["u64"]]]],[11,R[1385],R[1751],E,8,[[["self"],["str"],["u64"]],[R[1668]]]],[11,R[1389],E,E,8,[[["self"],["str"]],[R[1668]]]],[11,R[1393],E,E,8,[[["self"],["str"]],[R[1668]]]],[11,R[1395],E,E,8,[[["self"],["str"]],[R[1668]]]],[11,R[1387],E,E,8,[[["self"],["str"]],[R[1668]]]],[11,R[1391],E,E,8,[[["self"],["str"]],[R[1668]]]],[11,R[1397],E,E,8,[[["self"],["str"]],[[R[1381]],[R[1668],[R[1381]]]]]],[11,R[1626],E,E,8,[[["self"],["str"],[R[1741]]],[[R[1668],["box"]],["box",[R[1746]]]]]],[11,R[1401],E,E,8,[[["self"],[R[1742]],["str"]],[["box",[R[1748]]],[R[1668],["box"]]]]],[11,R[1403],E,E,8,[[["self"],["str"]],[[R[1668],["u64"]],["u64"]]]],[11,R[1405],E,E,8,[[["self"],["str"]],[[R[1668],["u64"]],["u64"]]]],[11,R[1407],E,E,8,[[["self"],["str"]],[[R[1668],[R[1383]]],[R[1383]]]]],[11,R[1409],E,E,8,[[["self"]],[R[1384]]]],[11,R[1780],R[1754],E,19,[[["self"],["u64"]],[R[1668]]]],[11,R[1780],E,R[1759],20,[[["self"],["u64"]],[R[1668]]]],[11,R[975],R[1753],E,14,[[["self"]],["bool"]]],[11,R[99],E,E,14,[[["self"]],["bool"]]],[11,"APPENDABLE",E,E,14,[[["self"]],["bool"]]],[11,"DIRECTORY",E,E,15,[[["self"]],["bool"]]],[11,"FILE",E,E,15,[[["self"]],["bool"]]],[11,"ALL",E,E,15,[[["self"]],["bool"]]],[11,"deref",R[1669],E,3,[[["self"]],["mutex"]]],[11,"fmt",R[1749],E,5,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1750],E,7,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1751],E,8,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1669],E,4,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1752],E,9,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,10,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,11,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1673],E,1,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,12,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1753],E,14,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,15,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1754],E,19,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,20,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1755],E,22,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,23,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,24,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,25,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,26,[[["self"],[R[28]]],[R[23]]]],[11,"sub",R[1753],R[210],14,[[[R[1741]]],[R[1741]]]],[11,"sub",E,R[210],15,[[[R[1742]]],[R[1742]]]],[11,"eq",R[1752],E,9,[[["self"],["rawuuid"]],["bool"]]],[11,"ne",E,E,9,[[["self"],["rawuuid"]],["bool"]]],[11,"eq",E,E,10,[[["self"],[R[349]]],["bool"]]],[11,"ne",E,E,10,[[["self"],[R[349]]],["bool"]]],[11,"eq",R[1753],E,14,[[["self"],[R[1741]]],["bool"]]],[11,"ne",E,E,14,[[["self"],[R[1741]]],["bool"]]],[11,"eq",E,E,15,[[["self"],[R[1742]]],["bool"]]],[11,"ne",E,E,15,[[["self"],[R[1742]]],["bool"]]],[11,R[211],R[1752],E,9,[[["self"]]]],[11,R[211],E,E,10,[[["self"]]]],[11,R[211],R[1753],E,14,[[["self"]]]],[11,R[211],E,E,15,[[["self"]]]],[11,"cmp",E,E,14,[[["self"],[R[1741]]],[R[47]]]],[11,"cmp",E,E,15,[[["self"],[R[1742]]],[R[47]]]],[11,R[212],E,E,14,[[["self"],[R[1741]]],[[R[5],[R[47]]],[R[47]]]]],[11,"lt",E,E,14,[[["self"],[R[1741]]],["bool"]]],[11,"le",E,E,14,[[["self"],[R[1741]]],["bool"]]],[11,"gt",E,E,14,[[["self"],[R[1741]]],["bool"]]],[11,"ge",E,E,14,[[["self"],[R[1741]]],["bool"]]],[11,R[212],E,E,15,[[["self"],[R[1742]]],[[R[5],[R[47]]],[R[47]]]]],[11,"lt",E,E,15,[[["self"],[R[1742]]],["bool"]]],[11,"le",E,E,15,[[["self"],[R[1742]]],["bool"]]],[11,"gt",E,E,15,[[["self"],[R[1742]]],["bool"]]],[11,"ge",E,E,15,[[["self"],[R[1742]]],["bool"]]],[11,R[215],E,R[216],14,[[["self"],[R[1741]]]]],[11,R[215],E,R[216],15,[[["self"],[R[1742]]]]],[11,"not",E,R[217],14,[[],[R[1741]]]],[11,"not",E,R[217],15,[[],[R[1742]]]],[11,R[3],E,R[218],14,[[[R[1741]]],[R[1741]]]],[11,R[3],E,R[218],15,[[[R[1742]]],[R[1742]]]],[11,"bitor",E,R[219],14,[[[R[1741]]],[R[1741]]]],[11,"bitor",E,R[219],15,[[[R[1742]]],[R[1742]]]],[11,"bitxor",E,R[220],14,[[[R[1741]]],[R[1741]]]],[11,"bitxor",E,R[220],15,[[[R[1742]]],[R[1742]]]],[11,R[221],E,R[222],14,[[["self"],[R[1741]]]]],[11,R[221],E,R[222],15,[[["self"],[R[1742]]]]],[11,R[223],E,R[224],14,[[["self"],[R[1741]]]]],[11,R[223],E,R[224],15,[[["self"],[R[1742]]]]],[11,R[225],E,R[226],14,[[["self"],[R[1741]]]]],[11,R[225],E,R[226],15,[[["self"],[R[1742]]]]],[11,"hash",E,E,14,[[["self"],["__h"]]]],[11,"hash",E,E,15,[[["self"],["__h"]]]],[11,"next",R[1673],E,1,[[["self"]],[R[5]]]],[11,"extend",R[1753],E,14,[[["self"],[R[228]]]]],[11,"extend",E,E,15,[[["self"],[R[228]]]]],[11,R[229],E,E,14,[[[R[228]]],[R[1741]]]],[11,R[229],E,E,15,[[[R[228]]],[R[1742]]]],[11,"fmt",E,E,14,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,15,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,14,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,15,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,14,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,15,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,14,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,15,[[["self"],[R[28]]],[R[23]]]],[11,"clone",R[1752],E,9,[[["self"]],["rawuuid"]]],[11,"clone",E,E,10,[[["self"]],[R[349]]]],[11,"clone",E,E,11,[[["self"]],[R[1760]]]],[11,"clone",R[1673],E,12,[[["self"]],[R[1762]]]],[11,"clone",R[1753],E,14,[[["self"]],[R[1741]]]],[11,"clone",E,E,15,[[["self"]],[R[1742]]]],[11,"clone",R[1755],E,22,[[["self"]],["storage"]]],[11,"clone",E,E,23,[[["self"]],[R[1763]]]],[11,"clone",E,E,24,[[["self"]],["file"]]],[11,"clone",E,E,25,[[["self"]],["directory"]]],[11,"clone",E,E,26,[[["self"]],[R[1761]]]],[11,R[49],R[1669],E,2,[[],["self"]]],[11,R[49],R[1752],E,9,[[],["self"]]],[11,R[49],E,E,11,[[],["self"]]],[11,R[49],E,E,10,[[],["self"]]],[11,R[49],R[1673],E,12,[[],[R[1762]]]],[11,R[49],R[1755],E,23,[[],[R[1763]]]],[11,R[1385],E,E,26,[[["self"],[R[1265]],["u32"],["u64"],[R[1380]]],[[R[23],["error"]],["error"]]]],[11,R[1387],E,E,26,[[["self"],[R[1265]],[R[1380]]],[[R[23],["error"]],["error"]]]],[11,R[1389],E,E,26,[[["self"],[R[1265]],[R[1380]]],[[R[23],["error"]],["error"]]]],[11,R[1391],E,E,26,[[["self"],[R[1265]],[R[1380]]],[[R[23],["error"]],["error"]]]],[11,R[1393],E,E,26,[[["self"],[R[1265]],[R[1380]]],[[R[23],["error"]],["error"]]]],[11,R[1395],E,E,26,[[["self"],[R[1265]],[R[1380]]],[[R[23],["error"]],["error"]]]],[11,R[1626],E,E,26,[[["self"],[R[1265]],["u32"],[R[1380]]],[[R[23],[R[1400],"error"]],["error"],[R[1400]]]]],[11,R[1401],E,E,26,[[["self"],[R[1265]],["u32"],[R[1380]]],[[R[1382]],[R[23],[R[1382],"error"]],["error"]]]],[11,R[1403],E,E,26,[[["self"],[R[1265]],[R[1380]]],[[R[23],["u64","error"]],["error"],["u64"]]]],[11,R[1405],E,E,26,[[["self"],[R[1265]],[R[1380]]],[[R[23],["u64","error"]],["error"],["u64"]]]],[11,R[1407],E,E,26,[[["self"],[R[1265]],[R[1380]]],[[R[1383]],["error"],[R[23],[R[1383],"error"]]]]],[11,R[1397],E,E,26,[[["self"],[R[1265]],[R[1380]]],[[R[23],[R[1381],"error"]],[R[1381]],["error"]]]],[11,R[1409],E,E,26,[[["self"],[R[1265]]],[["error"],[R[23],[R[1384],"error"]],[R[1384]]]]],[11,"read",E,E,22,[[["self"],[R[1265]],["u64"]],[[R[23],["error"]],["error"]]]],[11,"write",E,E,22,[[["self"],[R[1265]],["u64"]],[[R[23],["error"]],["error"]]]],[11,"flush",E,E,22,[[["self"],[R[1265]]],[[R[23],["error"]],["error"]]]],[11,R[1780],E,E,22,[[["self"],[R[1265]],["u64"]],[[R[23],["error"]],["error"]]]],[11,R[1781],E,E,22,[[["self"],[R[1265]]],[[R[23],["u64","error"]],["error"],["u64"]]]],[11,R[1421],E,E,23,[[["self"],[R[1265]],[R[1420]],["diskid"]],[["error"],[R[23],[R[1418],"error"]],[R[1418]]]]],[11,R[1423],E,E,23,[[["self"],[R[1265]],["diskid"]],[[R[1419]],["error"],[R[23],[R[1419],"error"]]]]],[11,R[1425],E,E,23,[[["self"],[R[1265]],[R[1420]],[R[1384]],["diskid"]],[[R[23],["error"]],["error"]]]],[11,R[1427],E,E,23,[[["self"],[R[1265]],["diskid"]],[[R[23],["error"]],["error"]]]],[11,"read",E,E,25,[[["self"],[R[1265]]],[[R[23],["u64","error"]],["error"],["u64"]]]],[11,R[1431],E,E,25,[[["self"],[R[1265]]],[[R[23],["u64","error"]],["error"],["u64"]]]],[11,"read",E,E,24,[[["self"],[R[1265]],["u32"],["u64"]],[[R[23],["u64","error"]],["error"],["u64"]]]],[11,"write",E,E,24,[[["self"],[R[1265]],["u32"],["u64"]],[[R[23],["error"]],["error"]]]],[11,"flush",E,E,24,[[["self"],[R[1265]]],[[R[23],["error"]],["error"]]]],[11,R[1780],E,E,24,[[["self"],[R[1265]],["u64"]],[[R[23],["error"]],["error"]]]],[11,R[1781],E,E,24,[[["self"],[R[1265]]],[[R[23],["u64","error"]],["error"],["u64"]]]],[11,R[231],R[1669],E,3,[[["self"]]]],[11,"read",R[1754],E,19,[[["self"],["u64"]],[[R[23],["error"]],["error"]]]],[11,"write",E,E,19,[[["self"],["u64"]],[[R[23],["error"]],["error"]]]],[11,"flush",E,E,19,[[["self"]],[R[1668]]]],[11,"len",E,E,19,[[["self"]],[[R[23],["u64","error"]],["error"],["u64"]]]],[11,"read",E,"Read the data at the given `offset` in the storage into a…",20,[[["self"],["u64"]],[R[1668]]]],[11,"write",E,"Write the data from the given buffer at the given `offset`…",20,[[["self"],["u64"]],[R[1668]]]],[11,"flush",E,"Writes every dirty data to the storage.",20,[[["self"]],[R[1668]]]],[11,"len",E,E,20,[[["self"]],[[R[23],["u64","error"]],["error"],["u64"]]]],[11,"read",R[1669],"Read blocks from the block device starting at the given…",4,[[["self"],["blockindex"]],[[R[23],["error"]],["error"]]]],[11,"write",E,"Write blocks to the block device starting at the given…",4,[[["self"],["blockindex"]],[[R[23],["error"]],["error"]]]],[11,"count",E,"Return the amount of blocks hold by the block device.",4,[[["self"]],[[R[23],["blockcount","error"]],["error"],["blockcount"]]]]],"p":[[3,R[352]],[3,R[353]],[3,R[1764]],[3,R[1670]],[3,R[1765]],[3,R[1766]],[3,R[1767]],[3,R[1768]],[3,R[1769]],[3,"RawUUID"],[3,R[350]],[3,R[351]],[3,R[1770]],[8,R[1771]],[3,R[1772]],[3,R[1773]],[8,R[1774]],[8,R[1775]],[8,R[1776]],[3,R[1777]],[3,R[1778]],[8,"IStorage"],[3,"Storage"],[3,R[1779]],[3,"File"],[3,"Directory"],[3,R[1782]],[3,"FATDriver"]]};
searchIndex["sunrise_kernel"]={"doc":"Sunrise kernel","i":[[5,"force_double_fault",R[434],"Forces a double fault by stack overflowing.",N,[[]]],[5,"main",E,"The kernel's `main`.",N,[[]]],[5,"start",E,"The entry point of our kernel.",N,[[]]],[5,"common_start",E,"CRT0 starts here.",N,[[[R[4]]]]],[0,"paging",E,"Paging.",N,N],[3,R[398],R[364],R[399],N,N],[12,R[78],E,R[400],0,N],[3,R[847],E,"The flags of a mapping.",N,N],[12,"bits",E,E,1,N],[4,R[95],E,R[380],N,N],[13,R[97],E,R[381],2,N],[13,"Guarded",E,R[382],2,N],[13,R[92],E,R[383],2,N],[5,"read_cr2",E,R[396],N,[[],[R[77]]]],[5,"read_cr3",E,R[395],N,[[],[R[74]]]],[0,"process_memory",E,"The management of a process' memory",N,N],[3,R[848],R[415],"The struct representing a process' memory, stored in the…",N,N],[12,"userspace_bookkeping",E,"The list of mappings in this address space.",3,N],[12,"table_hierarchy",E,"The architecture-dependent paging hierarchy.",3,N],[12,"heap_base_address",E,"The start of the heap of this process. The heap is managed…",3,N],[4,R[411],E,R[412],N,N],[13,R[97],E,R[413],4,N],[13,"Used",E,R[414],4,N],[4,R[849],E,"Page tables selector.",N,N],[13,"Active",E,"The process's hierarchy is already the currently active one.",5,N],[13,"Inactive",E,"The process's hierarchy an inactive one.",5,N],[11,R[369],E,"If these tables are the one currently in use, we return…",3,[[["self"]],["dynamichierarchy"]]],[11,R[366],E,"Maps a single physical regions to a given virtual address.…",3,[[["self"],[R[77]],[R[367]],[R[313]],[R[360]]],[[R[23],[R[268]]],[R[268]]]]],[11,"create_regular_mapping",E,"Allocates the physical regions, and maps them to specified…",3,[[["self"],[R[77]],[R[4]],[R[313]],[R[360]]],[[R[23],[R[268]]],[R[268]]]]],[11,"map_partial_shared_mapping",E,"Maps a previously created shared mapping to specified…",3,[[["self"],[R[361],["vec"]],[R[77]],[R[4]],[R[313]],[R[360]],["arc",[R[361]]]],[[R[23],[R[268]]],[R[268]]]]],[11,"guard",E,"Guards a range of addresses",3,[[["self"],[R[77]],[R[4]],[R[313]]],[[R[23],[R[268]]],[R[268]]]]],[11,"unmap",E,"Deletes a mapping in the page tables.",3,[[["self"],[R[77]],[R[4]]],[[R[268]],[R[23],[R[378],R[268]]],[R[378]]]]],[11,R[563],E,R[368],3,[[["self"],[R[77]]],[R[418]]]],[11,"expand_mapping",E,"Expand the Heap at `address` to `new_size`.",3,[[["self"],[R[77]],[R[4]]],[[R[23],[R[268]]],[R[268]]]]],[11,R[420],E,R[421],3,[[["self"],[R[4]]],[[R[77]],[R[268]],[R[23],[R[77],R[268]]]]]],[11,R[379],E,"Retrieves the mapping that `address` falls into, and…",3,[[["self"],[R[77]],[R[4]]],[[R[268]],[R[362]],[R[23],[R[362],R[268]]]]]],[11,"resize_heap",E,"Resize the heap of this process, just like a brk. It can…",3,[[["self"],[R[4]]],[[R[77]],[R[268]],[R[23],[R[77],R[268]]]]]],[11,R[363],E,"Switches to this process memory",3,[[["self"]]]],[11,"check_range",E,"Checks that the given memory range is homogenous (that is,…",3,[[["self"],[R[77]],[R[4]],[R[285]],[R[283]],[R[284]]],[[R[268]],[R[23],[R[268]]]]]],[0,"kernel_memory",R[364],"The management of kernel memory",N,N],[3,R[850],R[724],"A struct that acts on KernelLand and RecursiveTablesLand.",N,N],[12,"tables",E,"The currently active page tables.",6,N],[5,"get_kernel_memory",E,"Locks the KERNEL_MEMORY",N,[[],[[R[365]],[R[656],[R[365]]]]]],[7,"KERNEL_MEMORY",E,"A mutex protecting the KernelMemory manager.",N,N],[11,"find_virtual_space_aligned",E,"Finds a hole in the virtual space at least 'length' long,…",6,[[["self"],[R[4]]],[[R[77]],[R[268]],[R[23],[R[77],R[268]]]]]],[11,"find_virtual_space",E,"Finds a hole in the virtual space at least 'length' long.",6,[[["self"],[R[4]]],[[R[77]],[R[268]],[R[23],[R[77],R[268]]]]]],[11,R[366],E,"Maps a single physical regions to a given virtual address.",6,[[["self"],[R[77]],[R[367]],[R[360]]]]],[11,"map_phys_region",E,"Maps a single physical region anywhere.",6,[[["self"],[R[360]],[R[367]]],[R[77]]]],[11,"map_phys_regions",E,"Maps a list of physical region anywhere.",6,[[["self"],[R[360]]],[R[77]]]],[11,"map_frame_iterator_to",E,"Maps a list of physical region yielded by an iterator.",6,[[["self"],[R[77]],[R[360]],["i"]]]],[11,"map_frame_iterator",E,"Maps a list of physical region yielded by the iterator.…",6,[[["self"],["i"],[R[360]]],[R[77]]]],[11,R[160],E,"Allocates and maps a single page, choosing a spot in VMEM…",6,[[["self"]],[R[77]]]],[11,R[157],E,"Allocates non-contiguous frames, and map them at the given…",6,[[["self"],[R[77]],[R[4]],[R[360]]]]],[11,"get_pages",E,"Allocates and maps the given length, chosing a spot in…",6,[[["self"],[R[4]]],[R[77]]]],[11,"guard",E,"Guards a range of addresses.",6,[[["self"],[R[77]],[R[4]]]]],[11,"mapping_state",E,R[368],6,[[["self"],[R[77]]],[[R[82],[R[74]]],[R[74]]]]],[11,"unmap",E,"Deletes a mapping in the page tables. This functions…",6,[[["self"],[R[77]],[R[4]]]]],[11,"unmap_no_dealloc",E,"Deletes a mapping in the page tables, but does not free…",6,[[["self"],[R[77]],[R[4]]]]],[11,"reserve_kernel_land_frames",E,"Marks all frames mapped in KernelLand as reserve This is…",6,[[["self"]]]],[11,R[369],E,"Safe access to the active page tables.",6,[[["self"]],["activehierarchy"]]],[11,"dump_kernelland_state",E,"Prints the state of the KernelLand by parsing the page…",6,[[["self"]]]],[0,"lands",R[364],"Module describing the split between the UserSpace and…",N,N],[3,R[259],R[725],R[370],N,N],[3,R[371],E,R[372],N,N],[3,R[405],E,R[406],N,N],[8,R[258],E,R[373],N,N],[18,"START",E,R[374],7,N],[18,"END",E,R[375],7,N],[11,R[178],E,R[374],7,[[],[R[77]]]],[11,R[179],E,R[375],7,[[],[R[77]]]],[11,"length",E,"The length of this land.",7,[[],[R[4]]]],[11,"contains_address",E,"Is the address contained in this Land ?",7,[[[R[77]]],["bool"]]],[11,"contains_region",E,"Is the region fully contained in this Land ?",7,[[[R[77]],[R[4]]],["bool"]]],[11,"check_contains_address",E,"Checks that a given address falls in this land, or return…",7,[[[R[77]]],[[R[23],[R[268]]],[R[268]]]]],[11,"check_contains_region",E,"Checks that a given region falls in this land, or return…",7,[[[R[77]],[R[4]]],[[R[23],[R[268]]],[R[268]]]]],[0,R[378],R[364],"Mapping",N,N],[3,"Mapping",R[726],"A memory mapping. Stores the address, the length, and the…",N,N],[12,R[444],E,"The first address of this mapping.",8,N],[12,"length",E,"The length of this mapping.",8,N],[12,"state",E,R[931],8,N],[12,"frames",E,"The frames this mapping is referencing.",8,N],[12,"offset",E,"Physical frame offset of this mapping,",8,N],[12,"flags",E,"The access rights of this mapping.",8,N],[4,R[851],E,"Frames associated with a [Mapping].",N,N],[13,"Shared",E,"The frames are Shared between multiple mappings.",9,N],[13,"Owned",E,"The frames are Owned by this mapping.",9,N],[13,"None",E,"This Mapping has no frames.",9,N],[11,"new",E,"Tries to construct a mapping.",8,[[[R[77]],[R[360]],[R[4]],[R[377]],[R[313]]],[[R[268]],[R[23],[R[378],R[268]]],[R[378]]]]],[11,R[444],E,R[376],8,[[["self"]],[R[77]]]],[11,"length",E,R[376],8,[[["self"]],[R[4]]]],[11,"frames",E,"Returns the frames in this mapping.",8,[[["self"]],[R[377]]]],[11,"frames_it",E,"Returns an iterator over the Physical Addresses mapped by…",8,[[["self"]]]],[11,"phys_offset",E,"Returns the offset in `frames` this mapping starts from.",8,[[["self"]],[R[4]]]],[11,"state",E,"Returns the [MemoryState] of this mapping.",8,[[["self"]],[R[283]]]],[11,"flags",E,"Returns the type of this mapping.",8,[[["self"]],[R[360]]]],[0,"cross_process",R[364],"Cross Process Mapping",N,N],[3,R[852],R[727],"A struct representing a UserLand mapping mirrored in…",N,N],[12,"kernel_address",E,"The KernelLand address it was remapped to. Has the desired…",10,N],[12,"len",E,"Length of the region that was requested to be remapped.…",10,N],[12,R[378],E,"The frames this mapping covers.",10,N],[11,R[379],E,"Creates an `CrossProcessMapping`.",10,[[[R[378]],[R[4]]],[[R[268]],[R[362]],[R[23],[R[362],R[268]]]]]],[11,"addr",E,"The address of the region asked to be remapped.",10,[[["self"]],[R[77]]]],[11,"len",E,"The length of the region asked to be remapped.",10,[[["self"]],[R[4]]]],[0,"hierarchical_table",R[364],"Arch-independent traits for architectures that implement…",N,N],[3,"NoFlush",R[389],"Flusher that doesn't flush.",N,N],[3,R[249],E,"This is just a wrapper for a pointer to a table. It…",N,N],[12,"0",E,E,11,N],[12,"1",E,E,11,N],[4,R[95],E,R[380],N,N],[13,R[97],E,R[381],2,N],[13,"Guarded",E,R[382],2,N],[13,R[92],E,R[383],2,N],[8,R[853],E,"A hierarchical paging is composed of entries. All entries…",N,N],[16,"EntryFlagsType",E,"An entry comports some flags. They are often represented…",12,N],[10,R[122],E,R[123],12,[[["self"]],["bool"]]],[10,R[124],E,R[125],12,[[["self"]],[[R[82],[R[74]]],[R[74]]]]],[10,R[384],E,R[126],12,[[["self"]],["bool"]]],[10,"flags",E,R[127],12,[[["self"]]]],[10,R[128],E,R[129],12,[[["self"]],[[R[82],[R[74]]],[R[74]]]]],[10,"set",E,R[130],12,[[["self"],[R[74]]]]],[10,R[131],E,R[132],12,[[["self"]]]],[8,R[255],E,"A hierarchical paging is composed of tables. All tables…",N,N],[16,"EntryType",E,"The Entry our table has",13,N],[16,"CacheFlusherType",E,"A Flusher that should be called on table modifications",13,N],[16,"ChildTableType",E,"If we're a parent table, the type of our child tables. If…",13,N],[10,R[198],E,"gets the raw array of entries",13,[[["self"]]]],[11,"zero",E,R[385],13,[[["self"]]]],[11,"guard_all_entries",E,"Makes all entries guarded",13,[[["self"]]]],[11,R[386],E,"Creates a mapping on the nth entry of a table",13,[[["self"],[R[4]],[R[74]]]]],[11,R[387],E,R[388],13,[[["self"],[R[4]]]]],[11,"unmap_nth_entry",E,R[388],13,[[["self"],[R[4]]]]],[10,R[767],E,"Called to check if this table's entries should be treated…",13,[[],[R[4]]]],[11,"entry_vm_size",E,"the size an entry in this table spans in virtual memory.…",13,[[],[R[4]]]],[10,R[768],E,"Gets a reference to a child page table.",13,[[["self"],[R[4]]],[[R[82],[R[141]]],[R[141]]]]],[10,R[769],E,"Allocates a child page table, zero it and add an entry…",13,[[["self"],[R[4]]],[R[141]]]],[11,"get_child_table_or_create",E,"Gets the child page table at given index, or creates it if…",13,[[["self"],[R[4]]],[[R[82],[R[141]]],[R[141]]]]],[8,R[854],E,"Most implementations of paging have are accelerated with a…",N,N],[10,R[773],E,"Flushes the whole cache.",14,[[]]],[8,R[855],E,"A trait operating on a whole hierarchy of tables.",N,N],[16,"TopLevelTableType",E,"The type of the top level table.",15,N],[10,R[774],E,"Gets a reference to the top level table, either through…",15,[[["self"]],[R[141]]]],[11,R[775],E,"Creates a mapping in the page tables with the given flags.",15,[[["self"],[R[77]],[R[360]],["i"]]]],[11,"guard",E,"Creates a span of guard pages",15,[[["self"],[R[77]],[R[4]]]]],[11,"unmap",E,"Unmaps a range of virtual address. On every frames mapped…",15,[[["self"],[R[77]],[R[4]],["c"]]]],[11,R[776],E,"Iters in the page tables, applying closure on every…",15,[[["self"],[R[77]],[R[4]],["c"]]]],[11,R[143],E,"Finds a virtual space hole that is at least length long,…",15,[[["self"],[R[77]],[R[4]]],[[R[5],[R[77]]],[R[77]]]]],[8,R[423],E,R[424],N,N],[10,"new",E,R[425],16,[[],["self"]]],[10,R[363],E,R[426],16,[[["self"]]]],[10,R[427],E,R[428],16,[[["self"]]]],[10,R[429],E,R[430],16,[[["self"]],["bool"]]],[10,R[431],E,R[432],16,[[],["self"]]],[11,"unwrap",R[364],R[133],2,[[],[T]]],[11,"map",E,R[134],2,[[["f"]],[R[82]]]],[11,R[135],E,R[136],2,[[["self"]],[[R[5]],[T]]]],[11,"new",R[389],"Wraps the given pointer in a `SmartHierarchicalTable`.",11,[[],[R[141]]]],[0,"arch",R[364],"Arch-specific implementations of paging",N,N],[0,"i386","sunrise_kernel::paging::arch","Paging implementation on i386",N,N],[5,R[390],R[397],R[391],N,[[],["bool"]]],[5,R[150],E,"Not used anymore, bootstrap's job",N,[[[R[74]]]]],[5,R[392],E,R[393],N,[[]]],[5,"swap_cr3",E,R[394],N,[[[R[74]]],[R[74]]]],[5,"read_cr3",E,R[395],N,[[],[R[74]]]],[5,"read_cr2",E,R[396],N,[[],[R[77]]]],[0,"entry",E,R[93],N,N],[3,R[856],R[728],R[80],N,N],[12,"bits",E,E,17,N],[3,R[857],E,R[94],N,N],[12,"0",E,E,18,N],[17,R[98],E,"The part of an entry that encodes the physical address.",N,N],[18,R[785],E,E,17,N],[18,R[99],E,E,17,N],[18,R[100],E,E,17,N],[18,R[101],E,E,17,N],[18,R[205],E,E,17,N],[18,R[206],E,E,17,N],[18,"DIRTY",E,E,17,N],[18,R[102],E,E,17,N],[18,"GLOBAL",E,E,17,N],[18,R[103],E,E,17,N],[18,R[786],E,E,17,N],[18,R[105],E,E,17,N],[11,"empty",E,R[106],17,[[],[R[138]]]],[11,"all",E,R[107],17,[[],[R[138]]]],[11,"bits",E,R[108],17,[[["self"]],["u32"]]],[11,R[109],E,R[110],17,[[["u32"]],[[R[5],[R[138]]],[R[138]]]]],[11,R[111],E,R[112],17,[[["u32"]],[R[138]]]],[11,R[147],E,R[113],17,[[["self"]],["bool"]]],[11,"is_all",E,R[114],17,[[["self"]],["bool"]]],[11,R[115],E,R[116],17,[[["self"],[R[138]]],["bool"]]],[11,R[148],E,R[117],17,[[["self"],[R[138]]],["bool"]]],[11,"insert",E,R[118],17,[[["self"],[R[138]]]]],[11,"remove",E,R[119],17,[[["self"],[R[138]]]]],[11,"toggle",E,R[120],17,[[["self"],[R[138]]]]],[11,"set",E,R[121],17,[[["self"],["bool"],[R[138]]]]],[0,"table",R[397],"i386 Page Tables hierarchy",N,N],[3,"Table",R[729],"A page table or directory in memory.",N,N],[12,R[198],E,"The array of entries making up this table.",19,N],[3,R[248],E,"A currently active page table.",N,N],[12,"0",E,E,20,N],[3,R[247],E,"A currently active page directory.",N,N],[12,"0",E,E,21,N],[3,R[929],E,"The currently active hierarchy of directory and tables.…",N,N],[3,R[251],E,"A currently inactive page table.",N,N],[12,"0",E,E,22,N],[3,R[250],E,"A currently inactive page directory.",N,N],[12,"0",E,E,23,N],[3,R[398],E,R[399],N,N],[12,R[78],E,R[400],0,N],[3,R[401],E,R[402],N,N],[11,R[403],E,R[404],21,[[["self"],[R[4]]],[[R[82],[R[4]]],[R[4]]]]],[0,"lands",R[397],"i386 Virtual Memory Layout",N,N],[3,R[259],"sunrise_kernel::paging::arch::i386::lands",R[370],N,N],[3,R[371],E,R[372],N,N],[3,R[405],E,R[406],N,N],[17,R[407],E,R[408],N,N],[17,"USERLAND_START_TABLE",E,"The index in page directory of the first table of UserLand.",N,N],[17,"USERLAND_END_TABLE",E,"The index in page directory of the last table of UserLand.",N,N],[17,"KERNELLAND_START_TABLE",E,"The index in page directory of the first table of…",N,N],[17,"KERNELLAND_END_TABLE",E,"The index in page directory of the last table of KernelLand.",N,N],[17,"_",E,E,N,N],[17,"_",E,E,N,N],[17,"_",E,E,N,N],[17,"_",E,E,N,N],[17,"_",E,E,N,N],[17,R[409],R[397],R[422],N,N],[17,R[410],E,"The number of entries a page table has. On i386 a page…",N,N],[0,"bookkeeping",R[364],"Bookkeeping of mappings in UserLand",N,N],[3,R[858],R[416],"A bookkeeping is just a list of Mappings",N,N],[12,"mappings",E,"The list of mappings of this process.",24,N],[4,R[411],E,R[412],N,N],[13,R[97],E,R[413],4,N],[13,"Used",E,R[414],4,N],[11,R[378],R[415],"Returns a reference to the underlying mapping.",4,[[["self"]],[R[378]]]],[11,"new",R[416],"Constructs a UserspaceBookkeeping",24,[[],["self"]]],[11,"mapping_at_or_following",E,R[417],24,[[["self"],[R[77]]],[[R[378]],[R[5],[R[378]]]]]],[11,"mapping_at_or_preceding",E,R[417],24,[[["self"],[R[77]]],[[R[378]],[R[5],[R[378]]]]]],[11,"mapping_at",E,R[419],24,[[["self"],[R[77]]],[R[418]]]],[11,"occupied_mapping_at",E,R[419],24,[[["self"],[R[77]]],[[R[378]],[R[23],[R[378],R[268]]],[R[268]]]]],[11,"is_vacant",E,"Checks that a given range is unoccupied.",24,[[["self"],[R[77]],[R[4]]],[[R[23],["bool",R[268]]],[R[268]],["bool"]]]],[11,"check_vacant",E,"Asserts that a given range is unoccupied",24,[[["self"],[R[77]],[R[4]]],[[R[23],[R[268]]],[R[268]]]]],[11,"add_mapping",E,"Adds a mapping to the list of tracked mappings",24,[[["self"],[R[378]]],[[R[23],[R[268]]],[R[268]]]]],[11,"remove_mapping",E,"Removes a mapping from the tracked mappings, and returns it.",24,[[["self"],[R[77]],[R[4]]],[[R[268]],[R[23],[R[378],R[268]]],[R[378]]]]],[11,"remove_mapping_split",E,"Removes part of a mapping from the tracked mappings, and…",24,[[["self"],[R[77]],[R[4]]],[[R[268]],[R[23],[R[378],R[268]]],[R[378]]]]],[11,R[420],E,R[421],24,[[["self"],[R[4]]],[[R[77]],[R[268]],[R[23],[R[77],R[268]]]]]],[17,R[409],R[364],R[422],N,N],[8,R[423],E,R[424],N,N],[10,"new",E,R[425],16,[[],["self"]]],[10,R[363],E,R[426],16,[[["self"]]]],[10,R[427],E,R[428],16,[[["self"]]]],[10,R[429],E,R[430],16,[[["self"]],["bool"]]],[10,R[431],E,R[432],16,[[],["self"]]],[18,R[975],E,"Mapping is readable.",1,N],[18,R[99],E,"Mapping is writable.",1,N],[18,R[309],E,"Mapping is executable.",1,N],[18,R[100],E,"Mapping can be accessed from userland, with the same…",1,N],[11,"empty",E,R[106],1,[[],[R[360]]]],[11,"all",E,R[107],1,[[],[R[360]]]],[11,"bits",E,R[108],1,[[["self"]],["u32"]]],[11,R[109],E,R[110],1,[[["u32"]],[[R[360]],[R[5],[R[360]]]]]],[11,R[111],E,R[112],1,[[["u32"]],[R[360]]]],[11,R[147],E,R[113],1,[[["self"]],["bool"]]],[11,"is_all",E,R[114],1,[[["self"]],["bool"]]],[11,R[115],E,R[116],1,[[["self"],[R[360]]],["bool"]]],[11,R[148],E,R[117],1,[[["self"],[R[360]]],["bool"]]],[11,"insert",E,R[118],1,[[["self"],[R[360]]]]],[11,"remove",E,R[119],1,[[["self"],[R[360]]]]],[11,"toggle",E,R[120],1,[[["self"],[R[360]]]]],[11,"set",E,R[121],1,[[["self"],[R[360]],["bool"]]]],[11,"k_r",E,"Shorthand for READABLE",1,[[],[R[360]]]],[11,"k_w",E,"Shorthand for WRITABLE",1,[[],[R[360]]]],[11,"k_rw",E,"Shorthand for READABLE | WRITABLE",1,[[],[R[360]]]],[11,"k_rx",E,"Shorthand for READABLE | EXECUTABLE",1,[[],[R[360]]]],[11,"u_r",E,"Shorthand for USER_ACCESSIBLE | READABLE",1,[[],[R[360]]]],[11,"u_w",E,R[433],1,[[],[R[360]]]],[11,"u_rw",E,R[433],1,[[],[R[360]]]],[11,"u_rx",E,R[433],1,[[],[R[360]]]],[0,"event",R[434],"The core event handling primitives of Sunrise.",N,N],[3,"Event",R[730],"The underlying shared object of a…",N,N],[12,"state",E,"The state determines whether the event is signaled or not.…",25,N],[12,R[436],E,R[437],25,N],[3,R[665],E,R[1261],N,N],[12,"parent",E,R[435],26,N],[3,R[666],E,R[1262],N,N],[12,"parent",E,R[435],27,N],[3,"IRQEvent",E,"An event waiting for an IRQ.",N,N],[12,"state",E,"The global state of the IRQ this event is listening on.…",28,N],[12,"ack",E,"Acknowledgement counter for this IRQEvent instance. Each…",28,N],[3,"IRQState",E,"Global state of an IRQ.",N,N],[12,"irqnum",E,"The irq number this state represents. Only used for debug…",29,N],[12,"counter",E,"The number of time this IRQ was triggered from kernel boot.",29,N],[12,R[436],E,R[437],29,N],[5,"wait",E,"Waits for an event to occur on one of the given Waitable…",N,[[["intoiter"]],[[R[679]],[R[438]],[R[23],[R[679],R[438]]]]]],[5,"new_pair",E,"Create a new pair of [WritableEvent]/[ReadableEvent].",N,[[]]],[5,"dispatch_event",E,"Signal the scheduler and waiters that an IRQ has been…",N,[[[R[4]]]]],[5,"wait_event",E,"Creates an IRQEvent waiting for the given IRQ number.",N,[[["u8"]],["irqevent"]]],[7,"IRQ_STATES",E,"Global state for all the IRQ handled by the IOAPIC.",N,N],[8,"Waitable",E,"A waitable item.",N,N],[10,R[777],E,"Checks whether the Waitable was signalled.",30,[[["self"]],["bool"]]],[10,R[778],E,"Register the waitable with the scheduler.",30,[[["self"]]]],[11,R[439],E,R[440],26,[[["self"]],[[R[23],[R[268]]],[R[268]]]]],[11,"signal",E,R[1263],27,[[["self"]]]],[11,R[439],E,R[440],27,[[["self"]],[[R[23],[R[268]]],[R[268]]]]],[11,"new",E,"Create a new IRQState for the given IRQ number, with the…",29,[[[R[4]]],["irqstate"]]],[0,"error",R[434],"UserspaceError and KernelError",N,N],[3,R[859],R[441],R[933],N,N],[12,"0",E,E,31,N],[4,R[320],E,"Kernel Error.",N,N],[13,R[834],E,E,32,N],[12,"msg",R[443],E,32,N],[12,R[442],E,E,32,N],[13,"PhysicalMemoryExhaustion",R[441],E,32,N],[12,R[442],R[443],E,32,N],[13,"VirtualMemoryExhaustion",R[441],E,32,N],[12,R[442],R[443],E,32,N],[13,R[835],R[441],E,32,N],[12,R[444],R[443],E,32,N],[12,R[442],E,E,32,N],[13,R[327],R[441],E,32,N],[12,"size",R[443],E,32,N],[12,R[442],E,E,32,N],[13,"ProcessKilled",R[441],E,32,N],[12,R[442],R[443],E,32,N],[13,R[839],R[441],E,32,N],[12,R[442],R[443],E,32,N],[13,R[837],R[441],E,32,N],[12,R[442],R[443],E,32,N],[13,R[838],R[441],E,32,N],[12,"value",R[443],E,32,N],[12,"maximum",E,E,32,N],[12,R[442],E,E,32,N],[13,R[833],R[441],E,32,N],[12,"kcap",R[443],E,32,N],[12,R[442],E,E,32,N],[13,"IpcError",R[441],E,32,N],[12,R[442],R[443],E,32,N],[13,"WrongMappingFramesForTy",R[441],E,32,N],[12,"ty",R[443],E,32,N],[12,R[442],E,E,32,N],[13,R[836],R[441],E,32,N],[12,R[444],R[443],E,32,N],[12,"ty",E,E,32,N],[12,R[442],E,E,32,N],[13,R[840],R[441],E,32,N],[12,R[442],R[443],E,32,N],[17,"_DERIVE_failure_Fail_FOR_KernelError",R[441],E,N,N],[17,"_DERIVE_failure_core_fmt_Display_FOR_KernelError",E,E,N,N],[0,"log_impl",R[434],"A simple log implementation based on env_logger",N,N],[3,"Logger",R[448],E,N,N],[12,"filter",E,E,33,N],[5,"early_init",E,"Initializes the Logger in a heapless environment.",N,[[]]],[5,"init",E,"Reinitializes the logger using the cmdline. This requires…",N,[[]]],[0,"filter",E,"Filtering for log records.",N,N],[3,"Filter",R[446],"A log filter.",N,N],[12,R[445],E,E,34,N],[12,"filter",E,E,34,N],[3,"Builder",E,"A builder for a log filter.",N,N],[12,R[445],E,E,35,N],[12,"filter",E,E,35,N],[3,R[860],E,E,N,N],[12,"name",E,E,36,N],[12,"level",E,E,36,N],[5,"parse_spec",E,"Parse a logging specification string (e.g:…",N,[[["str"]]]],[5,"enabled",E,E,N,[[["level"],["str"]],["bool"]]],[0,"inner",E,E,N,N],[3,"Filter",R[731],E,N,N],[12,"inner",E,E,37,N],[11,"new",E,E,37,[[["str"]],[["filter"],["string"],[R[23],["filter","string"]]]]],[11,"is_match",E,E,37,[[["self"],["str"]],["bool"]]],[11,"filter",R[446],"Returns the maximum `LevelFilter` that this filter…",34,[[["self"]],[R[447]]]],[11,"matches",E,"Checks if this record matches the configured filter.",34,[[["self"],["record"]],["bool"]]],[11,"enabled",E,"Determines if a log message with the specified metadata…",34,[[["self"],["metadata"]],["bool"]]],[11,"new",E,"Initializes the filter builder with defaults.",35,[[],["builder"]]],[11,"filter_module",E,"Initializes the filter builder from an environment. Adds a…",35,[[["self"],["str"],[R[447]]],["self"]]],[11,"filter_level",E,"Adds a directive to the filter for all modules.",35,[[["self"],[R[447]]],["self"]]],[11,"filter",E,"Adds a directive to the filter.",35,[[["self"],[R[447]],[R[5],["str"]],["str"]],["self"]]],[11,"parse",E,"Parses the directives string.",35,[[["self"],["str"]],["self"]]],[11,"build",E,"Build a log filter.",35,[[["self"]],["filter"]]],[7,"LOGGER",R[448],E,N,N],[0,"i386",R[434],R[449],N,N],[3,R[240],R[469],R[450],N,N],[12,"link",E,E,38,N],[12,R[263],E,E,38,N],[12,"esp0",E,E,38,N],[12,"ss0",E,E,38,N],[12,R[451],E,E,38,N],[12,"esp1",E,E,38,N],[12,"ss1",E,E,38,N],[12,R[452],E,E,38,N],[12,"esp2",E,E,38,N],[12,"ss2",E,E,38,N],[12,R[453],E,E,38,N],[12,"cr3",E,E,38,N],[12,"eip",E,E,38,N],[12,"eflags",E,E,38,N],[12,"eax",E,E,38,N],[12,"ecx",E,E,38,N],[12,"edx",E,E,38,N],[12,"ebx",E,E,38,N],[12,"esp",E,E,38,N],[12,"ebp",E,E,38,N],[12,"esi",E,E,38,N],[12,"edi",E,E,38,N],[12,"es",E,E,38,N],[12,R[454],E,E,38,N],[12,"cs",E,E,38,N],[12,R[455],E,E,38,N],[12,"ss",E,E,38,N],[12,R[456],E,E,38,N],[12,"ds",E,E,38,N],[12,R[457],E,E,38,N],[12,"fs",E,E,38,N],[12,R[458],E,E,38,N],[12,"gs",E,E,38,N],[12,R[459],E,E,38,N],[12,R[460],E,E,38,N],[12,R[461],E,E,38,N],[12,R[462],E,E,38,N],[12,R[463],E,E,38,N],[4,R[241],E,R[464],N,N],[13,"Ring0",E,R[465],39,N],[13,"Ring1",E,R[466],39,N],[13,"Ring2",E,R[467],39,N],[13,"Ring3",E,R[468],39,N],[0,"acpi",E,"ACPI detection",N,N],[3,R[930],R[732],"ACPI Memory handler",N,N],[5,"get_acpi_information",E,"Get a reference to the ACPI information.",N,[[],["acpi"]]],[5,"try_get_acpi_information",E,"Tries to get a pointer to the acpi information structure.",N,[[],[[R[5],["acpi"]],["acpi"]]]],[5,"parse_rsdp_tag",E,"Parse RSDP from multiboot2 a tag.",N,[[["memoryhandler"],[R[4]]],["bool"]]],[5,"init",E,"Parse ACPI tables and store them.",N,[[]]],[7,"ACPI_INFO",E,"Stores the ACPI data",N,N],[0,"registers",R[469],"i386 registers reading",N,N],[5,"eip","sunrise_kernel::i386::registers","Gets the current $eip.",N,[[],[R[4]]]],[0,"eflags",E,"Processor state stored in the EFLAGS register.",N,N],[3,"EFlags",R[733],"The EFLAGS register.",N,N],[12,"bits",E,E,40,N],[5,"read",E,"Returns the current value of the EFLAGS register.",N,[[],["eflags"]]],[5,"read_raw",E,"Returns the raw current value of the EFLAGS register.",N,[[],["u32"]]],[5,"write",E,"Writes the EFLAGS register, preserves reserved bits.",N,[[["eflags"]]]],[5,R[846],E,"Writes the EFLAGS register.",N,[[["u32"]]]],[18,"ID",E,"Processor feature identification flag.",40,N],[18,R[787],E,"Indicates that an external, maskable interrupt is pending.",40,N],[18,R[788],E,"Virtual image of the INTERRUPT_FLAG bit.",40,N],[18,R[789],E,"Enable automatic alignment checking if CR0.AM is set. Only…",40,N],[18,R[790],E,"Enable the virtual-8086 mode.",40,N],[18,R[791],E,"Allows to restart an instruction following an instrucion…",40,N],[18,R[792],E,"Used by `iret` in hardware task switch mode to determine…",40,N],[18,R[793],E,"The high bit of the I/O Privilege Level field.",40,N],[18,"IOPL_LOW",E,"The low bit of the I/O Privilege Level field.",40,N],[18,R[794],E,"Set by hardware to indicate that the sign bit of the…",40,N],[18,R[795],E,"Determines the order in which strings are processed.",40,N],[18,R[796],E,"Enable interrupts.",40,N],[18,R[797],E,"Enable single-step mode for debugging.",40,N],[18,R[798],E,R[470],40,N],[18,R[799],E,R[470],40,N],[18,R[800],E,R[471],40,N],[18,R[801],E,"Set by hardware if last result has an even number of 1…",40,N],[18,R[802],E,R[471],40,N],[11,"empty",E,R[106],40,[[],["eflags"]]],[11,"all",E,R[107],40,[[],["eflags"]]],[11,"bits",E,R[108],40,[[["self"]],["u32"]]],[11,R[109],E,R[110],40,[[["u32"]],[[R[5],["eflags"]],["eflags"]]]],[11,R[111],E,R[112],40,[[["u32"]],["eflags"]]],[11,R[147],E,R[113],40,[[["self"]],["bool"]]],[11,"is_all",E,R[114],40,[[["self"]],["bool"]]],[11,R[115],E,R[116],40,[[["self"],["eflags"]],["bool"]]],[11,R[148],E,R[117],40,[[["self"],["eflags"]],["bool"]]],[11,"insert",E,R[118],40,[[["self"],["eflags"]]]],[11,"remove",E,R[119],40,[[["self"],["eflags"]]]],[11,"toggle",E,R[120],40,[[["self"],["eflags"]]]],[11,"set",E,R[121],40,[[["self"],["bool"],["eflags"]]]],[0,"stack",R[469],"Kernel stack",N,N],[3,R[861],R[734],"A structure representing a kernel stack.",N,N],[12,R[472],E,"The aligned address at the beginning of the stack.",41,N],[3,R[862],E,"The minimal information needed to perform a stack dump.",N,N],[12,"esp",E,"The initial top of the stack.",42,N],[12,"ebp",E,"The initial bottom of the first stack frame.",42,N],[12,"eip",E,"The initial pc.",42,N],[5,"dump_stack",E,"Dumps the stack from the given information, displaying it…",N,[[[R[5]],["stackdumpsource"]]]],[5,"dump_stack_from_slice",E,"Dumps a stack, displaying it in a frame-by-frame format.",N,[[[R[4]],[R[5]]]]],[17,R[473],E,R[474],N,N],[17,R[475],E,R[476],N,N],[17,R[477],E,R[478],N,N],[17,R[479],E,R[480],N,N],[11,R[481],E,"Allocates the kernel stack of a process.",41,[[],[[R[268]],[R[482]],[R[23],[R[482],R[268]]]]]],[11,"align_to_stack_bottom",E,"Aligns down a pointer to what would be the beginning of…",41,[[[R[4]]],[R[4]]]],[11,"get_current_stack_bottom",E,"Gets the bottom of the stack by `and`ing `$esp` with…",41,[[],[R[4]]]],[11,"get_current_stack",E,"Retrieves the current stack from `$esp`.",41,[[],[R[482]]]],[18,R[483],E,"We keep 2 poison pointers for fake `saved ebp` and `saved…",41,N],[11,R[484],E,R[485],41,[[["self"]]]],[11,R[486],E,"Get the address of the beginning of usable stack.",41,[[["self"]],[R[4]]]],[11,"dump_current_stack",E,"Dumps the stack, displaying it in a frame-by-frame format.",41,[[[R[5]]]]],[11,"new",E,"Creates a StackDumpSource from :",42,[[[R[4]]],["self"]]],[0,"multiboot",R[469],"Multiboot Information",N,N],[5,"get_boot_information","sunrise_kernel::i386::multiboot","Get a pointer to the multiboot information structure.",N,[[],[R[183]]]],[5,"try_get_boot_information",E,"Tries to get a pointer to the multiboot information…",N,[[],[[R[5],[R[183]]],[R[183]]]]],[5,"init",E,"Initializes the boot information module, allowing the…",N,[[[R[183]]]]],[7,"BOOT_INFO",E,"Stores the address of the multiboot.",N,N],[0,"structures",R[469],"Representations of various x86 specific structures and…",N,N],[0,"gdt",R[492],R[487],N,N],[3,R[239],R[735],R[488],N,N],[12,"0",E,E,43,N],[11,"new",E,R[489],43,[[["u16"],[R[61]]],[R[63]]]],[11,"index",E,R[490],43,[[],["u16"]]],[11,"rpl",E,R[491],43,[[],[R[61]]]],[11,"is_ldt",E,"If true, this descriptor is backed by the LDT. If false,…",43,[[],["bool"]]],[0,"idt",R[492],"Provides types for the Interrupt Descriptor Table and its…",N,N],[3,"Idt",R[736],"An Interrupt Descriptor Table with 256 entries.",N,N],[12,"divide_by_zero",E,"A divide by zero exception (`#DE`) occurs when the…",44,N],[12,"debug",E,"When the debug-exception mechanism is enabled, a `#DB`…",44,N],[12,"non_maskable_interrupt",E,"An non maskable interrupt exception (NMI) occurs as a…",44,N],[12,"breakpoint",E,"A breakpoint (`#BP`) exception occurs when an `INT3`…",44,N],[12,"overflow",E,"An overflow exception (`#OF`) occurs as a result of…",44,N],[12,"bound_range_exceeded",E,"A bound-range exception (`#BR`) exception can occur as a…",44,N],[12,"invalid_opcode",E,"An invalid opcode exception (`#UD`) occurs when an attempt…",44,N],[12,"device_not_available",E,"A device not available exception (`#NM`) occurs under any…",44,N],[12,"double_fault",E,"A double fault (`#DF`) exception can occur when a second…",44,N],[12,"coprocessor_segment_overrun",E,"This interrupt vector is reserved. It is for a…",44,N],[12,"invalid_tss",E,"An invalid TSS exception (`#TS`) occurs only as a result…",44,N],[12,"segment_not_present",E,"An segment-not-present exception (`#NP`) occurs when an…",44,N],[12,"stack_segment_fault",E,"An stack segment exception (`#SS`) can occur in the…",44,N],[12,"general_protection_fault",E,"A general protection fault (`#GP`) can occur in various…",44,N],[12,"page_fault",E,"A page fault (`#PF`) can occur during a memory access in…",44,N],[12,"reserved_1",E,"vector nr. 15",44,N],[12,"x87_floating_point",E,"The x87 Floating-Point Exception-Pending exception (`#MF`)…",44,N],[12,"alignment_check",E,"An alignment check exception (`#AC`) occurs when an…",44,N],[12,"machine_check",E,"The machine check exception (`#MC`) is model specific.…",44,N],[12,"simd_floating_point",E,"The SIMD Floating-Point Exception (`#XF`) is used to…",44,N],[12,"virtualization",E,"vector nr. 20",44,N],[12,"reserved_2",E,"vector nr. 21-29",44,N],[12,"security_exception",E,"The Security Exception (`#SX`) signals security-sensitive…",44,N],[12,"reserved_3",E,"vector nr. 31",44,N],[12,R[493],E,"User-defined interrupts can be initiated either by system…",44,N],[3,"IdtEntry",E,"An Interrupt Descriptor Table entry.",N,N],[12,"pointer_low",E,"Low word of the interrupt handler's virtual address. In an…",45,N],[12,"gdt_selector",E,"A segment selector.",45,N],[12,"zero",E,"Unused.",45,N],[12,"options",E,"Option bitfield.",45,N],[12,"pointer_high",E,"High word of the interrupt handler's virtual address.",45,N],[12,"phantom",E,"Type-safety guarantee: ensure that the function handler…",45,N],[3,R[863],E,"Represents the options field of an IDT entry.",N,N],[12,"0",E,E,46,N],[3,R[864],E,"Represents the exception stack frame pushed by the CPU on…",N,N],[12,"instruction_pointer",E,"This value points to the instruction that should be…",47,N],[12,"code_segment",E,"The code segment selector, padded with zeros.",47,N],[12,"cpu_flags",E,"The flags register before the interrupt handler was invoked.",47,N],[12,"stack_pointer",E,"The stack pointer at the time of the interrupt.",47,N],[12,"stack_segment",E,"The stack segment descriptor at the time of the interrupt…",47,N],[3,R[865],E,"Describes an page fault error code.",N,N],[12,"bits",E,E,48,N],[4,"GateType",E,"Represents the type of an IDT descriptor (called a gate).",N,N],[13,"TaskGate32",E,E,49,N],[13,R[494],E,E,49,N],[13,R[495],E,E,49,N],[13,R[496],E,E,49,N],[13,R[497],E,E,49,N],[6,"HandlerFunc",E,"A handler function for an interrupt or an exception…",N,N],[6,"HandlerFuncWithErrCode",E,"A handler function for an exception that pushes an error…",N,N],[6,"PageFaultHandlerFunc",E,"A page fault handler function that pushes a page fault…",N,N],[17,"_",E,E,N,N],[17,"_",E,E,N,N],[11,"init",E,"Creates a new IDT filled with non-present entries.",44,[[["self"]]]],[11,"load",E,"Loads the IDT in the CPU using the `lidt` command.",44,[[["self"]]]],[11,"missing",E,"Creates a non-present IDT entry (but sets the must-be-one…",45,[[],["self"]]],[11,"set_interrupt_gate_addr",E,R[498],45,[[["self"],["u32"]],[R[499]]]],[11,"set_handler_task_gate",E,"Set a task gate for the IDT entry and sets the present bit.",45,[[["self"],[R[63]]]]],[11,"set_handler_fn",E,R[498],45,[[["self"]],[R[499]]]],[11,"gate_type",E,"Type of the interrupt handler. Its value determines the…",46,[[["self"]],[R[821]]]],[11,"privilege_level",E,E,46,[[["self"]],[R[61]]]],[11,"is_present",E,E,46,[[["self"]],["bool"]]],[11,"set_is_present",E,E,46,[[["self"],["bool"]]]],[11,"minimal",E,"Creates a minimal options field with all the must-be-one…",46,[[],["self"]]],[11,"set_gate_type",E,"Set the kind of gate this IdtEntry represents.",46,[[["self"],[R[821]]],["self"]]],[11,"set_privilege_level",E,"Set the required privilege level (DPL) for invoking the…",46,[[["self"],[R[61]]],["self"]]],[11,"set_present_interrupt",E,R[500],46,[[["self"],["bool"]],["self"]]],[11,"set_present_task",E,R[500],46,[[["self"],["bool"]],["self"]]],[11,"disable_interrupts",E,"Let the CPU disable hardware interrupts when the handler…",46,[[["self"],["bool"]],["self"]]],[18,R[803],E,"If this flag is set, the page fault was caused by a…",48,N],[18,R[804],E,"If this flag is set, the memory access that caused the…",48,N],[18,R[805],E,"If this flag is set, an access in user mode (CPL=3) caused…",48,N],[18,R[806],E,"If this flag is set, the page fault is a result of the…",48,N],[18,R[807],E,"If this flag is set, it indicates that the access that…",48,N],[11,"empty",E,R[106],48,[[],[R[501]]]],[11,"all",E,R[107],48,[[],[R[501]]]],[11,"bits",E,R[108],48,[[["self"]],["u32"]]],[11,R[109],E,R[110],48,[[["u32"]],[[R[5],[R[501]]],[R[501]]]]],[11,R[111],E,R[112],48,[[["u32"]],[R[501]]]],[11,R[147],E,R[113],48,[[["self"]],["bool"]]],[11,"is_all",E,R[114],48,[[["self"]],["bool"]]],[11,R[115],E,R[116],48,[[["self"],[R[501]]],["bool"]]],[11,R[148],E,R[117],48,[[["self"],[R[501]]],["bool"]]],[11,"insert",E,R[118],48,[[["self"],[R[501]]]]],[11,"remove",E,R[119],48,[[["self"],[R[501]]]]],[11,"toggle",E,R[120],48,[[["self"],[R[501]]]]],[11,"set",E,R[121],48,[[["self"],[R[501]],["bool"]]]],[0,R[502],R[469],"Arch-specific process switch functions",N,N],[3,R[866],R[737],"The hardware context of a paused thread. It contains just…",N,N],[12,"esp",E,"The top of the stack, where all other registers are saved.",50,N],[5,R[502],E,"Performs the process switch, switching from currently…",N,[[["arc",[R[503]]],[R[503]]],[["arc",[R[503]]],[R[503]]]]],[5,"prepare_for_first_schedule",E,"Prepares the thread for its first schedule by writing…",N,[[[R[4]],[R[503]]]]],[5,"first_schedule",E,"The function ret'd on, on a thread's first schedule - as…",N,[[]]],[5,"jump_to_entrypoint",E,"Jumps to Userspace, and run a userspace program.",N,[[[R[4]]]]],[0,"gdt",R[469],R[504],N,N],[3,R[867],R[738],"Safety wrapper that manages the lifetime of GDT tables.",N,N],[12,"table_a",E,R[505],51,N],[12,"table_b",E,R[505],51,N],[12,"table_selector",E,"The table currently pointed to by GDTR. `0` is `table_a`,…",51,N],[3,"MainTask",E,"The main TSS. See [MAIN_TASK].",N,N],[12,"tss",E,"TssStruct of the main task.",52,N],[12,"iopb",E,"Array of bits representing the io-space permissions:",52,N],[3,R[868],E,"The stack used while handling a double fault.",N,N],[12,"0",E,E,53,N],[3,R[236],E,"A structure containing our GDT.",N,N],[12,"table",E,"The GDT table, an array of DescriptorTableEntry.",54,N],[3,R[237],E,"An entry in the GDT/LDT.",N,N],[12,"0",E,E,55,N],[4,"GdtIndex",E,"Index in the GDT of each segment descriptor.",N,N],[13,"Null",E,"The index in the GDT of the null descriptor.",56,N],[13,"KCode",E,"The index in the GDT of the Kernel code segment descriptor.",56,N],[13,"KData",E,"The index in the GDT of the Kernel data segment descriptor.",56,N],[13,"KTls",E,"The index in the GDT of the Kernel thread local storage…",56,N],[13,"KStack",E,"The index in the GDT of the Kernel stack segment descriptor.",56,N],[13,"UCode",E,"The index in the GDT of the Userland code segment…",56,N],[13,"UData",E,"The index in the GDT of the Userland data segment…",56,N],[13,"UTlsRegion",E,R[506],56,N],[13,"UTlsElf",E,R[506],56,N],[13,"UStack",E,"The index in the GDT of the Userland stack segment…",56,N],[13,"LDT",E,"The index in the GDT of the LDT descriptor.",56,N],[13,"TSS",E,"The index in the GDT of the main TSS descriptor.",56,N],[13,"FTSS",E,"The index in the GDT of the double fault TSS descriptor.",56,N],[13,"DescCount",E,"The number of descriptors in the GDT.",56,N],[4,R[238],E,"Lists the valid values of System Descriptor Types.",N,N],[13,R[507],E,E,57,N],[13,"Ldt",E,E,57,N],[13,R[508],E,E,57,N],[13,R[509],E,E,57,N],[13,R[510],E,E,57,N],[13,R[511],E,E,57,N],[13,R[512],E,E,57,N],[5,"init_gdt",E,"Initializes the GDT.",N,[[]]],[7,"GDT",E,"The global GDT. Needs to be initialized with [init_gdt].",N,N],[7,R[513],E,R[514],N,N],[7,R[67],E,"Main TSS",N,N],[7,"DOUBLE_FAULT_TASK",E,"Double fault TSS",N,N],[7,"DOUBLE_FAULT_TASK_STACK",E,"The stack used while handling a double fault. See…",N,N],[11,"selector",E,"Turns a segment descriptor index to a segment selector.",56,[[],[R[63]]]],[11,"commit",E,"Commit the changes in the currently unloaded table, and…",51,[[["self"],[R[63]],[R[5],[R[63]]]]]],[11,"empty",E,"Creates an empty TSS.",52,[[],["maintask"]]],[11,"init",E,R[560],52,[[["self"]]]],[11,R[515],E,"Load this descriptor table into the GDTR, and reload the…",54,[[["self"],[R[63]],[R[5],[R[63]]]]]],[11,R[516],E,"Returns an empty descriptor. Using this descriptor is an…",55,[[],[R[69]]]],[11,"new",E,R[70],55,[[[R[61]],["u32"],["bool"]],[R[69]]]],[11,R[517],E,"Creates an empty GDT system descriptor of the given type.",55,[[[R[230]],["u32"],[R[61]]],[R[69]]]],[11,"new_ldt",E,R[518],55,[[[R[61]],[R[71]]],[R[69]]]],[11,"new_tss",E,R[519],55,[[[R[61]],[R[4]],[R[72]]],[R[69]]]],[11,R[520],E,"Gets the byte length of the entry, minus 1.",55,[[],["u32"]]],[11,R[521],E,"Sets the entry's byte length to the given number plus one.…",55,[[["self"],["u32"]]]],[11,"get_base",E,"Gets the base address of the entry.",55,[[],["u32"]]],[11,"set_base",E,"Sets the base address of the entry.",55,[[["self"],["u32"]]]],[11,R[522],E,"CPU sets this bit to true when the segment is accessed.",55,[[],["bool"]]],[11,R[523],E,E,55,[[],["bool"]]],[11,R[524],E,E,55,[[],["bool"]]],[11,R[525],E,"Determines whether the segment is a code segment or a data…",55,[[],["bool"]]],[11,R[526],E,"The privilege level associated with this segment.",55,[[],[R[61]]]],[11,R[527],E,"A segment needs to be present to have an effect. Using a…",55,[[],["bool"]]],[11,R[528],E,R[530],55,[[],["bool"]]],[11,R[529],E,R[530],55,[[["self"],["bool"]]]],[11,"is_32bit",E,"If true, this is a 32-bit segment. If false, it is a…",55,[[],["bool"]]],[0,"interrupt",R[469],"Arch-generic interrupt handling.",N,N],[3,R[869],R[739],R[531],N,N],[12,"root_lapic",E,"Root CPU's Local APIC.",58,N],[12,"ioapics",E,"Vector of all the IO-APICs.",58,N],[12,"isa_mappings",E,"List of interrupt mappings.",58,N],[5,"init",E,"Initialize the interrupt handler.",N,[[]]],[5,R[606],E,"Acknowledge the given IRQ.",N,[[["u8"]]]],[5,"unmask",E,"Unmasks the given IRQ.",N,[[["u8"]]]],[5,"isa_to_ioapic_irq",E,"Gets the IOAPIC pin associated with an ISA (i8259) IRQ.",N,[[["u8"]],["u32"]]],[7,"INTERRUPT_HANDLER",E,R[531],N,N],[0,"interrupt_service_routines",R[469],"i386 exceptions + irq + syscall handling",N,N],[3,R[870],R[740],"Represents a register backup.",N,N],[12,"esp",E,E,59,N],[12,"gs",E,E,59,N],[12,"ebp",E,E,59,N],[12,"edi",E,E,59,N],[12,"esi",E,E,59,N],[12,"edx",E,E,59,N],[12,"ecx",E,E,59,N],[12,"ebx",E,E,59,N],[12,"eax",E,E,59,N],[12,"errcode",E,E,59,N],[12,"eip",E,E,59,N],[12,"cs",E,E,59,N],[12,"eflags",E,E,59,N],[3,"IDT",E,"IDT address. Initialized in `init()`.",N,N],[12,R[60],E,E,60,N],[5,"check_thread_killed",E,"Checks if our thread was killed, in which case unschedule…",N,[[]]],[5,"divide_by_zero_exception_asm_wrapper",E,R[532],N,[[]]],[5,"divide_by_zero_exception_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"debug_exception_asm_wrapper",E,R[532],N,[[]]],[5,"debug_exception_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"nmi_exception_asm_wrapper",E,R[532],N,[[]]],[5,"nmi_exception_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"breakpoint_exception_asm_wrapper",E,R[532],N,[[]]],[5,"breakpoint_exception_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"overflow_exception_asm_wrapper",E,R[532],N,[[]]],[5,"overflow_exception_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"bound_range_exceeded_exception_asm_wrapper",E,R[532],N,[[]]],[5,"bound_range_exceeded_exception_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"invalid_opcode_exception_asm_wrapper",E,R[532],N,[[]]],[5,"invalid_opcode_exception_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"device_not_available_exception_asm_wrapper",E,R[532],N,[[]]],[5,"device_not_available_exception_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"double_fault_handler",E,"Double fault handler. Panics the kernel unconditionally.",N,[[]]],[5,"invalid_tss_exception_asm_wrapper",E,R[532],N,[[]]],[5,"invalid_tss_exception_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"segment_not_present_exception_asm_wrapper",E,R[532],N,[[]]],[5,"segment_not_present_exception_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"stack_fault_exception_asm_wrapper",E,R[532],N,[[]]],[5,"stack_fault_exception_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"general_protection_fault_exception_asm_wrapper",E,R[532],N,[[]]],[5,"general_protection_fault_exception_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"page_fault_exception_asm_wrapper",E,R[532],N,[[]]],[5,"page_fault_exception_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"kernel_page_fault_panic",E,R[534],N,[[["bool"],[R[533]],["str"]]]],[5,"user_page_fault_panic",E,R[534],N,[[["bool"],[R[533]],["str"]]]],[5,"user_page_fault_handler",E,"Overriding the default kill strategy so we can display cr2",N,[[["bool"],[R[533]],["str"]]]],[5,"x87_floating_point_exception_asm_wrapper",E,R[532],N,[[]]],[5,"x87_floating_point_exception_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"alignment_check_exception_asm_wrapper",E,R[532],N,[[]]],[5,"alignment_check_exception_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"machine_check_exception_asm_wrapper",E,R[532],N,[[]]],[5,"machinee_check_exception_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"simd_floating_point_exception_asm_wrapper",E,R[532],N,[[]]],[5,"simd_floating_point_exception_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"virtualization_exception_asm_wrapper",E,R[532],N,[[]]],[5,"virtualization_exception_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"security_exception_asm_wrapper",E,R[532],N,[[]]],[5,"security_exception_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"syscall_interrupt_asm_wrapper",E,R[532],N,[[]]],[5,"syscall_interrupt_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"syscall_interrupt_dispatcher",E,"This is the function called on int 0x80.",N,[[["bool"],[R[533]],["str"]]]],[5,"pit_handler",E,R[535],N,[[["bool"],[R[533]],["str"]]]],[5,"pit_handler_asm_wrapper",E,R[532],N,[[]]],[5,"pit_handler_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"keyboard_handler",E,R[535],N,[[["bool"],[R[533]],["str"]]]],[5,"keyboard_handler_asm_wrapper",E,R[532],N,[[]]],[5,"keyboard_handler_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"cascade_handler",E,R[535],N,[[["bool"],[R[533]],["str"]]]],[5,"cascade_handler_asm_wrapper",E,R[532],N,[[]]],[5,"cascade_handler_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"serial2_handler",E,R[535],N,[[["bool"],[R[533]],["str"]]]],[5,"serial2_handler_asm_wrapper",E,R[532],N,[[]]],[5,"serial2_handler_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"serial1_handler",E,R[535],N,[[["bool"],[R[533]],["str"]]]],[5,"serial1_handler_asm_wrapper",E,R[532],N,[[]]],[5,"serial1_handler_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"sound_handler",E,R[535],N,[[["bool"],[R[533]],["str"]]]],[5,"sound_handler_asm_wrapper",E,R[532],N,[[]]],[5,"sound_handler_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"floppy_handler",E,R[535],N,[[["bool"],[R[533]],["str"]]]],[5,"floppy_handler_asm_wrapper",E,R[532],N,[[]]],[5,"floppy_handler_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"parallel1_handler",E,R[535],N,[[["bool"],[R[533]],["str"]]]],[5,"parallel1_handler_asm_wrapper",E,R[532],N,[[]]],[5,"parallel1_handler_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"rtc_handler",E,R[535],N,[[["bool"],[R[533]],["str"]]]],[5,"rtc_handler_asm_wrapper",E,R[532],N,[[]]],[5,"rtc_handler_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"acpi_handler",E,R[535],N,[[["bool"],[R[533]],["str"]]]],[5,"acpi_handler_asm_wrapper",E,R[532],N,[[]]],[5,"acpi_handler_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"irq10_handler",E,R[535],N,[[["bool"],[R[533]],["str"]]]],[5,"irq10_handler_asm_wrapper",E,R[532],N,[[]]],[5,"irq10_handler_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"irq11_handler",E,R[535],N,[[["bool"],[R[533]],["str"]]]],[5,"irq11_handler_asm_wrapper",E,R[532],N,[[]]],[5,"irq11_handler_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"mouse_handler",E,R[535],N,[[["bool"],[R[533]],["str"]]]],[5,"mouse_handler_asm_wrapper",E,R[532],N,[[]]],[5,"mouse_handler_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"irq13_handler",E,R[535],N,[[["bool"],[R[533]],["str"]]]],[5,"irq13_handler_asm_wrapper",E,R[532],N,[[]]],[5,"irq13_handler_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"primary_ata_handler",E,R[535],N,[[["bool"],[R[533]],["str"]]]],[5,"primary_ata_handler_asm_wrapper",E,R[532],N,[[]]],[5,"primary_ata_handler_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"secondary_ata_handler",E,R[535],N,[[["bool"],[R[533]],["str"]]]],[5,"secondary_ata_handler_asm_wrapper",E,R[532],N,[[]]],[5,"secondary_ata_handler_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"hpet_handler",E,R[535],N,[[["bool"],[R[533]],["str"]]]],[5,"hpet_handler_asm_wrapper",E,R[532],N,[[]]],[5,"hpet_handler_rust_wrapper",E,R[532],N,[[[R[533]]]]],[5,"init",E,"Initialize the interrupt subsystem. Sets up the PIC and…",N,[[]]],[7,"IRQ_HANDLERS",E,"Array of interrupt handlers.",N,N],[7,"IDT",E,E,N,N],[17,"_",E,E,N,N],[17,"_",E,E,N,N],[17,"_",E,E,N,N],[11,"apply0",E,R[536],59,[[["self"],[R[23],[R[438]]],[R[438]]]]],[11,"apply1",E,R[536],59,[[["self"],[R[4]],[R[438]],[R[23],[R[4],R[438]]]]]],[11,"apply2",E,R[536],59,[[["self"],[R[438]],[R[23],[R[438]]]]]],[11,"apply3",E,R[536],59,[[["self"],[R[23],[R[438]]],[R[438]]]]],[11,"apply4",E,R[536],59,[[["self"],[R[438]],[R[23],[R[438]]]]]],[0,"pio",R[469],"Port IO",N,N],[3,"Pio","sunrise_kernel::i386::pio",R[6],N,N],[12,"port",E,R[7],61,N],[12,"value",E,R[8],61,N],[0,R[537],R[469],R[538],N,N],[0,"tables",R[547],R[539],N,N],[3,R[242],R[742],R[540],N,N],[12,"limit",E,R[541],62,N],[12,"base",E,"Physical address of the memory region containing the DT.",62,N],[5,"lgdt",E,R[542],N,[[[R[64]]]]],[5,"sgdt",E,"Store GDT table.",N,[[],[R[64]]]],[5,"lldt",E,R[543],N,[[[R[63]]]]],[5,"ltr",E,R[544],N,[[[R[63]]]]],[5,"lidt",E,R[545],N,[[[R[64]]]]],[0,R[546],R[547],R[548],N,N],[5,"set_cs","sunrise_kernel::i386::instructions::segmentation",R[549],N,[[[R[63]]]]],[5,"load_ss",E,R[550],N,[[[R[63]]]]],[5,"load_ds",E,R[551],N,[[[R[63]]]]],[5,"load_es",E,R[552],N,[[[R[63]]]]],[5,"load_fs",E,R[553],N,[[[R[63]]]]],[5,"load_gs",E,R[554],N,[[[R[63]]]]],[5,"cs",E,R[555],N,[[],[R[63]]]],[5,"ss",E,"Read the value of the stack segment register.",N,[[],[R[63]]]],[5,"ds",E,"Read the value of the data segment register.",N,[[],[R[63]]]],[5,"es",E,"Read the value of the es segment register.",N,[[],[R[63]]]],[5,"fs",E,"Read the value of the fs segment register.",N,[[],[R[63]]]],[5,"gs",E,"Read the value of the gs segment register.",N,[[],[R[63]]]],[0,R[493],R[547],R[556],N,N],[5,"sti","sunrise_kernel::i386::instructions::interrupts",R[557],N,[[]]],[5,"cli",E,R[558],N,[[]]],[5,"hlt",E,"Waits until an interrupt is fired",N,[[]]],[5,"are_enabled",E,"Returns whether interrupts are enabled.",N,[[],["bool"]]],[5,"without_interrupts",E,"Run a closue with disabled interrupts.",N,[[["f"]],["r"]]],[11,"from_u8",R[469],R[559],39,[[["u8"]],[R[61]]]],[11,"empty",E,"Creates an empty TssStruct.",38,[[],[R[72]]]],[11,"init",E,R[560],38,[[["self"]]]],[11,"set_esp0_stack",E,"Set the stack pointer used to handle interrupts occuring…",38,[[["self"],["u32"]]]],[11,"set_ip",E,"Set the IP of the current task struct. When we hardware…",38,[[["self"],["u32"]]]],[0,"syscalls",R[434],"Syscall implementations",N,N],[5,R[1209],"sunrise_kernel::syscalls",R[1210],N,[[[R[4]]],[[R[23],[R[4],R[438]]],[R[4]],[R[438]]]]],[5,R[1239],E,"Maps the vga frame buffer mmio in userspace memory",N,[[],[[R[438]],[R[23],[R[438]]]]]],[5,R[1232],E,"Create an event handle for the given IRQ number. Waiting…",N,[[["u32"],[R[4]]],[[R[23],[R[4],R[438]]],[R[4]],[R[438]]]]],[5,R[1233],E,R[1234],N,[[[R[4]]],[[R[23],[R[438]]],[R[438]]]]],[5,R[1225],E,"Waits for one of the handles to signal an event.",N,[[[R[561]],[R[4]]],[[R[23],[R[4],R[438]]],[R[4]],[R[438]]]]],[5,R[1227],E,"Print the passed string to the serial port.",N,[[[R[4]],[R[561]]],[[R[23],[R[438]]],[R[438]]]]],[5,R[1211],E,"Kills our own process.",N,[[],[[R[23],[R[438]]],[R[438]]]]],[5,R[1238],E,"Connects to the given ClientPort.",N,[[["u32"]],[[R[23],[R[4],R[438]]],[R[4]],[R[438]]]]],[5,R[1214],E,"Kills our own thread.",N,[[],[[R[23],[R[438]]],[R[438]]]]],[5,R[1212],E,"Creates a thread in the current process. The thread can…",N,[[["u32"],[R[4]]],[[R[23],[R[4],R[438]]],[R[4]],[R[438]]]]],[5,R[1213],E,"Starts a previously created thread.",N,[[["u32"]],[[R[23],[R[438]]],[R[438]]]]],[5,R[701],E,"Connects to the given named port. The name should be a…",N,[[[R[561]]],[[R[23],[R[4],R[438]]],[R[4]],[R[438]]]]],[5,R[1236],E,"Creates a new ServerPort for the given named port. The…",N,[[["u32"],[R[561]]],[[R[23],[R[4],R[438]]],[R[4]],[R[438]]]]],[5,R[1229],E,"Waits for an incoming connection on the given ServerPort…",N,[[["u32"]],[[R[23],[R[4],R[438]]],[R[4]],[R[438]]]]],[5,R[1226],E,"Send an IPC request through the ClientSession, and blocks…",N,[[[R[562]],["u32"]],[[R[23],[R[438]]],[R[438]]]]],[5,R[1230],E,"If ReplyTarget is not zero, a reply from the given buffer…",N,[[[R[561]],["u32"],[R[562]],[R[4]]],[[R[23],[R[4],R[438]]],[R[4]],[R[438]]]]],[5,R[1224],E,"Closed the passed handle.",N,[[["u32"]],[[R[23],[R[438]]],[R[438]]]]],[5,R[1215],E,"Sleep for a specified amount of time, or yield thread.",N,[[[R[4]]],[[R[23],[R[438]]],[R[438]]]]],[5,R[1216],E,R[1217],N,[[["u32"]],[[R[23],[R[438]]],[R[438]]]]],[5,R[1218],E,R[1219],N,[[["u32"]],[[R[23],[R[438]]],[R[438]]]]],[5,R[1235],E,R[711],N,[[["u32"],[R[561]],["bool"]],[[R[438]],[R[23],[R[438]]]]]],[5,R[1220],E,"Allocate a new SharedMemory region. This is a memory…",N,[[["u32"]],[[R[23],[R[4],R[438]]],[R[4]],[R[438]]]]],[5,R[1222],E,"Maps the block supplied by the handle. The required…",N,[[["u32"],[R[4]]],[[R[23],[R[438]]],[R[438]]]]],[5,R[1223],E,"Unmaps this shared memory region. This cannot be used to…",N,[[["u32"],[R[4]]],[[R[23],[R[438]]],[R[438]]]]],[5,R[563],E,"Query information about an address. Will always fetch the…",N,[[[R[4]],[R[562],[R[564]]],[R[564]]],[[R[23],[R[4],R[438]]],[R[4]],[R[438]]]]],[5,R[1228],E,R[704],N,[[[R[4]],["bool"]],[[R[438]],[R[23],[R[438]]]]]],[5,R[1231],E,"Create a [WritableEvent]/[ReadableEvent] pair. Signals on…",N,[[],[[R[438]],[R[23],[R[438]]]]]],[5,R[1240],E,R[1241],N,[[[R[4]],["bool"]],[[R[23],[R[438]]],[R[438]]]]],[5,R[1242],E,R[1243],N,[[[R[4]]],[[R[23],[R[438]]],[R[438]]]]],[5,R[1244],E,R[1245],N,[[["u32"],[R[4]]],[[R[23],[R[438]]],[R[438]]]]],[5,R[1246],E,R[1247],N,[[["u32"],[R[4]]],[[R[23],[R[438]]],[R[438]]]]],[5,R[1248],E,R[1249],N,[[["u32"],[R[4]]],[[R[23],[R[438]]],[R[438]]]]],[5,R[1250],E,"Creates a new process. This will create an empty address…",N,[[[R[561],[R[686]]],[R[561]],[R[686]]],[[R[23],[R[4],R[438]]],[R[4]],[R[438]]]]],[5,R[1251],E,R[1252],N,[[["u32"],[R[4]]],[[R[23],[R[438]]],[R[438]]]]],[5,R[1253],E,R[1254],N,[[["u32"]],[[R[23],[R[4],R[438]]],[R[4]],[R[438]]]]],[5,R[1255],E,R[1256],N,[[["u32"]],[[R[23],[R[438]]],[R[438]]]]],[5,R[1258],E,R[1259],N,[[["u32"]],[[R[23],[R[4],R[438]]],[R[4]],[R[438]]]]],[0,"frame_allocator",R[434],"Physical memory manager.",N,N],[3,R[261],R[567],R[570],N,N],[5,"init",E,R[575],N,[[[R[183]]]]],[5,R[580],E,R[581],N,[[[R[74]]]]],[0,"physical_mem_region",E,R[565],N,N],[3,R[565],R[743],"A span of adjacent physical frames. A frame is [PAGE_SIZE].",N,N],[12,"frames",E,"The number of frames in this region.",63,N],[12,R[178],E,"The (physical) address of the start of this region.",63,N],[12,"should_free_on_drop",E,"Denotes if the frames held in this region should be freed…",63,N],[3,R[871],E,"An iterator over a physical region. Yields the address of…",N,N],[12,"0",E,E,64,N],[12,"1",E,E,64,N],[11,R[444],E,"Get the start address of this PhysicalMemRegion.",63,[[["self"]],[R[74]]]],[11,"size",E,"Get the size this PhysicalMemRegion spans.",63,[[["self"]],[R[4]]]],[11,"on_fixed_mmio",E,"Constructs a `PhysicalMemRegion` by circumventing the…",63,[[[R[4]],[R[74]]],[[R[268]],[R[23],[R[268]]]]]],[11,"new_unchecked",E,"Construct a `PhysicalMemRegion` by circumventing the…",63,[[[R[4]],[R[74]]],["self"]]],[11,"reconstruct",E,R[566],63,[[[R[4]],[R[74]]],["self"]]],[11,"reconstruct_no_dealloc",E,R[566],63,[[[R[4]],[R[74]]],["self"]]],[0,"i386",R[567],"Architecture specific-behaviour i386 implementation of the…",N,N],[3,R[872],R[745],"A frame allocator backed up by a giant bitmap.",N,N],[12,R[568],E,R[180],65,N],[12,R[569],E,"All operations have to check that the Allocator has been…",65,N],[3,R[261],E,R[570],N,N],[5,R[571],E,R[572],N,[[[R[4]]],[R[4]]]],[5,R[573],E,R[574],N,[[[R[4]]],[R[4]]]],[5,"init",E,R[575],N,[[[R[183]]]]],[5,R[576],E,R[577],N,[[[R[4]]]]],[5,R[578],E,R[579],N,[[[R[4]]]]],[5,R[580],E,R[581],N,[[[R[74]]]]],[7,"FRAME_ALLOCATOR",E,R[582],N,N],[17,R[583],E,"The offset part in a [PhysicalAddress]. ``` let…",N,N],[17,R[584],E,"The frame part in [PhysicalAddress]. ``` let phys_address…",N,N],[17,R[585],E,"The right shift to perform to a Physical address to get…",N,N],[17,R[586],E,"For unit tests we use a much smaller array.",N,N],[17,R[587],E,"In the the bitmap, 1 means the frame is free.",N,N],[17,R[588],E,"In the the bitmap, 0 means the frame is occupied.",N,N],[11,"new",E,"Called to initialize the [FRAME_ALLOCATOR] global.",65,[[],["self"]]],[0,"private",R[567],"Private FrameAllocator API",N,N],[8,R[873],"sunrise_kernel::frame_allocator::private","An arch-specifig FrameAllocator must expose the following…",N,N],[10,R[782],E,"Marks a region as deallocated. Called when a…",66,[[[R[367]]]]],[10,R[783],E,"Checks if a region is marked allocated.",66,[[[R[4]],[R[74]]],["bool"]]],[10,R[784],E,"Checks if a region is marked reserved.",66,[[[R[4]],[R[74]]],["bool"]]],[8,R[874],R[567],"An arch-specific FrameAllocator must expose the following…",N,N],[10,R[779],E,"Allocates a single PhysicalMemRegion. Frames are…",67,[[[R[4]]],[[R[23],[R[367],R[268]]],[R[268]],[R[367]]]]],[10,R[780],E,R[781],67,[[[R[4]]],[["vec",[R[367]]],[R[23],["vec",R[268]]],[R[268]]]]],[11,"allocate_frame",E,"Allocates a single physical frame.",67,[[],[[R[23],[R[367],R[268]]],[R[268]],[R[367]]]]],[0,"heap_allocator",R[434],"Virtual heap allocator.",N,N],[3,R[875],R[746],"Simple wrapper around linked_list_allocator, growing heap…",N,N],[12,"0",E,E,68,N],[17,"RESERVED_HEAP_SIZE",E,"Maximum size of our Kernel Heap.",N,N],[11,"expand",E,R[1482],68,[[["self"],[R[4]]]]],[11,"init",E,"Create a new Heap of `RESERVED_HEAP_SIZE` bytes.",68,[[],[[R[820],["heap"]],["heap"]]]],[11,"new",E,"Creates a new heap based off of loader settings.",68,[[],["allocator"]]],[0,"devices",R[434],"Device drivers",N,N],[5,"init_timer",R[605],"Initialize a timer to be used by the OS.",N,[[]]],[0,"hpet",E,"HPET driver implementation.",N,N],[3,R[876],R[747],"Represent the lower part of the General Capabilities and…",N,N],[12,"0",E,E,69,N],[3,R[877],E,"Represent the General Configuration Register.",N,N],[12,"0",E,E,70,N],[3,R[878],E,"Represent a Timer Configuration Register.",N,N],[12,"0",E,E,71,N],[3,R[879],E,"Representation of HPET non variable registers.",N,N],[12,"identifier",E,"Information about the HPET model.",72,N],[12,"period",E,"Main counter tick period in femtoseconds (10^-15 seconds).…",72,N],[12,R[932],E,E,72,N],[12,"general_configuration",E,"General Configuration Register.",72,N],[12,R[263],E,E,72,N],[12,R[451],E,E,72,N],[12,"general_interrupt_status",E,"General Interrupt Status Register.",72,N],[12,R[452],E,E,72,N],[12,"main_counter_value",E,"main counter value.",72,N],[12,R[453],E,E,72,N],[3,R[880],E,"Representation of an HPET timer registers.",N,N],[12,"config",E,"The configuration and capabilities register of this timer.",73,N],[12,R[590],E,"Routing capability (IRQ0 to IRQ31 on the I/O APIC).",73,N],[12,"comparator_value_low",E,"The comparator value register low part.",73,N],[12,"comparator_value_high",E,"The comparator value register high part.",73,N],[12,"fsb_value",E,"The FSB Interrupt Route register lower part (value during…",73,N],[12,"fsb_address",E,"The FSB Interrupt Route register higher part (address used…",73,N],[3,"Hpet",E,"Represent an HPET device.",N,N],[12,"inner",E,"The mmio address of this HPET device.",74,N],[12,"period",E,"Cached value of `Hpet::period`.",74,N],[12,"timer_count",E,"The count of timer of this HPET device.",74,N],[3,R[881],E,"Represent an HPET timer.",N,N],[12,"inner",E,"The mmio address of this HPET timer.",75,N],[12,R[600],E,R[589],75,N],[12,R[601],E,R[589],75,N],[12,R[602],E,R[589],75,N],[12,R[590],E,R[589],75,N],[5,"init",E,"Try to initialize the HPET in legacy mode.",N,[[["hpet"]],["bool"]]],[7,"HPET_INSTANCE",E,"The instance of the HPET device we are using.",N,N],[17,"_",E,E,N,N],[11,"revision_id",E,"Indicates which revision of the function is implemented;…",69,[[["self"]],["u32"]]],[11,"timer_count_minus_one",E,"The amount of timers - 1.",69,[[["self"]],["u32"]]],[11,"counter_size_capability",E,"If this bit is 1, HPET main counter is capable of…",69,[[["self"]],["bool"]]],[11,"legacy_rt_capability",E,"If this bit is 1, HPET is capable of using \"legacy…",69,[[["self"]],["bool"]]],[11,"vendor_id",E,"Represent the HPET vendor id (most likely PCI vendor id?)",69,[[["self"]],["u32"]]],[11,"enable_config",E,R[591],70,[[["self"]],["bool"]]],[11,"set_enable_config",E,R[591],70,[[["self"],["bool"]]]],[11,"legacy_rt_config",E,R[592],70,[[["self"]],["bool"]]],[11,"set_legacy_rt_config",E,R[592],70,[[["self"],["bool"]]]],[11,"interrupt_type",E,R[593],71,[[["self"]],["bool"]]],[11,"set_interrupt_type",E,R[593],71,[[["self"],["bool"]]]],[11,"interrupt_enable",E,R[594],71,[[["self"]],["bool"]]],[11,"set_interrupt_enable",E,R[594],71,[[["self"],["bool"]]]],[11,"timer_type",E,R[595],71,[[["self"]],["bool"]]],[11,"set_timer_type",E,R[595],71,[[["self"],["bool"]]]],[11,"periodic_interrupt_capability",E,"true if this timer is capable of periodic timer.",71,[[["self"]],["bool"]]],[11,"size_capability",E,"If this bit is 1, this timer is capable of operating in 64…",71,[[["self"]],["bool"]]],[11,"accumulator_config",E,R[596],71,[[["self"]],["bool"]]],[11,"set_accumulator_config",E,R[596],71,[[["self"],["bool"]]]],[11,"is_32bit_mode",E,R[597],71,[[["self"]],["bool"]]],[11,"set_32bit_mode",E,R[597],71,[[["self"],["bool"]]]],[11,"interrupt_route",E,R[598],71,[[["self"]],["u32"]]],[11,R[603],E,R[598],71,[[["self"],["u32"]]]],[11,"fsb_interrupt",E,R[599],71,[[["self"]],["bool"]]],[11,"set_fsb_interrupt",E,R[599],71,[[["self"],["bool"]]]],[11,"fsb_interrupt_capability",E,"Timer FSB Interrupt Delivery capability.",71,[[["self"]],["bool"]]],[18,"MAX_IRQ",E,"This is the maximum IRQ lines supported by the HPET.",75,N],[11,"new",E,"Create a new HPET timer instance from MMIO registers.",75,[[],["self"]]],[11,R[600],E,"Return true if this timer is a 64 bits timer.",75,[[["self"]],["bool"]]],[11,R[601],E,"Return true if this timer supports periodic interrupt.",75,[[["self"]],["bool"]]],[11,R[602],E,"Return true if this timer supports fsb interrupt.",75,[[["self"]],["bool"]]],[11,"support_interrupt_routing",E,"Return true if the timer support routing to the given IRQ.",75,[[["self"],["u32"]],["bool"]]],[11,R[603],E,"Set the routing for the interrupt to the I/O APIC.",75,[[["self"],["u32"]]]],[11,"set_comparator_value",E,"Set the timer comparactor value",75,[[["self"],["u64"]]]],[11,"set_accumulator_value",E,"Set the timer accumulator value.",75,[[["self"],["u64"]]]],[11,"set_edge_trigger",E,"Set Edge Trigger.",75,[[["self"]]]],[11,"set_level_trigger",E,"Set Level Trigger.",75,[[["self"]]]],[11,"set_one_shot_mode",E,"Set the timer in One Shot mode.",75,[[["self"]]]],[11,"set_periodic_mode",E,"Set the timer in Periodic mode.",75,[[["self"]]]],[11,"enable_interrupt",E,"Enable interrupt.",75,[[["self"]]]],[11,"disable_interrupt",E,"Disable interrupt.",75,[[["self"]]]],[11,"has_interrupt_enabled",E,"Determine if the interrupt is enabled.",75,[[["self"]],["bool"]]],[11,"new",E,"Create a new HPET device instance from MMIO registers.",74,[[],["self"]]],[11,"has_legacy_mapping",E,"Return true if the device supports \"legacy mapping\".",74,[[["self"]],["bool"]]],[11,"get_period",E,"Return the period of the HPET device.",74,[[["self"]],["u32"]]],[11,"get_frequency",E,"Return the frequency of the HPET device.",74,[[["self"]],["u64"]]],[11,"enable_legacy_mapping",E,"Enable the \"legacy mapping\".",74,[[["self"]]]],[11,"disable_legacy_mapping",E,"Disable the \"legacy mapping\".",74,[[["self"]]]],[11,"is_legacy_mapping_enabled",E,"Check \"legacy mapping\" status.",74,[[["self"]],["bool"]]],[11,"enable",E,"Enable HPET (main timer running, and timer interrupts…",74,[[["self"]]]],[11,"set_main_counter_value",E,"Set HPET main counter value.",74,[[["self"],["u64"]]]],[11,"get_main_counter_value",E,"Get HPET main counter value.",74,[[["self"]],["u64"]]],[11,"disable",E,"Disable HPET (main timer halted, and timer interrupts…",74,[[["self"]]]],[11,"is_enabled",E,"Check HPET status.",74,[[["self"]],["bool"]]],[11,"get_timer",E,"Get a timer at the given index.",74,[[["self"],["u32"]],[[R[604]],[R[5],[R[604]]]]]],[0,"pic",R[605],"Driver for the 8259 Programmable Interrupt Controller.",N,N],[3,"ICW1",R[748],"The first control word sent to the PIC.",N,N],[12,"bits",E,E,76,N],[3,R[882],E,"A single PIC8259 device.",N,N],[12,"port_cmd",E,"The PIC's COMMAND IO port.",77,N],[12,"port_data",E,"The PIC's DATA IO port.",77,N],[3,"Pic",E,"A master/slave PIC setup, as commonly found on IBM PCs.",N,N],[12,"master",E,"The master PIC.",78,N],[12,"slave",E,"The slave PIC, cascaded on line 2 of `.master`",78,N],[5,"get",E,"Acquires a reference to the PIC, initializing it if it…",N,[[],["pic"]]],[5,"init",E,"Initializes the PIC if it has not yet been initialized.…",N,[[]]],[7,"PIC",E,"The PIC manager.",N,N],[17,"ICW4_8086",E,"ICW4: 8086/88 (MCS-80/85) mode.",N,N],[18,"ICW4",E,"If this bit is set, ICW4 has to be read. If ICW4 is not…",76,N],[18,"SINGLE",E,"Single. Means that this is the only 8259A in the system.…",76,N],[18,R[808],E,"Call Address Interval. Used only in 8085, not 8086.…",76,N],[18,"LEVEL",E,"If LEVEL = 1, then the 8259A will operate in the level…",76,N],[18,"INIT",E,"Should always be set to 1.",76,N],[11,"empty",E,R[106],76,[[],["icw1"]]],[11,"all",E,R[107],76,[[],["icw1"]]],[11,"bits",E,R[108],76,[[["self"]],["u8"]]],[11,R[109],E,R[110],76,[[["u8"]],[["icw1"],[R[5],["icw1"]]]]],[11,R[111],E,R[112],76,[[["u8"]],["icw1"]]],[11,R[147],E,R[113],76,[[["self"]],["bool"]]],[11,"is_all",E,R[114],76,[[["self"]],["bool"]]],[11,R[115],E,R[116],76,[[["self"],["icw1"]],["bool"]]],[11,R[148],E,R[117],76,[[["self"],["icw1"]],["bool"]]],[11,"insert",E,R[118],76,[[["self"],["icw1"]]]],[11,"remove",E,R[119],76,[[["self"],["icw1"]]]],[11,"toggle",E,R[120],76,[[["self"],["icw1"]]]],[11,"set",E,R[121],76,[[["self"],["bool"],["icw1"]]]],[11,"new",E,"Creates a new PIC, and initializes it.",78,[[],["pic"]]],[11,"mask",E,"Mask the given IRQ number. Will redirect the call to the…",78,[[["self"],["u8"]]]],[11,"unmask",E,"Unmask the given IRQ number. Will redirect the call to the…",78,[[["self"],["u8"]]]],[11,"get_mask",E,"Reads the PIC interrupt mask. Used for debug purposes.",78,[[["self"]],["u16"]]],[11,R[606],E,R[607],78,[[["self"],["u8"]]]],[11,"new",E,"Setup the 8259 pic. Redirect the IRQ to the chosen…",77,[[["u16"],["u8"],["bool"]],["internalpic"]]],[11,R[606],E,R[607],77,[[["self"]]]],[11,"mask",E,"Mask the given IRQ",77,[[["self"],["u8"]]]],[11,"unmask",E,"Unmask the given IRQ",77,[[["self"],["u8"]]]],[11,"get_mask",E,"Read the IRQ mask. Used mostly for debug purposes.",77,[[["self"]],["u8"]]],[0,"pit",R[605],"Programmable Interval Timer",N,N],[3,R[608],R[749],"The mutex wrapping the ports",N,N],[12,R[60],E,E,79,N],[3,R[883],E,"The port 0x61 flags we use.",N,N],[12,"bits",E,E,80,N],[3,"PITPorts",E,"We put the PIT ports in a structure to have them under a…",N,N],[12,"port_chan_0",E,E,81,N],[12,"port_chan_2",E,E,81,N],[12,"port_cmd",E,E,81,N],[12,"port_61",E,E,81,N],[3,R[884],E,"Channel 2",N,N],[12,"ports",E,"A reference to the PITPorts structure.",82,N],[4,R[885],E,"Used internally to select which channel to apply…",N,N],[13,"Channel0",E,"Operation should apply to Channel 0.",83,N],[13,"Channel2",E,"Operation should apply to Channel 2.",83,N],[5,R[610],E,R[611],N,[[[R[4]]]]],[5,"init_channel_0",E,"Initialize the channel 0 to send recurring irqs.",N,[[]]],[5,"disable",E,"Prevent the PIT from generating interrupts.",N,[[]]],[7,R[608],E,E,N,N],[17,"OSCILLATOR_FREQ",E,"The oscillator frequency when not divided, in hertz.",N,N],[17,"CHAN_0_FREQUENCY",E,"The frequency of channel 0 irqs, in hertz. One every 10…",N,N],[17,"CHAN_0_DIVISOR",E,"The channel 0 reset value",N,N],[18,R[809],E,E,80,N],[18,R[810],E,E,80,N],[18,"GATE_2",E,E,80,N],[18,R[811],E,E,80,N],[18,"OTHER_2",E,E,80,N],[18,"OTHER_3",E,E,80,N],[18,"OTHER_6",E,E,80,N],[18,"OTHER_7",E,E,80,N],[11,"empty",E,R[106],80,[[],[R[609]]]],[11,"all",E,R[107],80,[[],[R[609]]]],[11,"bits",E,R[108],80,[[["self"]],["u8"]]],[11,R[109],E,R[110],80,[[["u8"]],[[R[5],[R[609]]],[R[609]]]]],[11,R[111],E,R[112],80,[[["u8"]],[R[609]]]],[11,R[147],E,R[113],80,[[["self"]],["bool"]]],[11,"is_all",E,R[114],80,[[["self"]],["bool"]]],[11,R[115],E,R[116],80,[[["self"],[R[609]]],["bool"]]],[11,R[148],E,R[117],80,[[["self"],[R[609]]],["bool"]]],[11,"insert",E,R[118],80,[[["self"],[R[609]]]]],[11,"remove",E,R[119],80,[[["self"],[R[609]]]]],[11,"toggle",E,R[120],80,[[["self"],[R[609]]]]],[11,"set",E,R[121],80,[[["self"],[R[609]],["bool"]]]],[11,"write_reload_value",E,"Writes a reload value in lobyte/hibyte access mode",81,[[["self"],[R[829]],["u16"]]]],[11,"init",E,"Sets mode #0 for Channel 2.",82,[[["pitports"]],["pitchannel2"]]],[11,"start_countdown",E,"Sets the countdown reset value by writing to channel 2…",82,[[["self"],["u16"]]]],[11,"is_countdown_finished",E,"Checks if the countdown is finished",82,[[["self"]],["bool"]]],[11,"wait_countdown_is_finished",E,"Waits until countdown is finished",82,[[["self"]]]],[11,R[610],E,R[611],82,[[["self"],[R[4]]]]],[0,"rs232",R[605],"RS-232 serial port driver",N,N],[3,"ComPort",R[750],"The base IO port of a COM",N,N],[12,"0",E,E,84,N],[3,R[886],E,"A foreground and a background combination",N,N],[12,"fg",E,"foreground color",85,N],[12,"bg",E,"background color",85,N],[3,R[887],E,"A COM output. Wraps the IO ports of this COM, and provides…",N,N],[12,"data_port",E,"The DATA IO port of this COM",86,N],[12,R[1639],E,"The STATUS IO port of this COM",86,N],[3,R[889],E,R[612],N,N],[4,R[888],E,"The possible colors for serial",N,N],[13,"Black",E,E,87,N],[13,"Red",E,E,87,N],[13,"Green",E,E,87,N],[13,"Yellow",E,E,87,N],[13,"Blue",E,E,87,N],[13,"Magenta",E,E,87,N],[13,"Cyan",E,E,87,N],[13,"LightGray",E,E,87,N],[13,"Default",E,E,87,N],[13,"DarkGray",E,E,87,N],[13,"LightRed",E,E,87,N],[13,"LightGreen",E,E,87,N],[13,"LightYellow",E,E,87,N],[13,"LightBlue",E,E,87,N],[13,"LightMagenta",E,E,87,N],[13,"LightCyan",E,E,87,N],[13,"White",E,E,87,N],[7,"G_SERIAL",E,"The serial logger.",N,N],[17,"COM1",E,"COM1: I/O port 0x3F8, IRQ 4",N,N],[17,"COM2",E,"COM2: I/O port 0x2F8, IRQ 3",N,N],[17,"COM3",E,"COM3: I/O port 0x3E8, IRQ 4",N,N],[17,"COM4",E,"COM4: I/O port 0x2E8, IRQ 3",N,N],[11,"fg",E,"Creates a color attribute with `fg` foreground and default…",85,[[[R[613]]],[R[614]]]],[11,"fg_bg",E,"Creates a color attribute with `fg` foreground and `bg`…",85,[[[R[613]]],[R[614]]]],[11,R[49],E,"Creates a color attribute with default foreground and…",85,[[],[R[614]]]],[11,"new",E,"Creates a COM port from it's base IO address.",86,[[["comport"]],[["serialinternal",["pio"]],["pio",["u8"]]]]],[11,"send_string",E,"Outputs a string to this COM.",86,[[["self"],["str"]]]],[11,R[658],E,"Re-take the lock protecting multiple access to the device.",88,[[["self"]]]],[0,"lapic",R[605],"Local APIC driver.",N,N],[3,R[890],R[751],"Local APIC Registers are 128-bit wide, with the 32 lower…",N,N],[12,"0",E,E,89,N],[12,"1",E,E,89,N],[3,R[891],E,"The version and associated metadata of a Local APIC are…",N,N],[12,"0",E,E,90,N],[3,R[892],E,"Allows software to specify the manner in which the local…",N,N],[12,"0",E,E,91,N],[3,R[893],E,"See chapter 10.9: Spurious Interrupt",N,N],[12,"0",E,E,92,N],[3,"Error",E,"Contains the set of errors the LAPIC has encountered while…",N,N],[12,"bits",E,E,93,N],[3,R[894],E,"Local APIC Register structure.",N,N],[12,"reserved_000",E,E,94,N],[12,"reserved_010",E,E,94,N],[12,R[633],E,R[634],94,N],[12,"local_apic_version",E,"Can be used to identify the APIC version. In addition, the…",94,N],[12,"reserved_040",E,E,94,N],[12,"reserved_050",E,E,94,N],[12,"reserved_060",E,E,94,N],[12,"reserved_070",E,E,94,N],[12,"task_priority",E,"The task priority allows software to set a priority…",94,N],[12,"arbitration_priority",E,"Priority used for lowest-priority arbitration.",94,N],[12,"processor_priority",E,"The processor-priority class determines the priority…",94,N],[12,"end_of_interrupt",E,"For all interrupts except those delivered with the NMI,…",94,N],[12,"remote_read",E,"Only available on Nahalem CPUs. Undocumented...",94,N],[12,"logical_destination",E,"Upon receiving an interrupt that was sent using logical…",94,N],[12,"destination_format",E,"See chapter 10.6.2.2: Logical Destination Mode",94,N],[12,"spurious_interrupt_vector",E,"A special situation may occur when a processor raises its…",94,N],[12,"in_service0",E,R[615],94,N],[12,"in_service1",E,R[615],94,N],[12,"in_service2",E,R[615],94,N],[12,"in_service3",E,R[615],94,N],[12,"in_service4",E,R[615],94,N],[12,"in_service5",E,R[615],94,N],[12,"in_service6",E,R[615],94,N],[12,"in_service7",E,R[615],94,N],[12,"trigger_mode0",E,R[616],94,N],[12,"trigger_mode1",E,R[616],94,N],[12,"trigger_mode2",E,R[616],94,N],[12,"trigger_mode3",E,R[616],94,N],[12,"trigger_mode4",E,R[616],94,N],[12,"trigger_mode5",E,R[616],94,N],[12,"trigger_mode6",E,R[616],94,N],[12,"trigger_mode7",E,R[616],94,N],[12,"interrupt_request0",E,R[617],94,N],[12,"interrupt_request1",E,R[617],94,N],[12,"interrupt_request2",E,R[617],94,N],[12,"interrupt_request3",E,R[617],94,N],[12,"interrupt_request4",E,R[617],94,N],[12,"interrupt_request5",E,R[617],94,N],[12,"interrupt_request6",E,R[617],94,N],[12,"interrupt_request7",E,R[617],94,N],[12,"error_status",E,"The local APIC records errors detected during interrupt…",94,N],[12,"reserved_290",E,E,94,N],[12,"reserved_2a0",E,E,94,N],[12,"reserved_2b0",E,E,94,N],[12,"reserved_2c0",E,E,94,N],[12,"reserved_2d0",E,E,94,N],[12,"reserved_2e0",E,E,94,N],[12,"lvt_corrected_machine_interrupt",E,"Specifies interrupt delivery when an overflow condition of…",94,N],[12,"interrupt_command_register0",E,R[618],94,N],[12,"interrupt_command_register1",E,R[618],94,N],[12,"lvt_timer",E,"Specifies interrupt delivery when the APIC timer signals…",94,N],[12,"lvt_thermal_sensor",E,"Specifies interrupt delivery when the thermal sensor…",94,N],[12,"lvt_performance_monitoring_counter",E,"Specifies interrupt delivery when a performance counter…",94,N],[12,"lvt_lint0",E,R[619],94,N],[12,"lvt_lint1",E,R[619],94,N],[12,"lvt_error",E,"Specifies interrupt delivery when the APIC detects an…",94,N],[12,"initial_count",E,"Initial count used by the APIC Timer.",94,N],[12,"current_count",E,"Current count used by the APIC Timer.",94,N],[12,"reserved_3a0",E,E,94,N],[12,"reserved_3b0",E,E,94,N],[12,"reserved_3c0",E,E,94,N],[12,"reserved_3d0",E,E,94,N],[12,"divide_configuration",E,"Divide configuration used by the APIC timer.",94,N],[12,"reserved_3f0",E,E,94,N],[3,R[895],E,"LocalApic driver.",N,N],[12,R[655],E,"Pointer to the LocalApic registers.",95,N],[4,R[636],E,R[637],N,N],[13,"Fixed",E,"Delivers the interrupt specified in the vector field.",96,N],[13,"SMI",E,"Delivers an SMI interrupt to the processor core through…",96,N],[13,"NMI",E,"Delivers an NMI interrupt to the processor. The vector…",96,N],[13,"INIT",E,"Delivers an INIT request to the processor core, which…",96,N],[13,"ExtINT",E,"Causes the processor to respond to the interrupt as if the…",96,N],[13,"Unknown",E,R[638],96,N],[4,R[896],E,"Selects the Timer Mode of the LVT Timer.",N,N],[13,"OneShot",E,"One-shot mode using a count-down value.",97,N],[13,"Periodic",E,"Periodic mode reloading a count-down value.",97,N],[13,"TscDeadline",E,"TSC-Deadline mode using absolute target value in…",97,N],[13,"Reserved",E,"Reserved value, might be used in later revision.",97,N],[17,"_",E,E,N,N],[11,"version",E,"The version numbers of the local APIC:",90,[[["self"]],["u32"]]],[11,"max_lvt_entry",E,"Shows the number of LVT entries minus 1.",90,[[["self"]],["u32"]]],[11,"can_suppress_eoi_broadcast",E,"Indicates whether software can inhibit the broadcast of…",90,[[["self"]],["bool"]]],[11,"vector",E,R[620],91,[[["self"]],["u32"]]],[11,"set_vector",E,R[620],91,[[["self"],["u32"]]]],[11,R[640],E,R[621],91,[[["self"]],[R[622]]]],[11,R[641],E,R[621],91,[[["self"],[R[622]]]]],[11,R[644],E,"Indicates the interrupt delivery status, as follows:",91,[[["self"]],["bool"]]],[11,"polarity",E,R[623],91,[[["self"]],["bool"]]],[11,"set_polarity",E,R[623],91,[[["self"],["bool"]]]],[11,R[646],E,"For fixed mode, level-triggered interrupts; this flag is…",91,[[["self"]],["bool"]]],[11,R[635],E,R[624],91,[[["self"]],["bool"]]],[11,R[647],E,R[624],91,[[["self"],["bool"]]]],[11,"masked",E,R[625],91,[[["self"]],["bool"]]],[11,"set_masked",E,R[625],91,[[["self"],["bool"]]]],[11,"timer_mode",E,R[626],91,[[["self"]],[R[627]]]],[11,"set_timer_mode",E,R[626],91,[[["self"],[R[627]]]]],[11,"spurious_vector",E,R[628],92,[[["self"]],["u32"]]],[11,"set_spurious_vector",E,R[628],92,[[["self"],["u32"]]]],[11,"apic_software_enable",E,R[629],92,[[["self"]],["bool"]]],[11,"set_apic_software_enable",E,R[629],92,[[["self"],["bool"]]]],[11,"focus_processor_checking",E,"Determines if focus processor checking is enabled when…",92,[[["self"]],["bool"]]],[11,"suppress_eoi_broadcast",E,R[630],92,[[["self"]],["bool"]]],[11,"set_suppress_eoi_broadcast",E,R[630],92,[[["self"],["bool"]]]],[18,R[812],E,R[631],93,N],[18,R[813],E,R[631],93,N],[18,R[814],E,"Set when the local APIC detects that a message it sent was…",93,N],[18,R[815],E,"Set when the local APIC detects that the message it…",93,N],[18,R[816],E,"Set when the local APIC detects an attempt to send an IPI…",93,N],[18,R[817],E,R[632],93,N],[18,R[818],E,R[632],93,N],[18,R[819],E,"Set when the local APIC is in xAPIC mode and software…",93,N],[11,"empty",E,R[106],93,[[],["error"]]],[11,"all",E,R[107],93,[[],["error"]]],[11,"bits",E,R[108],93,[[["self"]],["u32"]]],[11,R[109],E,R[110],93,[[["u32"]],[[R[5],["error"]],["error"]]]],[11,R[111],E,R[112],93,[[["u32"]],["error"]]],[11,R[147],E,R[113],93,[[["self"]],["bool"]]],[11,"is_all",E,R[114],93,[[["self"]],["bool"]]],[11,R[115],E,R[116],93,[[["self"],["error"]],["bool"]]],[11,R[148],E,R[117],93,[[["self"],["error"]],["bool"]]],[11,"insert",E,R[118],93,[[["self"],["error"]]]],[11,"remove",E,R[119],93,[[["self"],["error"]]]],[11,"toggle",E,R[120],93,[[["self"],["error"]]]],[11,"set",E,R[121],93,[[["self"],["error"],["bool"]]]],[11,"new",E,"Create a new LocalApic at the specified address.",95,[[[R[74]]],["self"]]],[11,"enable",E,"10.4.3 Enabling or Disabling the Local APIC",95,[[["self"]]]],[11,R[606],E,"Acknowledge the last interrupt, signaling an end of…",95,[[["self"]]]],[11,R[633],E,R[634],95,[[["self"]],["u32"]]],[11,"in_service",E,"The ISR contains interrupt requests that have been…",95,[[["self"]]]],[11,R[635],E,"The trigger mode register (TMR) indicates the trigger mode…",95,[[["self"]]]],[11,"interrupt_request_register",E,"The IRR contains the active interrupt requests that have…",95,[[["self"]]]],[11,"send_interrupt_command",E,"Sends an IPI.",95,[[["self"],["u64"]]]],[0,"ioapic",R[605],"82093AA I/O Advanced Programmable Interrupt Controller…",N,N],[3,R[897],R[753],"Internal IO-APIC registers.",N,N],[12,"addr_reg",E,"Address register.",98,N],[12,"padding",E,"12 bytes of padding.",98,N],[12,"data_reg",E,"Data register.",98,N],[3,"IoApic",E,"See module level documentation",N,N],[12,R[655],E,"Pointer to the IO-APIC device registers.",99,N],[12,R[651],E,R[652],99,N],[12,R[653],E,"Number of entries this IO-APIC device can handled. Cached.",99,N],[3,R[898],E,"Description of a Redirection Entry in the IO-APIC. Unlike…",N,N],[12,"0",E,E,100,N],[4,R[636],E,R[637],N,N],[13,"Fixed",E,"Deliver the signal on the INTR signal of all processor…",101,N],[13,"LowestPriority",E,"Deliver the signal on the INTR signal of the processor…",101,N],[13,"SMI",E,"System Management Interrupt. A delivery mode equal to SMI…",101,N],[13,"NMI",E,"Deliver the signal on the NMI signal of all processor…",101,N],[13,"INIT",E,"Deliver the signal to all processor cores listed in the…",101,N],[13,"ExtINT",E,"Deliver the signal to the INTR signal of all processor…",101,N],[13,"Unknown",E,R[638],101,N],[11,"interrupt_vector",E,R[639],100,[[["self"]],["u64"]]],[11,"set_interrupt_vector",E,R[639],100,[[["self"],["u64"]]]],[11,R[640],E,R[642],100,[[["self"]],[R[622]]]],[11,R[641],E,R[642],100,[[["self"],[R[622]]]]],[11,"destination_mode",E,R[643],100,[[["self"]],["bool"]]],[11,"set_destination_mode",E,R[643],100,[[["self"],["bool"]]]],[11,R[644],E,"The Delivery Status bit contains the current status of the…",100,[[["self"]],["bool"]]],[11,"interrupt_input_pin_polarity",E,R[645],100,[[["self"]],["bool"]]],[11,"set_interrupt_input_pin_polarity",E,R[645],100,[[["self"],["bool"]]]],[11,R[646],E,"This bit is used for level triggered interrupts. Its…",100,[[["self"]],["bool"]]],[11,R[635],E,R[648],100,[[["self"]],["bool"]]],[11,R[647],E,R[648],100,[[["self"],["bool"]]]],[11,"interrupt_mask",E,R[649],100,[[["self"]],["bool"]]],[11,"set_interrupt_mask",E,R[649],100,[[["self"],["bool"]]]],[11,"destination_field",E,R[650],100,[[["self"]],["u64"]]],[11,"set_destination_field",E,R[650],100,[[["self"],["u64"]]]],[11,"new",E,"Creates a new IO-APIC device at the given Physical…",99,[[["u32"],[R[74]]],["ioapic"]]],[11,"read",E,"Reads an u32 at the specified DWORD offset.",99,[[["self"],["u32"]],["u32"]]],[11,"write",E,"Writes an u32 at the specified DWORD offset.",99,[[["self"],["u32"]]]],[11,"ioapic_id",E,"This register contains the 4-bit APIC ID. The ID serves as…",99,[[["self"]],["u32"]]],[11,"version",E,"Gets the version number of this IO-APIC device. This is…",99,[[["self"]],["u8"]]],[11,R[651],E,R[652],99,[[["self"]],["u32"]]],[11,R[653],E,"Gets the number of redirection entries in the I/O…",99,[[["self"]],["u32"]]],[11,"arbitration_id",E,"Gets the bus arbitration priority for the IOAPIC. This…",99,[[["self"]],["u32"]]],[11,"redirection_entry",E,"Gets the [RedirectionEntry] configuration of the specified…",99,[[["self"],["u8"]],[R[654]]]],[11,"set_redirection_entry",E,"Configure the given pin with a [RedirectionEntry].",99,[[["self"],[R[654]],["u8"]]]],[0,"sync",R[434],"Synchronization primitives used by the kernel",N,N],[3,"SpinLock",R[659],"This type provides MUTual EXclusion based on spinning.",N,N],[12,"lock",E,E,102,N],[12,"data",E,E,102,N],[3,R[899],E,"A guard to which the protected data can be accessed",N,N],[12,"lock",E,E,103,N],[12,"data",E,E,103,N],[3,R[900],E,"A reader-writer lock",N,N],[12,"lock",E,E,104,N],[12,"data",E,E,104,N],[3,R[901],E,"A guard from which the protected data can be read",N,N],[12,"lock",E,E,105,N],[12,"data",E,E,105,N],[3,R[902],E,"A guard to which the protected data can be written",N,N],[12,"lock",E,E,106,N],[12,"data",E,E,106,N],[12,"_invariant",E,E,106,N],[3,"Once",E,"A synchronization primitive which can be used to run a…",N,N],[12,"state",E,E,107,N],[12,"data",E,E,107,N],[0,"spin_lock_irq",E,"Lock disabling IRQs while held",N,N],[3,R[903],R[754],"SpinLock that disables IRQ.",N,N],[12,R[655],E,"SpinLock we wrap.",108,N],[3,R[904],E,"The SpinLockIrq lock guard.",N,N],[12,"0",E,E,109,N],[12,"1",E,E,109,N],[5,"permanently_disable_interrupts",E,"Permanently disables the interrupts. Forever.",N,[[]]],[7,"INTERRUPT_DISARM",E,"Boolean to [permanently_disable_interrupts].",N,N],[11,"new",E,"Creates a new spinlockirq wrapping the supplied data.",108,[[[T]],["spinlockirq"]]],[11,R[660],E,"Consumes this SpinLockIRQ, returning the underlying data.",108,[[],[T]]],[11,"lock",E,R[657],108,[[["self"]],[R[656]]]],[11,R[662],E,R[657],108,[[["self"]],[[R[5],[R[656]]],[R[656]]]]],[11,R[658],E,"Force unlocks the lock.",108,[[["self"]]]],[0,"mutex",R[659],"Preemptive Mutex",N,N],[3,"Mutex",R[755],"A mutual exclusion primitive useful for protecting shared…",N,N],[12,"data",E,"The data that we're protecting.",110,N],[12,"inner",E,"The struct responsible for arbitrating accesses to `.data`.",110,N],[3,R[905],E,"The type responsible of actually performing the locking of…",N,N],[12,"spin_lock",E,"A spin lock arbitrating accesses to the mutex's state.",111,N],[3,R[906],E,"The bookkeeping of a Mutex. Knows the current owner, and…",N,N],[12,"owner",E,"The owner of this Mutex. None means free.",112,N],[12,"waiters",E,"Queue of threads waiting on this mutex.",112,N],[3,R[907],E,"An RAII implementation of a \"scoped lock\" of a mutex. When…",N,N],[12,"__lock",E,"Reference to the Mutex we'll unlock when dropped.",113,N],[12,"__phantom",E,"Raw pointer just to make MutexGuard !Send.",113,N],[6,"TryLockResult",E,"A type alias for the result of a nonblocking locking method.",N,N],[11,"new",E,"Creates a new mutex in an unlocked state ready for use.",110,[[[T]],["mutex"]]],[11,R[660],E,R[841],110,[[],[T]]],[11,"lock",E,"Acquires a mutex, blocking the current kernel thread until…",110,[[["self"]],[R[661]]]],[11,R[662],E,"Attempts to acquire this lock.",110,[[["self"]],[["trylockresult",[R[661]]],[R[661]]]]],[11,"get_mut",E,"Returns a mutable reference to the underlying data.",110,[[["self"]],[T]]],[11,"new",E,"Create an MutexGuard.",113,[[["mutex"]],[R[661]]]],[11,R[662],E,"Try to obtain the mutex, without preempting.",111,[[["self"]],["bool"]]],[11,"raw_lock",E,"Locks the mutex blocking the current thread until it is…",111,[[["self"]]]],[11,"raw_unlock",E,"Unlocks the mutex.",111,[[["self"]]]],[8,"Lock",R[659],"Abstraction around various kind of locks.",N,N],[10,"lock",E,"Locks the lock until the returned guard is dropped. The…",114,[[["self"]],["guard"]]],[0,"timer",R[434],"The core timing of Sunrise.",N,N],[3,R[908],R[756],"This represent the information to derive all internal…",N,N],[12,"oscillator_frequency",E,"The frequency of the oscillator used as primary source of…",115,N],[12,R[663],E,"The IRQ period used on this timer in nanoseconds.",115,N],[12,"irq_number",E,"The IRQ number that the timer use.",115,N],[3,"IRQTimer",E,"A stream of event that trigger every `ns` amount of…",N,N],[12,"every_ns",E,"Approximation of number of ns spent between triggers.",116,N],[12,R[663],E,"IRQ event period in nanoseconds.",116,N],[12,"parent_event",E,"The IRQ that we wait on.",116,N],[12,"reset_value",E,"The reset value of `.countdown_value`.",116,N],[12,"countdown_value",E,"Number of IRQ triggers to wait for. Derived from…",116,N],[5,"set_kernel_timer_info",E,"Set the information required for Sunrise timer to work.",N,[[["u64"],["u8"]]]],[5,"wait_ns",E,"Returns a stream of event that trigger every `ns` amount…",N,[[[R[4]]]]],[7,"KERNEL_TIMER_INFO",E,"Stores the information needed for Sunrise's internal timing.",N,N],[11,"new",E,"Create a new IRQ timer instance from the time to wait (in…",116,[[["u64"],[R[4]],["u8"]],["self"]]],[0,"process",R[434],"Process",N,N],[3,R[671],R[670],R[672],N,N],[12,R[673],E,R[674],117,N],[12,R[675],E,R[676],117,N],[12,"ioports",E,R[677],117,N],[3,R[909],E,"Data related to the (user-visible) state the current…",N,N],[12,"signaled",E,"Whether the process is currently in a signaled state. Set…",118,N],[12,"state",E,"The current state of the process.",118,N],[12,R[664],E,"Threads waiting on this process to get signaled.",118,N],[12,"thread_maternity",E,"An array of the created but not yet started threads.",118,N],[3,R[910],E,"The struct representing a process. There's one for every…",N,N],[12,"pid",E,"The unique id of this process.",119,N],[12,"name",E,"A name for this process.",119,N],[12,"pmemory",E,"The memory view of this process. Shared among the threads.",119,N],[12,"phandles",E,"The handles of this process. Shared among the threads.",119,N],[12,"threads",E,"The threads of this process. A ProcessStruct with no…",119,N],[12,"entrypoint",E,"The entrypoint of the main thread.",119,N],[12,R[669],E,"Permissions of this process.",119,N],[12,"state",E,R[974],119,N],[12,"tls_manager",E,"Tracks used and free allocated Thread Local Storage…",119,N],[3,R[911],E,"The struct representing a thread. A process may own…",N,N],[12,"state",E,"The state of this thread.",120,N],[12,"kstack",E,"The kernel stack it uses for handling syscalls/irqs.",120,N],[12,"hwcontext",E,"The saved hardware context, for getting it running again…",120,N],[12,"process",E,"The process that this thread belongs to.",120,N],[12,"tls_region",E,"Pointer to the Thread Local Storage region of this thread.",120,N],[12,"tls_elf",E,"Userspace's elf `Thread Pointer`.",120,N],[12,"userspace_hwcontext",E,"Userspace hardware context of this thread.",120,N],[12,"state_event",E,"Thread state event",120,N],[3,R[912],E,"The underlying shared object of a [Weak].",N,N],[12,R[664],E,"List of threads waiting on this thread to exit. When this…",121,N],[3,R[913],E,"Holds the table associating userspace handle numbers to a…",N,N],[12,"table",E,"Internal mapping from a handle number to a Kernel Object.",122,N],[12,"counter",E,"The next handle's ID.",122,N],[4,"Handle",E,"A handle to a userspace-accessible resource.",N,N],[13,"InterruptEvent",E,"A special ReadableEvent that is triggered automatically…",123,N],[13,R[665],E,"An event on which we can wait, triggered by a WritableEvent.",123,N],[13,R[666],E,"Trigger for an associated ReadableEvent.",123,N],[13,R[710],E,"The server side of an IPC port. See [crate::ipc::port] for…",123,N],[13,R[709],E,"The client side of an IPC port. See [crate::ipc::port] for…",123,N],[13,R[703],E,"The server side of an IPC session. See…",123,N],[13,R[702],E,"The client side of an IPC session. See…",123,N],[13,"Thread",E,"A thread.",123,N],[13,"Process",E,"A process.",123,N],[13,R[329],E,"A shared memory region. The handle holds on to the…",123,N],[4,R[914],E,"The state of a thread.",N,N],[13,"Paused",E,"Not in the scheduled queue, waiting for an event.",124,N],[13,"Running",E,"Currently on the CPU.",124,N],[13,"TerminationPending",E,"Dying, will be unscheduled and dropped at syscall boundary.",124,N],[13,"Scheduled",E,"Scheduled to be running.",124,N],[0,R[1294],E,"TLS manager",N,N],[3,"TLSPage",R[757],"Manages a page containing 8 TLS",N,N],[12,"page_address",E,"Address of the page, in UserLand.",125,N],[12,"usage",E,"Bitmap indicating if the TLS is in use (`1`) or free (`0`).",125,N],[3,R[915],E,"TLS allocator",N,N],[12,"tls_pages",E,"Vec of tracked pages. When all slots are occupied, we…",126,N],[17,"_",E,E,N,N],[11,"new",E,"Allocates a new page holing 8 TLS.",125,[[[R[668]]],[[R[268]],[R[23],[R[268]]]]]],[11,R[667],E,"Finds an available slot in the TLSPage, bzero it, marks it…",125,[[["self"]],[[R[5],[R[77]]],[R[77]]]]],[11,"free_tls",E,"Marks a TLS in this TLSPage as free so it can be used by…",125,[[["self"],[R[77]]]]],[11,R[667],E,"Allocates a new TLS.",126,[[["self"],[R[668]]],[[R[77]],[R[268]],[R[23],[R[77],R[268]]]]]],[11,"free_tls",E,"Mark this TLS as free, so it can be re-used by future…",126,[[["self"],[R[77]]]]],[0,R[669],R[670],"Process Capability handling",N,N],[3,R[671],R[758],R[672],N,N],[12,R[673],E,R[674],117,N],[12,R[675],E,R[676],117,N],[12,"ioports",E,R[677],117,N],[3,R[916],E,"Wrapper around a bitfield that only prints the indices of…",N,N],[12,"0",E,E,127,N],[17,"KERNEL_FLAGS",E,"Allowed CPUID and thread priorities.",N,N],[17,"SYSCALL_MASK",E,"Shifted mask of allowed syscalls.",N,N],[17,"MAP_IO_OR_NORMAL_RANGE",E,"Map an IO or physical memory page into process address…",N,N],[17,"MAP_NORMAL_PAGE",E,"Map a normal page.",N,N],[17,"INTERRUPT_PAIR",E,"Allow creating an interrupt for the given IRQ pair.",N,N],[17,"APPLICATION_TYPE",E,"Type of application (sysmodule, applet, application)",N,N],[17,"KERNEL_RELEASE_VERSION",E,"Minimum kernel release.",N,N],[17,"HANDLE_TABLE_SIZE",E,"Max amount of handle for the process.",N,N],[17,"DEBUG_FLAGS",E,"Flags allowing app to debug or be debugged.",N,N],[17,"IO_PORTS_ALLOWED",E,"IOPorts the process is allowed to talk to",N,N],[17,"MAX_SVC",E,"The highest defined svc.",N,N],[17,"KACS_NO_DUPLICATES",E,"Mask of kernel capabilities that cannot appear twice in a…",N,N],[11,"parse_kcaps",R[670],"Parse the kernel capabilities, in the NPDM format. More…",117,[[],[[R[678]],[R[268]],[R[23],[R[678],R[268]]]]]],[7,"NEXT_PROCESS_ID",E,"Next available PID.",N,N],[11,"set_state",E,"Sets the state to the given new state, and signal the…",118,[[["self"],[R[311]]]]],[11,"signal",E,"Set the process to the signaled state, and wake up any…",118,[[["self"]]]],[11,"signal",E,"Signals the event, waking up any thread waiting on its…",121,[[["self"]]]],[11,"as_waitable",E,"Gets the handle as a [Waitable], or return a…",123,[[["self"]],[[R[23],[R[679],R[438]]],[R[438]],[R[679]]]]],[11,"as_client_port",E,"Casts the handle as a [ClientPort], or returns a…",123,[[["self"]],[[R[23],[R[680],R[438]]],[R[680]],[R[438]]]]],[11,"as_server_session",E,"Casts the handle as a [ServerSession], or returns a…",123,[[["self"]],[[R[681]],[R[23],[R[681],R[438]]],[R[438]]]]],[11,"as_client_session",E,"Casts the handle as a [ClientSession], or returns a…",123,[[["self"]],[[R[23],[R[682],R[438]]],[R[682]],[R[438]]]]],[11,"as_thread_handle",E,"Casts the handle as a Weak<[ThreadStruct]>, or returns a…",123,[[["self"]],[[R[23],["weak",R[438]]],[R[438]],["weak",[R[503]]]]]],[11,"as_process",E,"Casts the handle as an Arc<[ProcessStruct]>, or returns a…",123,[[["self"]],[["arc",[R[687]]],[R[438]],[R[23],["arc",R[438]]]]]],[11,"as_writable_event",E,"Casts the handle as an Arc<[WritableEvent]> if the handle…",123,[[["self"]],[[R[438]],[R[683]],[R[23],[R[683],R[438]]]]]],[11,"as_readable_event",E,"Casts the handle as an Arc<[ReadableEvent]>, or returns a…",123,[[["self"]],[[R[23],[R[684],R[438]]],[R[684]],[R[438]]]]],[11,"as_shared_memory",E,"Casts the handle as an…",123,[[["self"]],[[R[438]],["arc",[R[361]]],[R[23],["arc",R[438]]]]]],[11,"add_handle",E,"Add a handle to the handle table, returning the userspace…",122,[[["self"],["handle"],["arc",["handle"]]],["u32"]]],[11,"get_handle",E,R[685],122,[[["self"],["u32"]],[[R[438]],[R[23],["arc",R[438]]],["arc",["handle"]]]]],[11,"get_handle_no_alias",E,R[685],122,[[["self"],["u32"]],[[R[438]],[R[23],["arc",R[438]]],["arc",["handle"]]]]],[11,"delete_handle",E,"Deletes the mapping from the given userspace handle…",122,[[["self"],["u32"]],[[R[438]],[R[23],["arc",R[438]]],["arc",["handle"]]]]],[11,"from_primitive",E,"ThreadState is stored in the ThreadStruct as an…",124,[[[R[4]]],[R[822]]]],[11,"new",E,"Creates a new process.",119,[[[R[686]],[R[5]]],[[R[268]],[R[23],["arc",R[268]]],["arc",[R[687]]]]]],[11,"start",E,"Creates the initial thread, allocates the stack, and…",119,[[["u32"],[R[4]],["arc"]],[[R[23],[R[438]]],[R[438]]]]],[11,"state",E,"Gets the state of this process.",119,[[["self"]],[R[311]]]],[11,R[439],E,"Clears the signaled state of this process.",119,[[["self"]],[[R[23],[R[268]]],[R[268]]]]],[11,R[690],E,"Creates the very first process at boot. Called internally…",119,[[],[R[687]]]],[11,"kill_current_process",E,"Kills the current process by killing all of its threads.",119,[[]]],[11,"new",E,"Creates a new thread.",120,[[[R[77]],[R[4]],["arc"],[R[5],[R[4]]]],[[R[268]],[R[23],["weak",R[268]]],["weak"]]]],[11,"new_locked",E,"See [ThreadStruct::new]. Takes the ProcessStruct.data…",120,[[[R[77]],[R[4]],[R[688]],["arc"],[R[5],[R[4]]]],[[R[268]],[R[23],["weak",R[268]]],["weak"]]]],[11,"create_first_thread",E,"Creates the very first process and thread at boot.",120,[[],[["arc",[R[503]]],[R[503]]]]],[11,"start_locked",E,"See [ThreadStruct::start]. Takes the ProcessStruct.data…",120,[[[R[688]],["arc"]],[[R[23],[R[268]]],[R[268]]]]],[11,"start",E,"Takes a reference to a thread, removes it from the…",120,[[["weak"]],[[R[23],[R[268]]],[R[268]]]]],[11,"exit",E,"Sets the thread to the `Exited` state.",120,[[["arc"]]]],[0,"scheduler",R[434],"The Completly Unfair Scheduler",N,N],[5,"try_get_current_thread","sunrise_kernel::scheduler","Gets the current ThreadStruct, incrementing its refcount.…",N,[[],[[R[5],["arc"]],["arc",[R[503]]]]]],[5,"get_current_thread",E,"Gets the current ThreadStruct, incrementing its refcount.",N,[[],[["arc",[R[503]]],[R[503]]]]],[5,"try_get_current_process",E,R[689],N,[[],[["arc",[R[687]]],[R[5],["arc"]]]]],[5,"get_current_process",E,R[689],N,[[],[[R[687]],["arc",[R[687]]]]]],[5,"set_current_thread",E,"Sets the current ThreadStruct.",N,[[["fnonce"],["arc",[R[503]]],[R[503]]],["r"]]],[5,"add_to_schedule_queue",E,"Adds a thread at the end of the schedule queue, and…",N,[[["arc",[R[503]]],[R[503]]]]],[5,"is_in_schedule_queue",E,"Checks if a thread is already either in the schedule queue…",N,[[[R[656]],["arc"]],["bool"]]],[5,"unschedule",E,"Removes the current thread from the schedule queue, and…",N,[[["lock"],["guard"]],[[R[23],[R[438]]],[R[438]]]]],[5,R[690],E,"Creates the very first process at boot. The created…",N,[[]]],[5,"schedule",E,"Performs a process switch.",N,[[]]],[5,"find_next_thread_to_run",E,"Parses the queue to find the first unlocked process.…",N,[[],[[R[4]],[R[5],[R[4]]]]]],[5,"internal_schedule",E,"Internal impl of the process switch, used by schedule and…",N,[[["lock"],["bool"]],["guard"]]],[5,"scheduler_first_schedule",E,"The function called when a thread was scheduled for the…",N,[[["fnonce"],["arc",[R[503]]],[R[503]]]]],[7,"CURRENT_THREAD",E,"An Arc to the currently running thread.",N,N],[7,"SCHEDULE_QUEUE",E,"The schedule queue",N,N],[0,"mem",R[434],"Basic functionality for dealing with memory.",N,N],[3,R[243],R[759],R[691],N,N],[12,"0",E,E,128,N],[3,R[244],E,R[692],N,N],[12,"0",E,E,129,N],[3,R[917],E,"A pointer to read-only userspace memory. Prevents…",N,N],[12,"0",E,E,130,N],[3,R[918],E,"A pointer to read-write userspace memory. Prevents…",N,N],[12,"0",E,E,131,N],[3,"FatPtr",E,"Internal rust representation of a DST pointer.",N,N],[12,"data",E,"A pointer to the underlying slice.",132,N],[12,"len",E,"The length of the slice, in number of elements.",132,N],[5,R[693],E,R[694],N,[[[R[4]]],[R[4]]]],[5,R[695],E,R[696],N,[[[R[4]]],[R[4]]]],[5,"count_pages",E,"Counts the number of pages `size` takes",N,[[[R[4]]],[R[4]]]],[11,"addr",E,R[73],129,[[],[R[4]]]],[11,"addr",E,R[73],128,[[],[R[4]]]],[11,R[697],E,"Tries to add an offset to a PhysicalAddress, returning…",128,[[[R[4]]],[[R[5],[R[74]]],[R[74]]]]],[11,R[698],E,R[699],128,[[[R[4]]],[[R[23],[R[268]]],[R[268]]]]],[11,"floor",E,R[75],128,[[],[R[74]]]],[11,"ceil",E,R[76],128,[[],[R[74]]]],[11,R[697],E,"Tries to add an offset to a VirtualAddress, returning None…",129,[[[R[4]]],[[R[5],[R[77]]],[R[77]]]]],[11,R[698],E,R[699],129,[[[R[4]]],[[R[23],[R[268]]],[R[268]]]]],[11,"floor",E,R[75],129,[[],[R[77]]]],[11,"ceil",E,R[76],129,[[],[R[77]]]],[11,R[1272],E,"Forms a UserSpacePtr slice from a pointer and a length.…",130,[[[R[4]]],[R[561]]]],[11,R[1273],E,"Forms a UserSpacePtrMut slice from a pointer and a length.…",131,[[[R[4]]],[R[562]]]],[0,"ipc",R[434],"IPC primitives",N,N],[3,R[713],R[706],E,N,N],[12,R[60],E,E,133,N],[5,"create_named_port",E,R[1237],N,[[["u32"]],[[R[700]],[R[23],[R[700],R[438]]],[R[438]]]]],[5,R[701],E,"Connects to a named port.",N,[[],[[R[23],[R[682],R[438]]],[R[682]],[R[438]]]]],[0,"session",E,"IPC Sessions",N,N],[3,R[919],R[760],"Wrapper around the currently active session and the…",N,N],[12,"active_request",E,"The request currently being serviced. Sessions are…",134,N],[12,"incoming_requests",E,"Pending Requests.",134,N],[3,"Session",E,"Shared part of a Session.",N,N],[12,R[655],E,"Pending requests and currently active request are there.",135,N],[12,R[707],E,"List of threads waiting for a request.",135,N],[12,R[708],E,"Count of live ServerSessions. Once it drops to 0, all…",135,N],[3,R[702],E,"The client side of a Session.",N,N],[12,"0",E,E,136,N],[3,R[703],E,"The server side of a Session.",N,N],[12,"0",E,E,137,N],[3,R[920],E,R[1267],N,N],[12,"0",E,E,138,N],[3,R[921],E,R[1268],N,N],[12,"0",E,E,139,N],[3,"Request",E,"An incoming IPC request.",N,N],[12,"sender_buf",E,"Address of the mirror-mapped (in-kernel) IPC buffer.…",140,N],[12,"sender_bufsize",E,"Size of the IPC buffer.",140,N],[12,"sender",E,"Thread that sent this request. It should be woken up when…",140,N],[12,"answered",E,"A really really broken excuse for a condvar. The thread…",140,N],[12,"buffers",E,"A/B/W buffers that were mapped during the request. We…",140,N],[3,"Buffer",E,"Information about a Buffer during a Request.",N,N],[12,"writable",E,"Is the buffer writable.",141,N],[12,"source_addr",E,"The source virtual address of the buffer.",141,N],[12,"dest_addr",E,"The destination virtual address of the buffer.",141,N],[12,"size",E,"The size of the buffer.",141,N],[4,R[922],E,"Defines how to handle X Buffer descriptors based on the C…",N,N],[13,"Disabled",E,"No C Buffers are available. Presence of X Buffers should…",142,N],[13,"Inlined",E,"X Buffers should be copied after the Raw Data.",142,N],[13,"Single",E,"X Buffers should be copied sequentially to the C Buffer…",142,N],[13,"Numbered",E,"X Buffers should be copied to the appropriate C Buffer…",142,N],[5,"new",E,R[704],N,[[]]],[5,"buf_map",E,"Send an IPC Buffer from the sender into the receiver.",N,[[[R[360]],[R[4]],["vec"],[R[668]]],[[R[23],[R[438]]],[R[438]]]]],[5,"buf_unmap",E,"Unmap an IPC Buffer from the receiver.",N,[[[R[668]],["buffer"]],[[R[23],[R[438]]],[R[438]]]]],[5,"find_c_descriptors",E,"Efficiently finds C Descriptor in a message.",N,[[],[[R[705]],[R[268]],[R[23],[R[705],R[268]]]]]],[5,"pass_message",E,"Send a message from the sender to the receiver. This is…",N,[[[R[503]],[R[668]],["vec"],["bool"],[R[705]],["arc",[R[503]]],[R[661],[R[668]]]],[[R[23],[R[438]]],[R[438]]]]],[11,"ty",E,E,138,[[["self"]],["u16"]]],[11,R[1274],E,E,138,[[["self"]],["u8"]]],[11,R[1275],E,E,138,[[["self"],["u8"]]]],[11,R[1276],E,E,138,[[["self"]],["u8"]]],[11,R[1277],E,E,138,[[["self"],["u8"]]]],[11,R[1278],E,E,138,[[["self"]],["u8"]]],[11,R[1279],E,E,138,[[["self"],["u8"]]]],[11,R[1280],E,E,138,[[["self"]],["u8"]]],[11,R[1281],E,E,138,[[["self"],["u8"]]]],[11,R[1282],E,E,138,[[["self"]],["u16"]]],[11,R[1283],E,E,138,[[["self"],["u16"]]]],[11,R[1284],E,E,138,[[["self"]],["u8"]]],[11,R[1285],E,E,138,[[["self"],["u8"]]]],[11,R[1286],E,E,138,[[["self"]],["bool"]]],[11,R[1287],E,E,138,[[["self"],["bool"]]]],[11,"send_pid",E,E,139,[[["self"]],["bool"]]],[11,R[1288],E,E,139,[[["self"],["bool"]]]],[11,R[1289],E,E,139,[[["self"]],["u8"]]],[11,R[1290],E,E,139,[[["self"],["u8"]]]],[11,R[1291],E,E,139,[[["self"]],["u8"]]],[11,R[1292],E,E,139,[[["self"],["u8"]]]],[11,"client",E,R[712],135,[[["arc"]],[R[682]]]],[11,"server",E,"Returns a ServerSession from this Port.",135,[[["arc"]],[R[681]]]],[11,"send_request",E,"Send an IPC request through the client pipe. Takes a…",136,[[["self"],[R[562]]],[[R[23],[R[438]]],[R[438]]]]],[11,"receive",E,"Receive an IPC request through the server pipe. Takes a…",137,[[["self"],[R[562]],["bool"]],[[R[23],[R[438]]],[R[438]]]]],[11,"reply",E,"Replies to the currently active IPC request on the server…",137,[[["self"],[R[561]]],[[R[23],[R[438]]],[R[438]]]]],[0,"port",R[706],"IPC Port",N,N],[3,"Port",R[761],"An endpoint which can be connected to.",N,N],[12,"incoming_connections",E,"List of incoming connection requests.",143,N],[12,R[707],E,"List of threads waiting for a connection request.",143,N],[12,R[708],E,"Number of active ServerPort. When it drops to 0, future…",143,N],[3,R[709],E,"The client side of a Port.",N,N],[12,"0",E,E,144,N],[3,R[710],E,"The server side of a Port.",N,N],[12,"0",E,E,145,N],[3,R[923],E,"Represents a connection request from the creator thread.",N,N],[12,"session",E,"Session that this connection request is for.",146,N],[12,"creator",E,"Thread that wants to connect to this Port.",146,N],[5,"new",E,R[711],N,[[["u32"]]]],[11,"client",E,R[712],143,[[["arc"]],[R[680]]]],[11,"server",E,"Returns a ServerPort from this Port.",143,[[["arc"]],[R[700]]]],[11,"accept",E,"Accept a new connection on the Port.",145,[[["self"]],[[R[681]],[R[23],[R[681],R[438]]],[R[438]]]]],[11,"connect",E,"Connects to this port.",144,[[["self"]],[[R[23],[R[682],R[438]]],[R[682]],[R[438]]]]],[7,R[713],R[706],E,N,N],[0,R[714],R[434],"Loads Kernel Built-ins.",N,N],[3,R[924],R[762],"Represents a grub module once mapped in kernel memory",N,N],[12,"mapping_addr",E,"The address of the mapping, in KernelLand.",147,N],[12,"start",E,"The start of the module in the mapping, if it was not page…",147,N],[12,"len",E,"The length of the module.",147,N],[12,"elf",E,"The module parsed as an ElfFile.",147,N],[5,"map_grub_module",E,"Maps a grub module, which already lives in reserved…",N,[[["moduletag"]],[[R[268]],[R[23],[R[715],R[268]]],[R[715]]]]],[5,"get_kacs",E,R[1783],N,[[[R[715]]],[R[5]]]],[5,"get_kip_header",E,"Gets the KIP Header of the provided module, found in the…",N,[[[R[715]]],[[R[5],[R[314]]],[R[314]]]]],[5,"load_builtin",E,"Loads the given kernel built-in into the given page table.…",N,[[[R[4]],[R[668]],[R[715]]],[R[4]]]],[5,R[716],E,R[717],N,[[["elffile"],[R[718]],[R[4]],[R[668]]]]],[0,"utils",R[434],"Generic useful functions",N,N],[0,"io",R[719],R[997],N,N],[8,"Io",R[741],R[1002],N,N],[16,"Value",E,R[1003],148,N],[10,"read",E,R[12],148,[[["self"]]]],[10,"write",E,R[14],148,[[["self"]]]],[11,"readf",E,R[13],148,[[["self"]],["bool"]]],[11,"writef",E,R[1004],148,[[["self"],["bool"]]]],[3,R[29],E,R[998],N,N],[12,"inner",E,E,149,N],[3,R[30],E,R[999],N,N],[12,"inner",E,E,150,N],[3,"Pio",E,R[6],N,N],[12,"port",E,R[7],61,N],[12,"value",E,R[8],61,N],[3,"Mmio",E,R[10],N,N],[12,"value",E,R[11],151,N],[0,R[1022],R[719],R[1023],N,N],[4,"Loop",R[763],R[1027],N,N],[13,"Break",E,R[1028],152,N],[13,"Continue",E,R[1029],152,N],[3,"LoopFn",E,R[1024],N,N],[12,"future",E,R[1025],153,N],[12,"func",E,R[1026],153,N],[5,"loop_fn",E,R[1030],N,[[["s"],["f"]],["loopfn"]]],[4,"Poll",E,R[1042],N,N],[13,"Ready",E,R[1043],154,N],[13,"Pending",E,R[1044],154,N],[5,"align_up",R[719],R[976],N,[[[T]],[T]]],[5,R[977],E,R[978],N,[[[T]],[T]]],[5,R[979],E,R[980],N,[[[R[4]]],[[R[5],[R[4]]],[R[4]]]]],[5,"div_ceil",E,R[981],N,[[[T]],[T]]],[5,R[982],E,R[983],N,[[[T]]]],[5,R[984],E,R[985],N,[[[R[4]],[T]]]],[8,R[31],E,R[1031],N,N],[11,R[1032],E,R[1033],155,[[["self"],["bool"],[R[4]],["range",[R[4]]]]]],[5,R[986],E,R[987],N,[[],[[R[5],[R[4]]],[R[4]]]]],[5,R[988],E,R[989],N,[[],[[R[5],[R[4]]],[R[4]]]]],[5,R[990],E,R[991],N,[[[R[4]]],[[R[5],[R[4]]],[R[4]]]]],[5,R[992],E,R[993],N,[[[R[4]]],[R[4]]]],[5,R[994],E,R[995],N,[[[R[4]]],[R[4]]]],[5,"cast_mut",E,R[996],N,[[]]],[3,R[17],E,R[0],N,N],[12,"data",E,R[1],156,N],[12,"pos",E,R[2],156,N],[14,R[1034],E,R[1035],N,N],[3,R[16],E,R[0],N,N],[12,"data",E,R[1],157,N],[12,"pos",E,R[2],157,N],[14,R[1036],E,R[1037],N,N],[8,R[925],E,"A trait for things that can be splitted in two parts",N,N],[10,"split_at",E,"Split the given object in two at a given offset.",158,[[["self"],[R[4]]],[[R[268]],[R[5]],[R[23],[R[5],R[268]]]]]],[11,"right_split",E,"Splits the given object in two at the given offset.",158,[[["self"],[R[4]]],[[R[268]],[R[5]],[R[23],[R[5],R[268]]]]]],[0,"checks",R[434],"Checked maths functions returning useful errors.",N,N],[5,"check_size_aligned","sunrise_kernel::checks","Checks that a size meets the given alignment.",N,[[[R[4]]],[[R[23],[R[268]]],[R[268]]]]],[5,"check_nonzero_length",E,"checks that a length is not 0.",N,[[[R[4]]],[[R[23],[R[268]]],[R[268]]]]],[5,"check_lower_than_usize",E,"Checks the given u64 fits an usize on this architecture.",N,[[["u64"],[R[438]]],[[R[23],[R[438]]],[R[438]]]]],[0,"cpu_locals",R[434],"CPU local storage",N,N],[3,R[926],R[764],R[1295],N,N],[12,R[1296],E,R[1297],159,N],[3,R[927],E,"Represents an allocated cpu local region.",N,N],[12,"ptr",E,R[1298],160,N],[12,"layout",E,R[1299],160,N],[12,"tcb_offset",E,R[1300],160,N],[5,"get_cpu_locals_ptr_for_core",E,"Address that should be put in `KTls` segment's base. The…",N,[[[R[4]]]]],[5,"init_cpu_locals",E,"Initializes cpu locals during early boot stage.",N,[[[R[4]]]]],[5,R[1301],E,R[1302],N,[[[R[4]]],[R[4]]]],[7,"ARE_CPU_LOCALS_INITIALIZED_YET",E,"Use this if your code might run in an early boot stage to…",N,N],[7,"CPU_LOCAL_REGIONS",E,"Array of cpu local regions, copied from the initialization…",N,N],[11,"tcb",E,R[1303],160,[[["self"]],[R[1304]]]],[11,"allocate",E,"Allocates a CpuLocalRegion.",160,[[[R[4]]],["self"]]],[0,"panic",R[434],"Kernel panic",N,N],[4,R[928],R[720],"Reason for a kernel panic. Must be passed to [kernel_panic].",N,N],[13,"KernelAssert",E,"The kernel failed an assertion.",161,N],[12,"panic_message",R[721],"Formatted string passed to `panic!()`.",161,N],[13,"KernelFault",R[720],"CPU Exception occurred while we were in kernel, e.g. page…",161,N],[12,R[722],R[721],R[723],161,N],[12,"kernel_hardware_context",E,"Kernel registers state before exception.",161,N],[13,"DoubleFault",R[720],"Kernel Faulted, and then the fault handler faulted too.",161,N],[13,"UserspaceFault",E,"Userspace exception.",161,N],[12,R[722],R[721],R[723],161,N],[12,"userspace_hardware_context",E,"Userspace registers state before exception.",161,N],[5,"kernel_panic",R[720],"The kernel panic function.",N,[[["panicorigin"]]]],[5,"display_bsod",E,"Display the infamous \"Blue Screen Of Death\"",N,[[]]],[7,"BSOD_BMP",E,"The \"Blue Screen Of Death\"",N,N],[0,"__rg_allocator_abi",R[434],E,N,N],[5,"__rg_alloc","sunrise_kernel::__rg_allocator_abi",E,N,[[[R[4]]]]],[5,"__rg_dealloc",E,E,N,[[[R[4]]]]],[5,"__rg_realloc",E,E,N,[[[R[4]]]]],[5,"__rg_alloc_zeroed",E,E,N,[[[R[4]]]]],[7,"ALLOCATOR",R[434],"The global heap allocator.",N,N],[14,"trap_gate_asm",E,"The exception/syscall handler asm wrapper.",N,N],[14,"generate_trap_gate_handler",E,"Generates a trap/interrupt gate isr.",N,N],[14,"irq_handler",E,"Generates irq handlers.",N,N],[11,R[20],R[364],E,0,[[[U]],[R[23]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[21],E,E,0,[[],[R[23]]]],[11,R[25],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],[T]]],[11,R[24],E,E,0,[[["self"]],[R[26]]]],[11,R[20],E,E,1,[[[U]],[R[23]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[21],E,E,1,[[],[R[23]]]],[11,R[25],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"]],[T]]],[11,R[24],E,E,1,[[["self"]],[R[26]]]],[11,R[189],E,E,1,[[["self"]],[T]]],[11,R[187],E,E,1,[[["self"],[T]]]],[11,R[20],E,E,2,[[[U]],[R[23]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[21],E,E,2,[[],[R[23]]]],[11,R[25],E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"]],[T]]],[11,R[24],E,E,2,[[["self"]],[R[26]]]],[11,R[20],R[415],E,3,[[[U]],[R[23]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[21],E,E,3,[[],[R[23]]]],[11,R[25],E,E,3,[[["self"]],[T]]],[11,R[22],E,E,3,[[["self"]],[T]]],[11,R[24],E,E,3,[[["self"]],[R[26]]]],[11,R[20],E,E,4,[[[U]],[R[23]]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[21],E,E,4,[[],[R[23]]]],[11,R[25],E,E,4,[[["self"]],[T]]],[11,R[22],E,E,4,[[["self"]],[T]]],[11,R[24],E,E,4,[[["self"]],[R[26]]]],[11,R[20],E,E,5,[[[U]],[R[23]]]],[11,"into",E,E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[21],E,E,5,[[],[R[23]]]],[11,R[25],E,E,5,[[["self"]],[T]]],[11,R[22],E,E,5,[[["self"]],[T]]],[11,R[24],E,E,5,[[["self"]],[R[26]]]],[11,R[20],R[724],E,6,[[[U]],[R[23]]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[21],E,E,6,[[],[R[23]]]],[11,R[25],E,E,6,[[["self"]],[T]]],[11,R[22],E,E,6,[[["self"]],[T]]],[11,R[24],E,E,6,[[["self"]],[R[26]]]],[11,R[20],R[725],E,162,[[[U]],[R[23]]]],[11,"into",E,E,162,[[],[U]]],[11,"from",E,E,162,[[[T]],[T]]],[11,R[21],E,E,162,[[],[R[23]]]],[11,R[25],E,E,162,[[["self"]],[T]]],[11,R[22],E,E,162,[[["self"]],[T]]],[11,R[24],E,E,162,[[["self"]],[R[26]]]],[11,R[20],E,E,163,[[[U]],[R[23]]]],[11,"into",E,E,163,[[],[U]]],[11,"from",E,E,163,[[[T]],[T]]],[11,R[21],E,E,163,[[],[R[23]]]],[11,R[25],E,E,163,[[["self"]],[T]]],[11,R[22],E,E,163,[[["self"]],[T]]],[11,R[24],E,E,163,[[["self"]],[R[26]]]],[11,R[20],E,E,164,[[[U]],[R[23]]]],[11,"into",E,E,164,[[],[U]]],[11,"from",E,E,164,[[[T]],[T]]],[11,R[21],E,E,164,[[],[R[23]]]],[11,R[25],E,E,164,[[["self"]],[T]]],[11,R[22],E,E,164,[[["self"]],[T]]],[11,R[24],E,E,164,[[["self"]],[R[26]]]],[11,R[20],R[726],E,8,[[[U]],[R[23]]]],[11,"into",E,E,8,[[],[U]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[21],E,E,8,[[],[R[23]]]],[11,R[25],E,E,8,[[["self"]],[T]]],[11,R[22],E,E,8,[[["self"]],[T]]],[11,R[24],E,E,8,[[["self"]],[R[26]]]],[11,R[20],E,E,9,[[[U]],[R[23]]]],[11,"into",E,E,9,[[],[U]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[21],E,E,9,[[],[R[23]]]],[11,R[25],E,E,9,[[["self"]],[T]]],[11,R[22],E,E,9,[[["self"]],[T]]],[11,R[24],E,E,9,[[["self"]],[R[26]]]],[11,R[20],R[727],E,10,[[[U]],[R[23]]]],[11,"into",E,E,10,[[],[U]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[21],E,E,10,[[],[R[23]]]],[11,R[25],E,E,10,[[["self"]],[T]]],[11,R[22],E,E,10,[[["self"]],[T]]],[11,R[24],E,E,10,[[["self"]],[R[26]]]],[11,R[20],R[389],E,165,[[[U]],[R[23]]]],[11,"into",E,E,165,[[],[U]]],[11,"from",E,E,165,[[[T]],[T]]],[11,R[21],E,E,165,[[],[R[23]]]],[11,R[25],E,E,165,[[["self"]],[T]]],[11,R[22],E,E,165,[[["self"]],[T]]],[11,R[24],E,E,165,[[["self"]],[R[26]]]],[11,R[20],E,E,11,[[[U]],[R[23]]]],[11,"into",E,E,11,[[],[U]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[21],E,E,11,[[],[R[23]]]],[11,R[25],E,E,11,[[["self"]],[T]]],[11,R[22],E,E,11,[[["self"]],[T]]],[11,R[24],E,E,11,[[["self"]],[R[26]]]],[11,R[20],R[728],E,17,[[[U]],[R[23]]]],[11,"into",E,E,17,[[],[U]]],[11,"from",E,E,17,[[[T]],[T]]],[11,R[21],E,E,17,[[],[R[23]]]],[11,R[25],E,E,17,[[["self"]],[T]]],[11,R[22],E,E,17,[[["self"]],[T]]],[11,R[24],E,E,17,[[["self"]],[R[26]]]],[11,R[189],E,E,17,[[["self"]],[T]]],[11,R[187],E,E,17,[[["self"],[T]]]],[11,R[20],E,E,18,[[[U]],[R[23]]]],[11,"into",E,E,18,[[],[U]]],[11,"from",E,E,18,[[[T]],[T]]],[11,R[21],E,E,18,[[],[R[23]]]],[11,R[25],E,E,18,[[["self"]],[T]]],[11,R[22],E,E,18,[[["self"]],[T]]],[11,R[24],E,E,18,[[["self"]],[R[26]]]],[11,R[189],E,E,18,[[["self"]],[T]]],[11,R[187],E,E,18,[[["self"],[T]]]],[11,R[20],R[729],E,19,[[[U]],[R[23]]]],[11,"into",E,E,19,[[],[U]]],[11,"from",E,E,19,[[[T]],[T]]],[11,R[21],E,E,19,[[],[R[23]]]],[11,R[25],E,E,19,[[["self"]],[T]]],[11,R[22],E,E,19,[[["self"]],[T]]],[11,R[24],E,E,19,[[["self"]],[R[26]]]],[11,R[20],E,E,20,[[[U]],[R[23]]]],[11,"into",E,E,20,[[],[U]]],[11,"from",E,E,20,[[[T]],[T]]],[11,R[21],E,E,20,[[],[R[23]]]],[11,R[25],E,E,20,[[["self"]],[T]]],[11,R[22],E,E,20,[[["self"]],[T]]],[11,R[24],E,E,20,[[["self"]],[R[26]]]],[11,R[20],E,E,21,[[[U]],[R[23]]]],[11,"into",E,E,21,[[],[U]]],[11,"from",E,E,21,[[[T]],[T]]],[11,R[21],E,E,21,[[],[R[23]]]],[11,R[25],E,E,21,[[["self"]],[T]]],[11,R[22],E,E,21,[[["self"]],[T]]],[11,R[24],E,E,21,[[["self"]],[R[26]]]],[11,R[20],E,E,166,[[[U]],[R[23]]]],[11,"into",E,E,166,[[],[U]]],[11,"from",E,E,166,[[[T]],[T]]],[11,R[21],E,E,166,[[],[R[23]]]],[11,R[25],E,E,166,[[["self"]],[T]]],[11,R[22],E,E,166,[[["self"]],[T]]],[11,R[24],E,E,166,[[["self"]],[R[26]]]],[11,R[20],E,E,22,[[[U]],[R[23]]]],[11,"into",E,E,22,[[],[U]]],[11,"from",E,E,22,[[[T]],[T]]],[11,R[21],E,E,22,[[],[R[23]]]],[11,R[25],E,E,22,[[["self"]],[T]]],[11,R[22],E,E,22,[[["self"]],[T]]],[11,R[24],E,E,22,[[["self"]],[R[26]]]],[11,R[20],E,E,23,[[[U]],[R[23]]]],[11,"into",E,E,23,[[],[U]]],[11,"from",E,E,23,[[[T]],[T]]],[11,R[21],E,E,23,[[],[R[23]]]],[11,R[25],E,E,23,[[["self"]],[T]]],[11,R[22],E,E,23,[[["self"]],[T]]],[11,R[24],E,E,23,[[["self"]],[R[26]]]],[11,R[20],E,E,167,[[[U]],[R[23]]]],[11,"into",E,E,167,[[],[U]]],[11,"from",E,E,167,[[[T]],[T]]],[11,R[21],E,E,167,[[],[R[23]]]],[11,R[25],E,E,167,[[["self"]],[T]]],[11,R[22],E,E,167,[[["self"]],[T]]],[11,R[24],E,E,167,[[["self"]],[R[26]]]],[11,R[20],R[416],E,24,[[[U]],[R[23]]]],[11,"into",E,E,24,[[],[U]]],[11,"from",E,E,24,[[[T]],[T]]],[11,R[21],E,E,24,[[],[R[23]]]],[11,R[25],E,E,24,[[["self"]],[T]]],[11,R[22],E,E,24,[[["self"]],[T]]],[11,R[24],E,E,24,[[["self"]],[R[26]]]],[11,R[20],R[730],E,25,[[[U]],[R[23]]]],[11,"into",E,E,25,[[],[U]]],[11,"from",E,E,25,[[[T]],[T]]],[11,R[21],E,E,25,[[],[R[23]]]],[11,R[25],E,E,25,[[["self"]],[T]]],[11,R[22],E,E,25,[[["self"]],[T]]],[11,R[24],E,E,25,[[["self"]],[R[26]]]],[11,R[20],E,E,26,[[[U]],[R[23]]]],[11,"into",E,E,26,[[],[U]]],[11,"from",E,E,26,[[[T]],[T]]],[11,R[21],E,E,26,[[],[R[23]]]],[11,R[25],E,E,26,[[["self"]],[T]]],[11,R[22],E,E,26,[[["self"]],[T]]],[11,R[24],E,E,26,[[["self"]],[R[26]]]],[11,R[189],E,E,26,[[["self"]],[T]]],[11,R[187],E,E,26,[[["self"],[T]]]],[11,R[20],E,E,27,[[[U]],[R[23]]]],[11,"into",E,E,27,[[],[U]]],[11,"from",E,E,27,[[[T]],[T]]],[11,R[21],E,E,27,[[],[R[23]]]],[11,R[25],E,E,27,[[["self"]],[T]]],[11,R[22],E,E,27,[[["self"]],[T]]],[11,R[24],E,E,27,[[["self"]],[R[26]]]],[11,R[189],E,E,27,[[["self"]],[T]]],[11,R[187],E,E,27,[[["self"],[T]]]],[11,R[20],E,E,28,[[[U]],[R[23]]]],[11,"into",E,E,28,[[],[U]]],[11,"from",E,E,28,[[[T]],[T]]],[11,R[21],E,E,28,[[],[R[23]]]],[11,R[25],E,E,28,[[["self"]],[T]]],[11,R[22],E,E,28,[[["self"]],[T]]],[11,R[24],E,E,28,[[["self"]],[R[26]]]],[11,R[20],E,E,29,[[[U]],[R[23]]]],[11,"into",E,E,29,[[],[U]]],[11,"from",E,E,29,[[[T]],[T]]],[11,R[21],E,E,29,[[],[R[23]]]],[11,R[25],E,E,29,[[["self"]],[T]]],[11,R[22],E,E,29,[[["self"]],[T]]],[11,R[24],E,E,29,[[["self"]],[R[26]]]],[11,R[20],R[441],E,31,[[[U]],[R[23]]]],[11,"into",E,E,31,[[],[U]]],[11,"from",E,E,31,[[[T]],[T]]],[11,R[21],E,E,31,[[],[R[23]]]],[11,R[25],E,E,31,[[["self"]],[T]]],[11,R[22],E,E,31,[[["self"]],[T]]],[11,R[24],E,E,31,[[["self"]],[R[26]]]],[11,R[192],E,E,31,[[["self"]],["string"]]],[11,R[189],E,E,31,[[["self"]],[T]]],[11,R[187],E,E,31,[[["self"],[T]]]],[11,R[20],E,E,32,[[[U]],[R[23]]]],[11,"into",E,E,32,[[],[U]]],[11,"from",E,E,32,[[[T]],[T]]],[11,R[21],E,E,32,[[],[R[23]]]],[11,R[25],E,E,32,[[["self"]],[T]]],[11,R[22],E,E,32,[[["self"]],[T]]],[11,R[24],E,E,32,[[["self"]],[R[26]]]],[11,R[192],E,E,32,[[["self"]],["string"]]],[11,"as_fail",E,E,32,[[["self"]],["fail"]]],[11,R[20],R[448],E,33,[[[U]],[R[23]]]],[11,"into",E,E,33,[[],[U]]],[11,"from",E,E,33,[[[T]],[T]]],[11,R[21],E,E,33,[[],[R[23]]]],[11,R[25],E,E,33,[[["self"]],[T]]],[11,R[22],E,E,33,[[["self"]],[T]]],[11,R[24],E,E,33,[[["self"]],[R[26]]]],[11,R[20],R[446],E,34,[[[U]],[R[23]]]],[11,"into",E,E,34,[[],[U]]],[11,"from",E,E,34,[[[T]],[T]]],[11,R[21],E,E,34,[[],[R[23]]]],[11,R[25],E,E,34,[[["self"]],[T]]],[11,R[22],E,E,34,[[["self"]],[T]]],[11,R[24],E,E,34,[[["self"]],[R[26]]]],[11,R[20],E,E,35,[[[U]],[R[23]]]],[11,"into",E,E,35,[[],[U]]],[11,"from",E,E,35,[[[T]],[T]]],[11,R[21],E,E,35,[[],[R[23]]]],[11,R[25],E,E,35,[[["self"]],[T]]],[11,R[22],E,E,35,[[["self"]],[T]]],[11,R[24],E,E,35,[[["self"]],[R[26]]]],[11,R[20],E,E,36,[[[U]],[R[23]]]],[11,"into",E,E,36,[[],[U]]],[11,"from",E,E,36,[[[T]],[T]]],[11,R[21],E,E,36,[[],[R[23]]]],[11,R[25],E,E,36,[[["self"]],[T]]],[11,R[22],E,E,36,[[["self"]],[T]]],[11,R[24],E,E,36,[[["self"]],[R[26]]]],[11,R[20],R[731],E,37,[[[U]],[R[23]]]],[11,"into",E,E,37,[[],[U]]],[11,"from",E,E,37,[[[T]],[T]]],[11,R[21],E,E,37,[[],[R[23]]]],[11,R[25],E,E,37,[[["self"]],[T]]],[11,R[22],E,E,37,[[["self"]],[T]]],[11,R[24],E,E,37,[[["self"]],[R[26]]]],[11,R[192],E,E,37,[[["self"]],["string"]]],[11,R[20],R[469],E,38,[[[U]],[R[23]]]],[11,"into",E,E,38,[[],[U]]],[11,"from",E,E,38,[[[T]],[T]]],[11,R[21],E,E,38,[[],[R[23]]]],[11,R[25],E,E,38,[[["self"]],[T]]],[11,R[22],E,E,38,[[["self"]],[T]]],[11,R[24],E,E,38,[[["self"]],[R[26]]]],[11,R[189],E,E,38,[[["self"]],[T]]],[11,R[187],E,E,38,[[["self"],[T]]]],[11,R[20],E,E,39,[[[U]],[R[23]]]],[11,"into",E,E,39,[[],[U]]],[11,"from",E,E,39,[[[T]],[T]]],[11,R[21],E,E,39,[[],[R[23]]]],[11,R[25],E,E,39,[[["self"]],[T]]],[11,R[22],E,E,39,[[["self"]],[T]]],[11,R[24],E,E,39,[[["self"]],[R[26]]]],[11,R[189],E,E,39,[[["self"]],[T]]],[11,R[187],E,E,39,[[["self"],[T]]]],[11,R[20],R[732],E,168,[[[U]],[R[23]]]],[11,"into",E,E,168,[[],[U]]],[11,"from",E,E,168,[[[T]],[T]]],[11,R[21],E,E,168,[[],[R[23]]]],[11,R[25],E,E,168,[[["self"]],[T]]],[11,R[22],E,E,168,[[["self"]],[T]]],[11,R[24],E,E,168,[[["self"]],[R[26]]]],[11,R[20],R[733],E,40,[[[U]],[R[23]]]],[11,"into",E,E,40,[[],[U]]],[11,"from",E,E,40,[[[T]],[T]]],[11,R[21],E,E,40,[[],[R[23]]]],[11,R[25],E,E,40,[[["self"]],[T]]],[11,R[22],E,E,40,[[["self"]],[T]]],[11,R[24],E,E,40,[[["self"]],[R[26]]]],[11,R[189],E,E,40,[[["self"]],[T]]],[11,R[187],E,E,40,[[["self"],[T]]]],[11,R[20],R[734],E,41,[[[U]],[R[23]]]],[11,"into",E,E,41,[[],[U]]],[11,"from",E,E,41,[[[T]],[T]]],[11,R[21],E,E,41,[[],[R[23]]]],[11,R[25],E,E,41,[[["self"]],[T]]],[11,R[22],E,E,41,[[["self"]],[T]]],[11,R[24],E,E,41,[[["self"]],[R[26]]]],[11,R[20],E,E,42,[[[U]],[R[23]]]],[11,"into",E,E,42,[[],[U]]],[11,"from",E,E,42,[[[T]],[T]]],[11,R[21],E,E,42,[[],[R[23]]]],[11,R[25],E,E,42,[[["self"]],[T]]],[11,R[22],E,E,42,[[["self"]],[T]]],[11,R[24],E,E,42,[[["self"]],[R[26]]]],[11,R[20],R[735],E,43,[[[U]],[R[23]]]],[11,"into",E,E,43,[[],[U]]],[11,"from",E,E,43,[[[T]],[T]]],[11,R[21],E,E,43,[[],[R[23]]]],[11,R[25],E,E,43,[[["self"]],[T]]],[11,R[22],E,E,43,[[["self"]],[T]]],[11,R[24],E,E,43,[[["self"]],[R[26]]]],[11,R[189],E,E,43,[[["self"]],[T]]],[11,R[187],E,E,43,[[["self"],[T]]]],[11,R[20],R[736],E,44,[[[U]],[R[23]]]],[11,"into",E,E,44,[[],[U]]],[11,"from",E,E,44,[[[T]],[T]]],[11,R[21],E,E,44,[[],[R[23]]]],[11,R[25],E,E,44,[[["self"]],[T]]],[11,R[22],E,E,44,[[["self"]],[T]]],[11,R[24],E,E,44,[[["self"]],[R[26]]]],[11,R[20],E,E,45,[[[U]],[R[23]]]],[11,"into",E,E,45,[[],[U]]],[11,"from",E,E,45,[[[T]],[T]]],[11,R[21],E,E,45,[[],[R[23]]]],[11,R[25],E,E,45,[[["self"]],[T]]],[11,R[22],E,E,45,[[["self"]],[T]]],[11,R[24],E,E,45,[[["self"]],[R[26]]]],[11,R[189],E,E,45,[[["self"]],[T]]],[11,R[187],E,E,45,[[["self"],[T]]]],[11,R[20],E,E,46,[[[U]],[R[23]]]],[11,"into",E,E,46,[[],[U]]],[11,"from",E,E,46,[[[T]],[T]]],[11,R[21],E,E,46,[[],[R[23]]]],[11,R[25],E,E,46,[[["self"]],[T]]],[11,R[22],E,E,46,[[["self"]],[T]]],[11,R[24],E,E,46,[[["self"]],[R[26]]]],[11,R[189],E,E,46,[[["self"]],[T]]],[11,R[187],E,E,46,[[["self"],[T]]]],[11,"bit",E,E,46,[[["self"],[R[4]]],["bool"]]],[11,R[752],E,E,46,[[["self"],[R[4]],["bool"]]]],[11,R[20],E,E,47,[[[U]],[R[23]]]],[11,"into",E,E,47,[[],[U]]],[11,"from",E,E,47,[[[T]],[T]]],[11,R[21],E,E,47,[[],[R[23]]]],[11,R[25],E,E,47,[[["self"]],[T]]],[11,R[22],E,E,47,[[["self"]],[T]]],[11,R[24],E,E,47,[[["self"]],[R[26]]]],[11,R[20],E,E,48,[[[U]],[R[23]]]],[11,"into",E,E,48,[[],[U]]],[11,"from",E,E,48,[[[T]],[T]]],[11,R[21],E,E,48,[[],[R[23]]]],[11,R[25],E,E,48,[[["self"]],[T]]],[11,R[22],E,E,48,[[["self"]],[T]]],[11,R[24],E,E,48,[[["self"]],[R[26]]]],[11,R[189],E,E,48,[[["self"]],[T]]],[11,R[187],E,E,48,[[["self"],[T]]]],[11,R[20],E,E,49,[[[U]],[R[23]]]],[11,"into",E,E,49,[[],[U]]],[11,"from",E,E,49,[[[T]],[T]]],[11,R[21],E,E,49,[[],[R[23]]]],[11,R[25],E,E,49,[[["self"]],[T]]],[11,R[22],E,E,49,[[["self"]],[T]]],[11,R[24],E,E,49,[[["self"]],[R[26]]]],[11,R[189],E,E,49,[[["self"]],[T]]],[11,R[187],E,E,49,[[["self"],[T]]]],[11,R[20],R[737],E,50,[[[U]],[R[23]]]],[11,"into",E,E,50,[[],[U]]],[11,"from",E,E,50,[[[T]],[T]]],[11,R[21],E,E,50,[[],[R[23]]]],[11,R[25],E,E,50,[[["self"]],[T]]],[11,R[22],E,E,50,[[["self"]],[T]]],[11,R[24],E,E,50,[[["self"]],[R[26]]]],[11,R[20],R[738],E,51,[[[U]],[R[23]]]],[11,"into",E,E,51,[[],[U]]],[11,"from",E,E,51,[[[T]],[T]]],[11,R[21],E,E,51,[[],[R[23]]]],[11,R[25],E,E,51,[[["self"]],[T]]],[11,R[22],E,E,51,[[["self"]],[T]]],[11,R[24],E,E,51,[[["self"]],[R[26]]]],[11,R[20],E,E,52,[[[U]],[R[23]]]],[11,"into",E,E,52,[[],[U]]],[11,"from",E,E,52,[[[T]],[T]]],[11,R[21],E,E,52,[[],[R[23]]]],[11,R[25],E,E,52,[[["self"]],[T]]],[11,R[22],E,E,52,[[["self"]],[T]]],[11,R[24],E,E,52,[[["self"]],[R[26]]]],[11,R[20],E,E,53,[[[U]],[R[23]]]],[11,"into",E,E,53,[[],[U]]],[11,"from",E,E,53,[[[T]],[T]]],[11,R[21],E,E,53,[[],[R[23]]]],[11,R[25],E,E,53,[[["self"]],[T]]],[11,R[22],E,E,53,[[["self"]],[T]]],[11,R[24],E,E,53,[[["self"]],[R[26]]]],[11,R[20],E,E,54,[[[U]],[R[23]]]],[11,"into",E,E,54,[[],[U]]],[11,"from",E,E,54,[[[T]],[T]]],[11,R[21],E,E,54,[[],[R[23]]]],[11,R[25],E,E,54,[[["self"]],[T]]],[11,R[22],E,E,54,[[["self"]],[T]]],[11,R[24],E,E,54,[[["self"]],[R[26]]]],[11,R[189],E,E,54,[[["self"]],[T]]],[11,R[187],E,E,54,[[["self"],[T]]]],[11,R[20],E,E,55,[[[U]],[R[23]]]],[11,"into",E,E,55,[[],[U]]],[11,"from",E,E,55,[[[T]],[T]]],[11,R[21],E,E,55,[[],[R[23]]]],[11,R[25],E,E,55,[[["self"]],[T]]],[11,R[22],E,E,55,[[["self"]],[T]]],[11,R[24],E,E,55,[[["self"]],[R[26]]]],[11,R[189],E,E,55,[[["self"]],[T]]],[11,R[187],E,E,55,[[["self"],[T]]]],[11,R[20],E,E,56,[[[U]],[R[23]]]],[11,"into",E,E,56,[[],[U]]],[11,"from",E,E,56,[[[T]],[T]]],[11,R[21],E,E,56,[[],[R[23]]]],[11,R[25],E,E,56,[[["self"]],[T]]],[11,R[22],E,E,56,[[["self"]],[T]]],[11,R[24],E,E,56,[[["self"]],[R[26]]]],[11,R[189],E,E,56,[[["self"]],[T]]],[11,R[187],E,E,56,[[["self"],[T]]]],[11,R[20],E,E,57,[[[U]],[R[23]]]],[11,"into",E,E,57,[[],[U]]],[11,"from",E,E,57,[[[T]],[T]]],[11,R[21],E,E,57,[[],[R[23]]]],[11,R[25],E,E,57,[[["self"]],[T]]],[11,R[22],E,E,57,[[["self"]],[T]]],[11,R[24],E,E,57,[[["self"]],[R[26]]]],[11,R[189],E,E,57,[[["self"]],[T]]],[11,R[187],E,E,57,[[["self"],[T]]]],[11,R[20],R[739],E,58,[[[U]],[R[23]]]],[11,"into",E,E,58,[[],[U]]],[11,"from",E,E,58,[[[T]],[T]]],[11,R[21],E,E,58,[[],[R[23]]]],[11,R[25],E,E,58,[[["self"]],[T]]],[11,R[22],E,E,58,[[["self"]],[T]]],[11,R[24],E,E,58,[[["self"]],[R[26]]]],[11,R[20],R[740],E,59,[[[U]],[R[23]]]],[11,"into",E,E,59,[[],[U]]],[11,"from",E,E,59,[[[T]],[T]]],[11,R[21],E,E,59,[[],[R[23]]]],[11,R[25],E,E,59,[[["self"]],[T]]],[11,R[22],E,E,59,[[["self"]],[T]]],[11,R[24],E,E,59,[[["self"]],[R[26]]]],[11,R[192],E,E,59,[[["self"]],["string"]]],[11,R[189],E,E,59,[[["self"]],[T]]],[11,R[187],E,E,59,[[["self"],[T]]]],[11,R[20],E,E,60,[[[U]],[R[23]]]],[11,"into",E,E,60,[[],[U]]],[11,"from",E,E,60,[[[T]],[T]]],[11,R[21],E,E,60,[[],[R[23]]]],[11,R[25],E,E,60,[[["self"]],[T]]],[11,R[22],E,E,60,[[["self"]],[T]]],[11,R[24],E,E,60,[[["self"]],[R[26]]]],[11,R[20],R[741],E,61,[[[U]],[R[23]]]],[11,"into",E,E,61,[[],[U]]],[11,"from",E,E,61,[[[T]],[T]]],[11,R[21],E,E,61,[[],[R[23]]]],[11,R[25],E,E,61,[[["self"]],[T]]],[11,R[22],E,E,61,[[["self"]],[T]]],[11,R[24],E,E,61,[[["self"]],[R[26]]]],[11,R[189],E,E,61,[[["self"]],[T]]],[11,R[187],E,E,61,[[["self"],[T]]]],[11,R[20],R[742],E,62,[[[U]],[R[23]]]],[11,"into",E,E,62,[[],[U]]],[11,"from",E,E,62,[[[T]],[T]]],[11,R[21],E,E,62,[[],[R[23]]]],[11,R[25],E,E,62,[[["self"]],[T]]],[11,R[22],E,E,62,[[["self"]],[T]]],[11,R[24],E,E,62,[[["self"]],[R[26]]]],[11,R[189],E,E,62,[[["self"]],[T]]],[11,R[187],E,E,62,[[["self"],[T]]]],[11,R[20],R[567],E,169,[[[U]],[R[23]]]],[11,"into",E,E,169,[[],[U]]],[11,"from",E,E,169,[[[T]],[T]]],[11,R[21],E,E,169,[[],[R[23]]]],[11,R[25],E,E,169,[[["self"]],[T]]],[11,R[22],E,E,169,[[["self"]],[T]]],[11,R[24],E,E,169,[[["self"]],[R[26]]]],[11,R[20],R[743],E,63,[[[U]],[R[23]]]],[11,"into",E,E,63,[[],[U]]],[11,"from",E,E,63,[[[T]],[T]]],[11,R[21],E,E,63,[[],[R[23]]]],[11,R[25],E,E,63,[[["self"]],[T]]],[11,R[22],E,E,63,[[["self"]],[T]]],[11,R[24],E,E,63,[[["self"]],[R[26]]]],[11,R[20],E,E,64,[[[U]],[R[23]]]],[11,R[744],E,E,64,[[],["i"]]],[11,"into",E,E,64,[[],[U]]],[11,"from",E,E,64,[[[T]],[T]]],[11,R[21],E,E,64,[[],[R[23]]]],[11,R[25],E,E,64,[[["self"]],[T]]],[11,R[22],E,E,64,[[["self"]],[T]]],[11,R[24],E,E,64,[[["self"]],[R[26]]]],[11,R[189],E,E,64,[[["self"]],[T]]],[11,R[187],E,E,64,[[["self"],[T]]]],[11,R[20],R[745],E,65,[[[U]],[R[23]]]],[11,"into",E,E,65,[[],[U]]],[11,"from",E,E,65,[[[T]],[T]]],[11,R[21],E,E,65,[[],[R[23]]]],[11,R[25],E,E,65,[[["self"]],[T]]],[11,R[22],E,E,65,[[["self"]],[T]]],[11,R[24],E,E,65,[[["self"]],[R[26]]]],[11,R[20],R[746],E,68,[[[U]],[R[23]]]],[11,"into",E,E,68,[[],[U]]],[11,"from",E,E,68,[[[T]],[T]]],[11,R[21],E,E,68,[[],[R[23]]]],[11,R[25],E,E,68,[[["self"]],[T]]],[11,R[22],E,E,68,[[["self"]],[T]]],[11,R[24],E,E,68,[[["self"]],[R[26]]]],[11,R[20],R[747],E,69,[[[U]],[R[23]]]],[11,"into",E,E,69,[[],[U]]],[11,"from",E,E,69,[[[T]],[T]]],[11,R[21],E,E,69,[[],[R[23]]]],[11,R[25],E,E,69,[[["self"]],[T]]],[11,R[22],E,E,69,[[["self"]],[T]]],[11,R[24],E,E,69,[[["self"]],[R[26]]]],[11,R[189],E,E,69,[[["self"]],[T]]],[11,R[187],E,E,69,[[["self"],[T]]]],[11,"bit",E,E,69,[[["self"],[R[4]]],["bool"]]],[11,R[752],E,E,69,[[["self"],[R[4]],["bool"]]]],[11,R[20],E,E,70,[[[U]],[R[23]]]],[11,"into",E,E,70,[[],[U]]],[11,"from",E,E,70,[[[T]],[T]]],[11,R[21],E,E,70,[[],[R[23]]]],[11,R[25],E,E,70,[[["self"]],[T]]],[11,R[22],E,E,70,[[["self"]],[T]]],[11,R[24],E,E,70,[[["self"]],[R[26]]]],[11,R[189],E,E,70,[[["self"]],[T]]],[11,R[187],E,E,70,[[["self"],[T]]]],[11,"bit",E,E,70,[[["self"],[R[4]]],["bool"]]],[11,R[752],E,E,70,[[["self"],[R[4]],["bool"]]]],[11,R[20],E,E,71,[[[U]],[R[23]]]],[11,"into",E,E,71,[[],[U]]],[11,"from",E,E,71,[[[T]],[T]]],[11,R[21],E,E,71,[[],[R[23]]]],[11,R[25],E,E,71,[[["self"]],[T]]],[11,R[22],E,E,71,[[["self"]],[T]]],[11,R[24],E,E,71,[[["self"]],[R[26]]]],[11,R[189],E,E,71,[[["self"]],[T]]],[11,R[187],E,E,71,[[["self"],[T]]]],[11,"bit",E,E,71,[[["self"],[R[4]]],["bool"]]],[11,R[752],E,E,71,[[["self"],[R[4]],["bool"]]]],[11,R[20],E,E,72,[[[U]],[R[23]]]],[11,"into",E,E,72,[[],[U]]],[11,"from",E,E,72,[[[T]],[T]]],[11,R[21],E,E,72,[[],[R[23]]]],[11,R[25],E,E,72,[[["self"]],[T]]],[11,R[22],E,E,72,[[["self"]],[T]]],[11,R[24],E,E,72,[[["self"]],[R[26]]]],[11,R[20],E,E,73,[[[U]],[R[23]]]],[11,"into",E,E,73,[[],[U]]],[11,"from",E,E,73,[[[T]],[T]]],[11,R[21],E,E,73,[[],[R[23]]]],[11,R[25],E,E,73,[[["self"]],[T]]],[11,R[22],E,E,73,[[["self"]],[T]]],[11,R[24],E,E,73,[[["self"]],[R[26]]]],[11,R[20],E,E,74,[[[U]],[R[23]]]],[11,"into",E,E,74,[[],[U]]],[11,"from",E,E,74,[[[T]],[T]]],[11,R[21],E,E,74,[[],[R[23]]]],[11,R[25],E,E,74,[[["self"]],[T]]],[11,R[22],E,E,74,[[["self"]],[T]]],[11,R[24],E,E,74,[[["self"]],[R[26]]]],[11,R[20],E,E,75,[[[U]],[R[23]]]],[11,"into",E,E,75,[[],[U]]],[11,"from",E,E,75,[[[T]],[T]]],[11,R[21],E,E,75,[[],[R[23]]]],[11,R[25],E,E,75,[[["self"]],[T]]],[11,R[22],E,E,75,[[["self"]],[T]]],[11,R[24],E,E,75,[[["self"]],[R[26]]]],[11,R[20],R[748],E,76,[[[U]],[R[23]]]],[11,"into",E,E,76,[[],[U]]],[11,"from",E,E,76,[[[T]],[T]]],[11,R[21],E,E,76,[[],[R[23]]]],[11,R[25],E,E,76,[[["self"]],[T]]],[11,R[22],E,E,76,[[["self"]],[T]]],[11,R[24],E,E,76,[[["self"]],[R[26]]]],[11,R[189],E,E,76,[[["self"]],[T]]],[11,R[187],E,E,76,[[["self"],[T]]]],[11,R[20],E,E,77,[[[U]],[R[23]]]],[11,"into",E,E,77,[[],[U]]],[11,"from",E,E,77,[[[T]],[T]]],[11,R[21],E,E,77,[[],[R[23]]]],[11,R[25],E,E,77,[[["self"]],[T]]],[11,R[22],E,E,77,[[["self"]],[T]]],[11,R[24],E,E,77,[[["self"]],[R[26]]]],[11,R[20],E,E,78,[[[U]],[R[23]]]],[11,"into",E,E,78,[[],[U]]],[11,"from",E,E,78,[[[T]],[T]]],[11,R[21],E,E,78,[[],[R[23]]]],[11,R[25],E,E,78,[[["self"]],[T]]],[11,R[22],E,E,78,[[["self"]],[T]]],[11,R[24],E,E,78,[[["self"]],[R[26]]]],[11,R[20],R[749],E,79,[[[U]],[R[23]]]],[11,"into",E,E,79,[[],[U]]],[11,"from",E,E,79,[[[T]],[T]]],[11,R[21],E,E,79,[[],[R[23]]]],[11,R[25],E,E,79,[[["self"]],[T]]],[11,R[22],E,E,79,[[["self"]],[T]]],[11,R[24],E,E,79,[[["self"]],[R[26]]]],[11,R[20],E,E,80,[[[U]],[R[23]]]],[11,"into",E,E,80,[[],[U]]],[11,"from",E,E,80,[[[T]],[T]]],[11,R[21],E,E,80,[[],[R[23]]]],[11,R[25],E,E,80,[[["self"]],[T]]],[11,R[22],E,E,80,[[["self"]],[T]]],[11,R[24],E,E,80,[[["self"]],[R[26]]]],[11,R[189],E,E,80,[[["self"]],[T]]],[11,R[187],E,E,80,[[["self"],[T]]]],[11,R[20],E,E,81,[[[U]],[R[23]]]],[11,"into",E,E,81,[[],[U]]],[11,"from",E,E,81,[[[T]],[T]]],[11,R[21],E,E,81,[[],[R[23]]]],[11,R[25],E,E,81,[[["self"]],[T]]],[11,R[22],E,E,81,[[["self"]],[T]]],[11,R[24],E,E,81,[[["self"]],[R[26]]]],[11,R[20],E,E,82,[[[U]],[R[23]]]],[11,"into",E,E,82,[[],[U]]],[11,"from",E,E,82,[[[T]],[T]]],[11,R[21],E,E,82,[[],[R[23]]]],[11,R[25],E,E,82,[[["self"]],[T]]],[11,R[22],E,E,82,[[["self"]],[T]]],[11,R[24],E,E,82,[[["self"]],[R[26]]]],[11,R[20],E,E,83,[[[U]],[R[23]]]],[11,"into",E,E,83,[[],[U]]],[11,"from",E,E,83,[[[T]],[T]]],[11,R[21],E,E,83,[[],[R[23]]]],[11,R[25],E,E,83,[[["self"]],[T]]],[11,R[22],E,E,83,[[["self"]],[T]]],[11,R[24],E,E,83,[[["self"]],[R[26]]]],[11,R[189],E,E,83,[[["self"]],[T]]],[11,R[187],E,E,83,[[["self"],[T]]]],[11,R[20],R[750],E,84,[[[U]],[R[23]]]],[11,"into",E,E,84,[[],[U]]],[11,"from",E,E,84,[[[T]],[T]]],[11,R[21],E,E,84,[[],[R[23]]]],[11,R[25],E,E,84,[[["self"]],[T]]],[11,R[22],E,E,84,[[["self"]],[T]]],[11,R[24],E,E,84,[[["self"]],[R[26]]]],[11,R[189],E,E,84,[[["self"]],[T]]],[11,R[187],E,E,84,[[["self"],[T]]]],[11,R[20],E,E,85,[[[U]],[R[23]]]],[11,"into",E,E,85,[[],[U]]],[11,"from",E,E,85,[[[T]],[T]]],[11,R[21],E,E,85,[[],[R[23]]]],[11,R[25],E,E,85,[[["self"]],[T]]],[11,R[22],E,E,85,[[["self"]],[T]]],[11,R[24],E,E,85,[[["self"]],[R[26]]]],[11,R[192],E,E,85,[[["self"]],["string"]]],[11,R[189],E,E,85,[[["self"]],[T]]],[11,R[187],E,E,85,[[["self"],[T]]]],[11,R[20],E,E,86,[[[U]],[R[23]]]],[11,"into",E,E,86,[[],[U]]],[11,"from",E,E,86,[[[T]],[T]]],[11,R[21],E,E,86,[[],[R[23]]]],[11,R[25],E,E,86,[[["self"]],[T]]],[11,R[22],E,E,86,[[["self"]],[T]]],[11,R[24],E,E,86,[[["self"]],[R[26]]]],[11,R[20],E,E,88,[[[U]],[R[23]]]],[11,"into",E,E,88,[[],[U]]],[11,"from",E,E,88,[[[T]],[T]]],[11,R[21],E,E,88,[[],[R[23]]]],[11,R[25],E,E,88,[[["self"]],[T]]],[11,R[22],E,E,88,[[["self"]],[T]]],[11,R[24],E,E,88,[[["self"]],[R[26]]]],[11,R[20],E,E,87,[[[U]],[R[23]]]],[11,"into",E,E,87,[[],[U]]],[11,"from",E,E,87,[[[T]],[T]]],[11,R[21],E,E,87,[[],[R[23]]]],[11,R[25],E,E,87,[[["self"]],[T]]],[11,R[22],E,E,87,[[["self"]],[T]]],[11,R[24],E,E,87,[[["self"]],[R[26]]]],[11,R[189],E,E,87,[[["self"]],[T]]],[11,R[187],E,E,87,[[["self"],[T]]]],[11,R[20],R[751],E,89,[[[U]],[R[23]]]],[11,"into",E,E,89,[[],[U]]],[11,"from",E,E,89,[[[T]],[T]]],[11,R[21],E,E,89,[[],[R[23]]]],[11,R[25],E,E,89,[[["self"]],[T]]],[11,R[22],E,E,89,[[["self"]],[T]]],[11,R[24],E,E,89,[[["self"]],[R[26]]]],[11,R[20],E,E,90,[[[U]],[R[23]]]],[11,"into",E,E,90,[[],[U]]],[11,"from",E,E,90,[[[T]],[T]]],[11,R[21],E,E,90,[[],[R[23]]]],[11,R[25],E,E,90,[[["self"]],[T]]],[11,R[22],E,E,90,[[["self"]],[T]]],[11,R[24],E,E,90,[[["self"]],[R[26]]]],[11,R[189],E,E,90,[[["self"]],[T]]],[11,R[187],E,E,90,[[["self"],[T]]]],[11,"bit",E,E,90,[[["self"],[R[4]]],["bool"]]],[11,R[752],E,E,90,[[["self"],[R[4]],["bool"]]]],[11,R[20],E,E,91,[[[U]],[R[23]]]],[11,"into",E,E,91,[[],[U]]],[11,"from",E,E,91,[[[T]],[T]]],[11,R[21],E,E,91,[[],[R[23]]]],[11,R[25],E,E,91,[[["self"]],[T]]],[11,R[22],E,E,91,[[["self"]],[T]]],[11,R[24],E,E,91,[[["self"]],[R[26]]]],[11,R[189],E,E,91,[[["self"]],[T]]],[11,R[187],E,E,91,[[["self"],[T]]]],[11,"bit",E,E,91,[[["self"],[R[4]]],["bool"]]],[11,R[752],E,E,91,[[["self"],[R[4]],["bool"]]]],[11,R[20],E,E,92,[[[U]],[R[23]]]],[11,"into",E,E,92,[[],[U]]],[11,"from",E,E,92,[[[T]],[T]]],[11,R[21],E,E,92,[[],[R[23]]]],[11,R[25],E,E,92,[[["self"]],[T]]],[11,R[22],E,E,92,[[["self"]],[T]]],[11,R[24],E,E,92,[[["self"]],[R[26]]]],[11,R[189],E,E,92,[[["self"]],[T]]],[11,R[187],E,E,92,[[["self"],[T]]]],[11,"bit",E,E,92,[[["self"],[R[4]]],["bool"]]],[11,R[752],E,E,92,[[["self"],[R[4]],["bool"]]]],[11,R[20],E,E,93,[[[U]],[R[23]]]],[11,"into",E,E,93,[[],[U]]],[11,"from",E,E,93,[[[T]],[T]]],[11,R[21],E,E,93,[[],[R[23]]]],[11,R[25],E,E,93,[[["self"]],[T]]],[11,R[22],E,E,93,[[["self"]],[T]]],[11,R[24],E,E,93,[[["self"]],[R[26]]]],[11,R[189],E,E,93,[[["self"]],[T]]],[11,R[187],E,E,93,[[["self"],[T]]]],[11,R[20],E,E,94,[[[U]],[R[23]]]],[11,"into",E,E,94,[[],[U]]],[11,"from",E,E,94,[[[T]],[T]]],[11,R[21],E,E,94,[[],[R[23]]]],[11,R[25],E,E,94,[[["self"]],[T]]],[11,R[22],E,E,94,[[["self"]],[T]]],[11,R[24],E,E,94,[[["self"]],[R[26]]]],[11,R[20],E,E,95,[[[U]],[R[23]]]],[11,"into",E,E,95,[[],[U]]],[11,"from",E,E,95,[[[T]],[T]]],[11,R[21],E,E,95,[[],[R[23]]]],[11,R[25],E,E,95,[[["self"]],[T]]],[11,R[22],E,E,95,[[["self"]],[T]]],[11,R[24],E,E,95,[[["self"]],[R[26]]]],[11,R[20],E,E,96,[[[U]],[R[23]]]],[11,"into",E,E,96,[[],[U]]],[11,"from",E,E,96,[[[T]],[T]]],[11,R[21],E,E,96,[[],[R[23]]]],[11,R[25],E,E,96,[[["self"]],[T]]],[11,R[22],E,E,96,[[["self"]],[T]]],[11,R[24],E,E,96,[[["self"]],[R[26]]]],[11,R[189],E,E,96,[[["self"]],[T]]],[11,R[187],E,E,96,[[["self"],[T]]]],[11,R[20],E,E,97,[[[U]],[R[23]]]],[11,"into",E,E,97,[[],[U]]],[11,"from",E,E,97,[[[T]],[T]]],[11,R[21],E,E,97,[[],[R[23]]]],[11,R[25],E,E,97,[[["self"]],[T]]],[11,R[22],E,E,97,[[["self"]],[T]]],[11,R[24],E,E,97,[[["self"]],[R[26]]]],[11,R[189],E,E,97,[[["self"]],[T]]],[11,R[187],E,E,97,[[["self"],[T]]]],[11,R[20],R[753],E,98,[[[U]],[R[23]]]],[11,"into",E,E,98,[[],[U]]],[11,"from",E,E,98,[[[T]],[T]]],[11,R[21],E,E,98,[[],[R[23]]]],[11,R[25],E,E,98,[[["self"]],[T]]],[11,R[22],E,E,98,[[["self"]],[T]]],[11,R[24],E,E,98,[[["self"]],[R[26]]]],[11,R[20],E,E,99,[[[U]],[R[23]]]],[11,"into",E,E,99,[[],[U]]],[11,"from",E,E,99,[[[T]],[T]]],[11,R[21],E,E,99,[[],[R[23]]]],[11,R[25],E,E,99,[[["self"]],[T]]],[11,R[22],E,E,99,[[["self"]],[T]]],[11,R[24],E,E,99,[[["self"]],[R[26]]]],[11,R[20],E,E,100,[[[U]],[R[23]]]],[11,"into",E,E,100,[[],[U]]],[11,"from",E,E,100,[[[T]],[T]]],[11,R[21],E,E,100,[[],[R[23]]]],[11,R[25],E,E,100,[[["self"]],[T]]],[11,R[22],E,E,100,[[["self"]],[T]]],[11,R[24],E,E,100,[[["self"]],[R[26]]]],[11,"bit",E,E,100,[[["self"],[R[4]]],["bool"]]],[11,R[752],E,E,100,[[["self"],[R[4]],["bool"]]]],[11,R[20],E,E,101,[[[U]],[R[23]]]],[11,"into",E,E,101,[[],[U]]],[11,"from",E,E,101,[[[T]],[T]]],[11,R[21],E,E,101,[[],[R[23]]]],[11,R[25],E,E,101,[[["self"]],[T]]],[11,R[22],E,E,101,[[["self"]],[T]]],[11,R[24],E,E,101,[[["self"]],[R[26]]]],[11,R[189],E,E,101,[[["self"]],[T]]],[11,R[187],E,E,101,[[["self"],[T]]]],[11,R[20],R[659],E,102,[[[U]],[R[23]]]],[11,"into",E,E,102,[[],[U]]],[11,"from",E,E,102,[[[T]],[T]]],[11,R[21],E,E,102,[[],[R[23]]]],[11,R[25],E,E,102,[[["self"]],[T]]],[11,R[22],E,E,102,[[["self"]],[T]]],[11,R[24],E,E,102,[[["self"]],[R[26]]]],[11,R[20],E,E,103,[[[U]],[R[23]]]],[11,"into",E,E,103,[[],[U]]],[11,"from",E,E,103,[[[T]],[T]]],[11,R[21],E,E,103,[[],[R[23]]]],[11,R[25],E,E,103,[[["self"]],[T]]],[11,R[22],E,E,103,[[["self"]],[T]]],[11,R[24],E,E,103,[[["self"]],[R[26]]]],[11,R[20],E,E,104,[[[U]],[R[23]]]],[11,"into",E,E,104,[[],[U]]],[11,"from",E,E,104,[[[T]],[T]]],[11,R[21],E,E,104,[[],[R[23]]]],[11,R[25],E,E,104,[[["self"]],[T]]],[11,R[22],E,E,104,[[["self"]],[T]]],[11,R[24],E,E,104,[[["self"]],[R[26]]]],[11,R[20],E,E,105,[[[U]],[R[23]]]],[11,"into",E,E,105,[[],[U]]],[11,"from",E,E,105,[[[T]],[T]]],[11,R[21],E,E,105,[[],[R[23]]]],[11,R[25],E,E,105,[[["self"]],[T]]],[11,R[22],E,E,105,[[["self"]],[T]]],[11,R[24],E,E,105,[[["self"]],[R[26]]]],[11,R[20],E,E,106,[[[U]],[R[23]]]],[11,"into",E,E,106,[[],[U]]],[11,"from",E,E,106,[[[T]],[T]]],[11,R[21],E,E,106,[[],[R[23]]]],[11,R[25],E,E,106,[[["self"]],[T]]],[11,R[22],E,E,106,[[["self"]],[T]]],[11,R[24],E,E,106,[[["self"]],[R[26]]]],[11,R[20],E,E,107,[[[U]],[R[23]]]],[11,"into",E,E,107,[[],[U]]],[11,"from",E,E,107,[[[T]],[T]]],[11,R[21],E,E,107,[[],[R[23]]]],[11,R[25],E,E,107,[[["self"]],[T]]],[11,R[22],E,E,107,[[["self"]],[T]]],[11,R[24],E,E,107,[[["self"]],[R[26]]]],[11,R[20],R[754],E,108,[[[U]],[R[23]]]],[11,"into",E,E,108,[[],[U]]],[11,"from",E,E,108,[[[T]],[T]]],[11,R[21],E,E,108,[[],[R[23]]]],[11,R[25],E,E,108,[[["self"]],[T]]],[11,R[22],E,E,108,[[["self"]],[T]]],[11,R[24],E,E,108,[[["self"]],[R[26]]]],[11,R[20],E,E,109,[[[U]],[R[23]]]],[11,"into",E,E,109,[[],[U]]],[11,"from",E,E,109,[[[T]],[T]]],[11,R[21],E,E,109,[[],[R[23]]]],[11,R[25],E,E,109,[[["self"]],[T]]],[11,R[22],E,E,109,[[["self"]],[T]]],[11,R[24],E,E,109,[[["self"]],[R[26]]]],[11,R[20],R[755],E,110,[[[U]],[R[23]]]],[11,"into",E,E,110,[[],[U]]],[11,"from",E,E,110,[[[T]],[T]]],[11,R[21],E,E,110,[[],[R[23]]]],[11,R[25],E,E,110,[[["self"]],[T]]],[11,R[22],E,E,110,[[["self"]],[T]]],[11,R[24],E,E,110,[[["self"]],[R[26]]]],[11,R[20],E,E,111,[[[U]],[R[23]]]],[11,"into",E,E,111,[[],[U]]],[11,"from",E,E,111,[[[T]],[T]]],[11,R[21],E,E,111,[[],[R[23]]]],[11,R[25],E,E,111,[[["self"]],[T]]],[11,R[22],E,E,111,[[["self"]],[T]]],[11,R[24],E,E,111,[[["self"]],[R[26]]]],[11,R[20],E,E,112,[[[U]],[R[23]]]],[11,"into",E,E,112,[[],[U]]],[11,"from",E,E,112,[[[T]],[T]]],[11,R[21],E,E,112,[[],[R[23]]]],[11,R[25],E,E,112,[[["self"]],[T]]],[11,R[22],E,E,112,[[["self"]],[T]]],[11,R[24],E,E,112,[[["self"]],[R[26]]]],[11,R[20],E,E,113,[[[U]],[R[23]]]],[11,"into",E,E,113,[[],[U]]],[11,"from",E,E,113,[[[T]],[T]]],[11,R[21],E,E,113,[[],[R[23]]]],[11,R[25],E,E,113,[[["self"]],[T]]],[11,R[22],E,E,113,[[["self"]],[T]]],[11,R[24],E,E,113,[[["self"]],[R[26]]]],[11,R[192],E,E,113,[[["self"]],["string"]]],[11,R[20],R[756],E,115,[[[U]],[R[23]]]],[11,"into",E,E,115,[[],[U]]],[11,"from",E,E,115,[[[T]],[T]]],[11,R[21],E,E,115,[[],[R[23]]]],[11,R[25],E,E,115,[[["self"]],[T]]],[11,R[22],E,E,115,[[["self"]],[T]]],[11,R[24],E,E,115,[[["self"]],[R[26]]]],[11,R[20],E,E,116,[[[U]],[R[23]]]],[11,"into",E,E,116,[[],[U]]],[11,"from",E,E,116,[[[T]],[T]]],[11,R[21],E,E,116,[[],[R[23]]]],[11,R[25],E,E,116,[[["self"]],[T]]],[11,R[22],E,E,116,[[["self"]],[T]]],[11,R[24],E,E,116,[[["self"]],[R[26]]]],[11,R[20],R[670],E,117,[[[U]],[R[23]]]],[11,"into",E,E,117,[[],[U]]],[11,"from",E,E,117,[[[T]],[T]]],[11,R[21],E,E,117,[[],[R[23]]]],[11,R[25],E,E,117,[[["self"]],[T]]],[11,R[22],E,E,117,[[["self"]],[T]]],[11,R[24],E,E,117,[[["self"]],[R[26]]]],[11,R[20],E,E,118,[[[U]],[R[23]]]],[11,"into",E,E,118,[[],[U]]],[11,"from",E,E,118,[[[T]],[T]]],[11,R[21],E,E,118,[[],[R[23]]]],[11,R[25],E,E,118,[[["self"]],[T]]],[11,R[22],E,E,118,[[["self"]],[T]]],[11,R[24],E,E,118,[[["self"]],[R[26]]]],[11,R[20],E,E,119,[[[U]],[R[23]]]],[11,"into",E,E,119,[[],[U]]],[11,"from",E,E,119,[[[T]],[T]]],[11,R[21],E,E,119,[[],[R[23]]]],[11,R[25],E,E,119,[[["self"]],[T]]],[11,R[22],E,E,119,[[["self"]],[T]]],[11,R[24],E,E,119,[[["self"]],[R[26]]]],[11,R[20],E,E,120,[[[U]],[R[23]]]],[11,"into",E,E,120,[[],[U]]],[11,"from",E,E,120,[[[T]],[T]]],[11,R[21],E,E,120,[[],[R[23]]]],[11,R[25],E,E,120,[[["self"]],[T]]],[11,R[22],E,E,120,[[["self"]],[T]]],[11,R[24],E,E,120,[[["self"]],[R[26]]]],[11,R[20],E,E,121,[[[U]],[R[23]]]],[11,"into",E,E,121,[[],[U]]],[11,"from",E,E,121,[[[T]],[T]]],[11,R[21],E,E,121,[[],[R[23]]]],[11,R[25],E,E,121,[[["self"]],[T]]],[11,R[22],E,E,121,[[["self"]],[T]]],[11,R[24],E,E,121,[[["self"]],[R[26]]]],[11,R[20],E,E,122,[[[U]],[R[23]]]],[11,"into",E,E,122,[[],[U]]],[11,"from",E,E,122,[[[T]],[T]]],[11,R[21],E,E,122,[[],[R[23]]]],[11,R[25],E,E,122,[[["self"]],[T]]],[11,R[22],E,E,122,[[["self"]],[T]]],[11,R[24],E,E,122,[[["self"]],[R[26]]]],[11,R[20],E,E,123,[[[U]],[R[23]]]],[11,"into",E,E,123,[[],[U]]],[11,"from",E,E,123,[[[T]],[T]]],[11,R[21],E,E,123,[[],[R[23]]]],[11,R[25],E,E,123,[[["self"]],[T]]],[11,R[22],E,E,123,[[["self"]],[T]]],[11,R[24],E,E,123,[[["self"]],[R[26]]]],[11,R[20],E,E,124,[[[U]],[R[23]]]],[11,"into",E,E,124,[[],[U]]],[11,"from",E,E,124,[[[T]],[T]]],[11,R[21],E,E,124,[[],[R[23]]]],[11,R[25],E,E,124,[[["self"]],[T]]],[11,R[22],E,E,124,[[["self"]],[T]]],[11,R[24],E,E,124,[[["self"]],[R[26]]]],[11,R[189],E,E,124,[[["self"]],[T]]],[11,R[187],E,E,124,[[["self"],[T]]]],[11,R[20],R[757],E,125,[[[U]],[R[23]]]],[11,"into",E,E,125,[[],[U]]],[11,"from",E,E,125,[[[T]],[T]]],[11,R[21],E,E,125,[[],[R[23]]]],[11,R[25],E,E,125,[[["self"]],[T]]],[11,R[22],E,E,125,[[["self"]],[T]]],[11,R[24],E,E,125,[[["self"]],[R[26]]]],[11,R[20],E,E,126,[[[U]],[R[23]]]],[11,"into",E,E,126,[[],[U]]],[11,"from",E,E,126,[[[T]],[T]]],[11,R[21],E,E,126,[[],[R[23]]]],[11,R[25],E,E,126,[[["self"]],[T]]],[11,R[22],E,E,126,[[["self"]],[T]]],[11,R[24],E,E,126,[[["self"]],[R[26]]]],[11,R[20],R[758],E,127,[[[U]],[R[23]]]],[11,"into",E,E,127,[[],[U]]],[11,"from",E,E,127,[[[T]],[T]]],[11,R[21],E,E,127,[[],[R[23]]]],[11,R[25],E,E,127,[[["self"]],[T]]],[11,R[22],E,E,127,[[["self"]],[T]]],[11,R[24],E,E,127,[[["self"]],[R[26]]]],[11,R[20],R[759],E,128,[[[U]],[R[23]]]],[11,"into",E,E,128,[[],[U]]],[11,"from",E,E,128,[[[T]],[T]]],[11,R[21],E,E,128,[[],[R[23]]]],[11,R[25],E,E,128,[[["self"]],[T]]],[11,R[22],E,E,128,[[["self"]],[T]]],[11,R[24],E,E,128,[[["self"]],[R[26]]]],[11,R[192],E,E,128,[[["self"]],["string"]]],[11,R[189],E,E,128,[[["self"]],[T]]],[11,R[187],E,E,128,[[["self"],[T]]]],[11,R[20],E,E,129,[[[U]],[R[23]]]],[11,"into",E,E,129,[[],[U]]],[11,"from",E,E,129,[[[T]],[T]]],[11,R[21],E,E,129,[[],[R[23]]]],[11,R[25],E,E,129,[[["self"]],[T]]],[11,R[22],E,E,129,[[["self"]],[T]]],[11,R[24],E,E,129,[[["self"]],[R[26]]]],[11,R[192],E,E,129,[[["self"]],["string"]]],[11,R[189],E,E,129,[[["self"]],[T]]],[11,R[187],E,E,129,[[["self"],[T]]]],[11,R[20],E,E,130,[[[U]],[R[23]]]],[11,"into",E,E,130,[[],[U]]],[11,"from",E,E,130,[[[T]],[T]]],[11,R[21],E,E,130,[[],[R[23]]]],[11,R[25],E,E,130,[[["self"]],[T]]],[11,R[22],E,E,130,[[["self"]],[T]]],[11,R[24],E,E,130,[[["self"]],[R[26]]]],[11,R[189],E,E,130,[[["self"]],[T]]],[11,R[187],E,E,130,[[["self"],[T]]]],[11,R[20],E,E,131,[[[U]],[R[23]]]],[11,"into",E,E,131,[[],[U]]],[11,"from",E,E,131,[[[T]],[T]]],[11,R[21],E,E,131,[[],[R[23]]]],[11,R[25],E,E,131,[[["self"]],[T]]],[11,R[22],E,E,131,[[["self"]],[T]]],[11,R[24],E,E,131,[[["self"]],[R[26]]]],[11,R[189],E,E,131,[[["self"]],[T]]],[11,R[187],E,E,131,[[["self"],[T]]]],[11,R[20],E,E,132,[[[U]],[R[23]]]],[11,"into",E,E,132,[[],[U]]],[11,"from",E,E,132,[[[T]],[T]]],[11,R[21],E,E,132,[[],[R[23]]]],[11,R[25],E,E,132,[[["self"]],[T]]],[11,R[22],E,E,132,[[["self"]],[T]]],[11,R[24],E,E,132,[[["self"]],[R[26]]]],[11,R[20],R[706],E,133,[[[U]],[R[23]]]],[11,"into",E,E,133,[[],[U]]],[11,"from",E,E,133,[[[T]],[T]]],[11,R[21],E,E,133,[[],[R[23]]]],[11,R[25],E,E,133,[[["self"]],[T]]],[11,R[22],E,E,133,[[["self"]],[T]]],[11,R[24],E,E,133,[[["self"]],[R[26]]]],[11,R[20],R[760],E,134,[[[U]],[R[23]]]],[11,"into",E,E,134,[[],[U]]],[11,"from",E,E,134,[[[T]],[T]]],[11,R[21],E,E,134,[[],[R[23]]]],[11,R[25],E,E,134,[[["self"]],[T]]],[11,R[22],E,E,134,[[["self"]],[T]]],[11,R[24],E,E,134,[[["self"]],[R[26]]]],[11,R[20],E,E,135,[[[U]],[R[23]]]],[11,"into",E,E,135,[[],[U]]],[11,"from",E,E,135,[[[T]],[T]]],[11,R[21],E,E,135,[[],[R[23]]]],[11,R[25],E,E,135,[[["self"]],[T]]],[11,R[22],E,E,135,[[["self"]],[T]]],[11,R[24],E,E,135,[[["self"]],[R[26]]]],[11,R[20],E,E,136,[[[U]],[R[23]]]],[11,"into",E,E,136,[[],[U]]],[11,"from",E,E,136,[[[T]],[T]]],[11,R[21],E,E,136,[[],[R[23]]]],[11,R[25],E,E,136,[[["self"]],[T]]],[11,R[22],E,E,136,[[["self"]],[T]]],[11,R[24],E,E,136,[[["self"]],[R[26]]]],[11,R[189],E,E,136,[[["self"]],[T]]],[11,R[187],E,E,136,[[["self"],[T]]]],[11,R[20],E,E,137,[[[U]],[R[23]]]],[11,"into",E,E,137,[[],[U]]],[11,"from",E,E,137,[[[T]],[T]]],[11,R[21],E,E,137,[[],[R[23]]]],[11,R[25],E,E,137,[[["self"]],[T]]],[11,R[22],E,E,137,[[["self"]],[T]]],[11,R[24],E,E,137,[[["self"]],[R[26]]]],[11,R[189],E,E,137,[[["self"]],[T]]],[11,R[187],E,E,137,[[["self"],[T]]]],[11,R[20],E,E,138,[[[U]],[R[23]]]],[11,"into",E,E,138,[[],[U]]],[11,"from",E,E,138,[[[T]],[T]]],[11,R[21],E,E,138,[[],[R[23]]]],[11,R[25],E,E,138,[[["self"]],[T]]],[11,R[22],E,E,138,[[["self"]],[T]]],[11,R[24],E,E,138,[[["self"]],[R[26]]]],[11,"bit",E,E,138,[[["self"],[R[4]]],["bool"]]],[11,R[752],E,E,138,[[["self"],[R[4]],["bool"]]]],[11,R[20],E,E,139,[[[U]],[R[23]]]],[11,"into",E,E,139,[[],[U]]],[11,"from",E,E,139,[[[T]],[T]]],[11,R[21],E,E,139,[[],[R[23]]]],[11,R[25],E,E,139,[[["self"]],[T]]],[11,R[22],E,E,139,[[["self"]],[T]]],[11,R[24],E,E,139,[[["self"]],[R[26]]]],[11,"bit",E,E,139,[[["self"],[R[4]]],["bool"]]],[11,R[752],E,E,139,[[["self"],[R[4]],["bool"]]]],[11,R[20],E,E,140,[[[U]],[R[23]]]],[11,"into",E,E,140,[[],[U]]],[11,"from",E,E,140,[[[T]],[T]]],[11,R[21],E,E,140,[[],[R[23]]]],[11,R[25],E,E,140,[[["self"]],[T]]],[11,R[22],E,E,140,[[["self"]],[T]]],[11,R[24],E,E,140,[[["self"]],[R[26]]]],[11,R[20],E,E,141,[[[U]],[R[23]]]],[11,"into",E,E,141,[[],[U]]],[11,"from",E,E,141,[[[T]],[T]]],[11,R[21],E,E,141,[[],[R[23]]]],[11,R[25],E,E,141,[[["self"]],[T]]],[11,R[22],E,E,141,[[["self"]],[T]]],[11,R[24],E,E,141,[[["self"]],[R[26]]]],[11,R[20],E,E,142,[[[U]],[R[23]]]],[11,"into",E,E,142,[[],[U]]],[11,"from",E,E,142,[[[T]],[T]]],[11,R[21],E,E,142,[[],[R[23]]]],[11,R[25],E,E,142,[[["self"]],[T]]],[11,R[22],E,E,142,[[["self"]],[T]]],[11,R[24],E,E,142,[[["self"]],[R[26]]]],[11,R[20],R[761],E,143,[[[U]],[R[23]]]],[11,"into",E,E,143,[[],[U]]],[11,"from",E,E,143,[[[T]],[T]]],[11,R[21],E,E,143,[[],[R[23]]]],[11,R[25],E,E,143,[[["self"]],[T]]],[11,R[22],E,E,143,[[["self"]],[T]]],[11,R[24],E,E,143,[[["self"]],[R[26]]]],[11,R[20],E,E,144,[[[U]],[R[23]]]],[11,"into",E,E,144,[[],[U]]],[11,"from",E,E,144,[[[T]],[T]]],[11,R[21],E,E,144,[[],[R[23]]]],[11,R[25],E,E,144,[[["self"]],[T]]],[11,R[22],E,E,144,[[["self"]],[T]]],[11,R[24],E,E,144,[[["self"]],[R[26]]]],[11,R[189],E,E,144,[[["self"]],[T]]],[11,R[187],E,E,144,[[["self"],[T]]]],[11,R[20],E,E,145,[[[U]],[R[23]]]],[11,"into",E,E,145,[[],[U]]],[11,"from",E,E,145,[[[T]],[T]]],[11,R[21],E,E,145,[[],[R[23]]]],[11,R[25],E,E,145,[[["self"]],[T]]],[11,R[22],E,E,145,[[["self"]],[T]]],[11,R[24],E,E,145,[[["self"]],[R[26]]]],[11,R[189],E,E,145,[[["self"]],[T]]],[11,R[187],E,E,145,[[["self"],[T]]]],[11,R[20],E,E,146,[[[U]],[R[23]]]],[11,"into",E,E,146,[[],[U]]],[11,"from",E,E,146,[[[T]],[T]]],[11,R[21],E,E,146,[[],[R[23]]]],[11,R[25],E,E,146,[[["self"]],[T]]],[11,R[22],E,E,146,[[["self"]],[T]]],[11,R[24],E,E,146,[[["self"]],[R[26]]]],[11,R[20],R[762],E,147,[[[U]],[R[23]]]],[11,"into",E,E,147,[[],[U]]],[11,"from",E,E,147,[[[T]],[T]]],[11,R[21],E,E,147,[[],[R[23]]]],[11,R[25],E,E,147,[[["self"]],[T]]],[11,R[22],E,E,147,[[["self"]],[T]]],[11,R[24],E,E,147,[[["self"]],[R[26]]]],[11,R[20],R[741],E,149,[[[U]],[R[23]]]],[11,"into",E,E,149,[[],[U]]],[11,"from",E,E,149,[[[T]],[T]]],[11,R[21],E,E,149,[[],[R[23]]]],[11,R[25],E,E,149,[[["self"]],[T]]],[11,R[22],E,E,149,[[["self"]],[T]]],[11,R[24],E,E,149,[[["self"]],[R[26]]]],[11,R[20],E,E,150,[[[U]],[R[23]]]],[11,"into",E,E,150,[[],[U]]],[11,"from",E,E,150,[[[T]],[T]]],[11,R[21],E,E,150,[[],[R[23]]]],[11,R[25],E,E,150,[[["self"]],[T]]],[11,R[22],E,E,150,[[["self"]],[T]]],[11,R[24],E,E,150,[[["self"]],[R[26]]]],[11,R[20],E,E,151,[[[U]],[R[23]]]],[11,"into",E,E,151,[[],[U]]],[11,"from",E,E,151,[[[T]],[T]]],[11,R[21],E,E,151,[[],[R[23]]]],[11,R[25],E,E,151,[[["self"]],[T]]],[11,R[22],E,E,151,[[["self"]],[T]]],[11,R[24],E,E,151,[[["self"]],[R[26]]]],[11,R[20],R[763],E,152,[[[U]],[R[23]]]],[11,"into",E,E,152,[[],[U]]],[11,"from",E,E,152,[[[T]],[T]]],[11,R[21],E,E,152,[[],[R[23]]]],[11,R[25],E,E,152,[[["self"]],[T]]],[11,R[22],E,E,152,[[["self"]],[T]]],[11,R[24],E,E,152,[[["self"]],[R[26]]]],[11,R[20],E,E,153,[[[U]],[R[23]]]],[11,"into",E,E,153,[[],[U]]],[11,"from",E,E,153,[[[T]],[T]]],[11,R[21],E,E,153,[[],[R[23]]]],[11,R[25],E,E,153,[[["self"]],[T]]],[11,R[22],E,E,153,[[["self"]],[T]]],[11,R[24],E,E,153,[[["self"]],[R[26]]]],[11,R[20],E,E,154,[[[U]],[R[23]]]],[11,"into",E,E,154,[[],[U]]],[11,"from",E,E,154,[[[T]],[T]]],[11,R[21],E,E,154,[[],[R[23]]]],[11,R[25],E,E,154,[[["self"]],[T]]],[11,R[22],E,E,154,[[["self"]],[T]]],[11,R[24],E,E,154,[[["self"]],[R[26]]]],[11,R[189],E,E,154,[[["self"]],[T]]],[11,R[187],E,E,154,[[["self"],[T]]]],[11,R[20],R[719],E,156,[[[U]],[R[23]]]],[11,"into",E,E,156,[[],[U]]],[11,"from",E,E,156,[[[T]],[T]]],[11,R[21],E,E,156,[[],[R[23]]]],[11,R[25],E,E,156,[[["self"]],[T]]],[11,R[22],E,E,156,[[["self"]],[T]]],[11,R[24],E,E,156,[[["self"]],[R[26]]]],[11,R[20],E,E,157,[[[U]],[R[23]]]],[11,"into",E,E,157,[[],[U]]],[11,"from",E,E,157,[[[T]],[T]]],[11,R[21],E,E,157,[[],[R[23]]]],[11,R[25],E,E,157,[[["self"]],[T]]],[11,R[22],E,E,157,[[["self"]],[T]]],[11,R[24],E,E,157,[[["self"]],[R[26]]]],[11,R[20],R[764],E,159,[[[U]],[R[23]]]],[11,"into",E,E,159,[[],[U]]],[11,"from",E,E,159,[[[T]],[T]]],[11,R[21],E,E,159,[[],[R[23]]]],[11,R[25],E,E,159,[[["self"]],[T]]],[11,R[22],E,E,159,[[["self"]],[T]]],[11,R[24],E,E,159,[[["self"]],[R[26]]]],[11,R[20],E,E,160,[[[U]],[R[23]]]],[11,"into",E,E,160,[[],[U]]],[11,"from",E,E,160,[[[T]],[T]]],[11,R[21],E,E,160,[[],[R[23]]]],[11,R[25],E,E,160,[[["self"]],[T]]],[11,R[22],E,E,160,[[["self"]],[T]]],[11,R[24],E,E,160,[[["self"]],[R[26]]]],[11,R[20],R[720],E,161,[[[U]],[R[23]]]],[11,"into",E,E,161,[[],[U]]],[11,"from",E,E,161,[[[T]],[T]]],[11,R[21],E,E,161,[[],[R[23]]]],[11,R[25],E,E,161,[[["self"]],[T]]],[11,R[22],E,E,161,[[["self"]],[T]]],[11,R[24],E,E,161,[[["self"]],[R[26]]]],[11,"hash",R[763],E,154,[[["self"],["__ht"]]]],[11,R[212],E,E,154,[[["self"],["poll"]],[[R[47]],[R[5],[R[47]]]]]],[11,"lt",E,E,154,[[["self"],["poll"]],["bool"]]],[11,"le",E,E,154,[[["self"],["poll"]],["bool"]]],[11,"gt",E,E,154,[[["self"],["poll"]],["bool"]]],[11,"ge",E,E,154,[[["self"],["poll"]],["bool"]]],[11,"fmt",E,E,154,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,R[211],E,E,154,[[["self"]]]],[11,"clone",E,E,154,[[["self"]],["poll"]]],[11,R[765],E,E,154,[[],[R[23]]]],[11,R[766],E,E,154,[[],[["poll",[R[5]]],[R[5],[R[23]]]]]],[11,"from_ok",E,E,154,[[],[["poll",[R[5]]],[R[5],[R[23]]]]]],[11,R[765],E,E,154,[[],[R[23]]]],[11,R[766],E,E,154,[[],[[R[23]],["poll",[R[23]]]]]],[11,"from_ok",E,E,154,[[],[[R[23]],["poll",[R[23]]]]]],[11,"cmp",E,E,154,[[["self"],["poll"]],[R[47]]]],[11,"eq",E,E,154,[[["self"],["poll"]],["bool"]]],[11,"ne",E,E,154,[[["self"],["poll"]],["bool"]]],[11,"from",E,E,154,[[[T]],["poll"]]],[11,R[207],R[659],E,106,[[["self"]],[T]]],[11,R[207],E,E,103,[[["self"]],[T]]],[11,R[49],E,E,102,[[],["mutex"]]],[11,R[49],E,E,104,[[],["rwlock"]]],[11,"deref",E,E,103,[[["self"]],[T]]],[11,"deref",E,E,105,[[["self"]],[T]]],[11,"deref",E,E,106,[[["self"]],[T]]],[11,"drop",E,E,106,[[["self"]]]],[11,"drop",E,E,105,[[["self"]]]],[11,"drop",E,"The dropping of the MutexGuard will release the lock it…",103,[[["self"]]]],[11,"fmt",E,E,106,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,103,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,102,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,104,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,107,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,105,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",R[441],E,31,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,31,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,R[211],E,E,31,[[["self"]]]],[11,"clone",E,E,31,[[["self"]],[R[268]]]],[11,"eq",E,E,31,[[["self"],[R[268]]],["bool"]]],[11,"ne",E,E,31,[[["self"],[R[268]]],["bool"]]],[11,"read",R[741],"Read",61,[[["self"]],["u8"]]],[11,"write",E,"Write",61,[[["self"],["u8"]]]],[11,"read",E,"Read",61,[[["self"]],["u16"]]],[11,"write",E,"Write",61,[[["self"],["u16"]]]],[11,"read",E,R[1038],151,[[["self"]],[T]]],[11,"write",E,R[1039],151,[[["self"],[T]]]],[11,"read",E,"Read",61,[[["self"]],["u32"]]],[11,"write",E,"Write",61,[[["self"],["u32"]]]],[11,"clone",E,E,61,[[["self"]],["pio"]]],[11,"poll",R[763],E,153,[[["context"],["pin",["loopfn"]],["loopfn"]],["poll"]]],[11,"fmt",R[741],E,61,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",R[763],E,152,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",R[741],R[1041],150,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",R[763],E,153,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",R[741],R[1040],151,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",R[719],E,157,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",R[741],E,149,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",R[719],E,156,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,R[122],R[728],R[123],18,[[["self"]],["bool"]]],[11,R[124],E,R[125],18,[[["self"]],[[R[82],[R[74]]],[R[74]]]]],[11,R[384],E,R[126],18,[[["self"]],["bool"]]],[11,"flags",E,R[127],18,[[["self"]],[R[138]]]],[11,R[128],E,R[129],18,[[["self"]],[[R[82],[R[74]]],[R[74]]]]],[11,"set",E,R[130],18,[[["self"],[R[138]],[R[74]]]]],[11,R[131],E,R[132],18,[[["self"]]]],[11,R[198],R[729],E,20,[[["self"]]]],[11,R[767],E,E,20,[[],[R[4]]]],[11,R[768],E,R[770],20,[[["self"],[R[4]]],[[R[141]],[R[82],[R[141]]]]]],[11,R[769],E,R[770],20,[[["self"],[R[4]]],[R[141]]]],[11,R[198],E,E,21,[[["self"]]]],[11,R[767],E,E,21,[[],[R[4]]]],[11,R[768],E,"Gets a child [ActivePageTable] through recursive mapping.",21,[[["self"],[R[4]]],[[R[141],[R[771]]],[R[82],[R[141]]]]]],[11,R[769],E,"Creates a child [ActivePageTable], maps it at the given…",21,[[["self"],[R[4]]],[[R[141],[R[771]]],[R[771]]]]],[11,R[198],E,E,22,[[["self"]]]],[11,R[767],E,E,22,[[],[R[4]]]],[11,R[768],E,R[770],22,[[["self"],[R[4]]],[[R[141]],[R[82],[R[141]]]]]],[11,R[769],E,R[770],22,[[["self"],[R[4]]],[R[141]]]],[11,R[198],E,E,23,[[["self"]]]],[11,R[767],E,E,23,[[],[R[4]]]],[11,R[768],E,"Gets the child [InactivePageTable] at the given index.…",23,[[["self"],[R[4]]],[[R[82],[R[141]]],[R[141],[R[772]]]]]],[11,R[769],E,"Creates a child [InactivePageTable] at the given index,…",23,[[["self"],[R[4]]],[[R[772]],[R[141],[R[772]]]]]],[11,R[773],R[389],E,165,[[]]],[11,R[773],R[729],E,167,[[]]],[11,R[774],R[415],E,5,[[["self"]],[R[141]]]],[11,R[775],E,E,5,[[["self"],[R[77]],[R[360]],["i"]]]],[11,"guard",E,E,5,[[["self"],[R[77]],[R[4]]]]],[11,"unmap",E,E,5,[[["self"],[R[77]],[R[4]],["c"]]]],[11,R[776],E,E,5,[[["self"],[R[77]],[R[4]],["c"]]]],[11,R[143],E,E,5,[[["self"],[R[77]],[R[4]]],[[R[5],[R[77]]],[R[77]]]]],[11,R[774],R[729],"Gets the [ActivePageDirectory] through recursive mapping.",166,[[["self"]],[[R[141],[R[203]]],[R[203]]]]],[11,R[774],R[364],"Gets the [InactivePageDirectory] by temporarily mapping it.",0,[[["self"]],[[R[141],[R[204]]],[R[204]]]]],[11,"new",E,E,0,[[],["self"]]],[11,R[363],E,E,0,[[["self"]]]],[11,R[427],E,E,0,[[["self"]]]],[11,R[429],E,E,0,[[["self"]],["bool"]]],[11,R[431],E,E,0,[[],["self"]]],[11,R[777],R[730],E,26,[[["self"]],["bool"]]],[11,R[778],E,E,26,[[["self"]]]],[11,R[777],E,E,28,[[["self"]],["bool"]]],[11,R[778],E,E,28,[[["self"]]]],[11,R[778],R[756],E,116,[[["self"]]]],[11,R[777],E,E,116,[[["self"]],["bool"]]],[11,R[777],R[760],E,137,[[["self"]],["bool"]]],[11,R[778],E,E,137,[[["self"]]]],[11,R[777],R[761],E,145,[[["self"]],["bool"]]],[11,R[778],E,E,145,[[["self"]]]],[11,R[779],R[567],"Allocates a single [PhysicalMemRegion]. Frames are…",169,[[[R[4]]],[[R[23],[R[367],R[268]]],[R[268]],[R[367]]]]],[11,R[780],E,R[781],169,[[[R[4]]],[["vec",[R[367]]],[R[23],["vec",R[268]]],[R[268]]]]],[11,R[782],E,"Frees an allocated physical region.",169,[[[R[367]]]]],[11,R[783],E,"Checks that a physical region is marked allocated.",169,[[[R[4]],[R[74]]],["bool"]]],[11,R[784],E,"Checks that a physical region is marked reserved. This…",169,[[[R[4]],[R[74]]],["bool"]]],[11,"lock",R[659],E,102,[[["self"]],["spinlockguard"]]],[11,"lock",R[754],E,108,[[["self"]],[R[656]]]],[11,"lock",R[659],E,104,[[["self"]],["spinrwlockreadguard"]]],[11,"lock",E,E,104,[[["self"]],["spinrwlockwriteguard"]]],[11,"split_at",R[743],"Splits the given PhysicalMemRegion in two parts, at the…",63,[[["self"],[R[4]]],[[R[268]],[R[5]],[R[23],[R[5],R[268]]]]]],[11,R[785],R[728],E,17,[[["self"]],["bool"]]],[11,R[99],E,E,17,[[["self"]],["bool"]]],[11,R[100],E,E,17,[[["self"]],["bool"]]],[11,R[101],E,E,17,[[["self"]],["bool"]]],[11,R[205],E,E,17,[[["self"]],["bool"]]],[11,R[206],E,E,17,[[["self"]],["bool"]]],[11,"DIRTY",E,E,17,[[["self"]],["bool"]]],[11,R[102],E,E,17,[[["self"]],["bool"]]],[11,"GLOBAL",E,E,17,[[["self"]],["bool"]]],[11,R[103],E,E,17,[[["self"]],["bool"]]],[11,R[786],E,E,17,[[["self"]],["bool"]]],[11,R[105],E,E,17,[[["self"]],["bool"]]],[11,R[975],R[364],E,1,[[["self"]],["bool"]]],[11,R[99],E,E,1,[[["self"]],["bool"]]],[11,R[309],E,E,1,[[["self"]],["bool"]]],[11,R[100],E,E,1,[[["self"]],["bool"]]],[11,"ID",R[733],E,40,[[["self"]],["bool"]]],[11,R[787],E,E,40,[[["self"]],["bool"]]],[11,R[788],E,E,40,[[["self"]],["bool"]]],[11,R[789],E,E,40,[[["self"]],["bool"]]],[11,R[790],E,E,40,[[["self"]],["bool"]]],[11,R[791],E,E,40,[[["self"]],["bool"]]],[11,R[792],E,E,40,[[["self"]],["bool"]]],[11,R[793],E,E,40,[[["self"]],["bool"]]],[11,"IOPL_LOW",E,E,40,[[["self"]],["bool"]]],[11,R[794],E,E,40,[[["self"]],["bool"]]],[11,R[795],E,E,40,[[["self"]],["bool"]]],[11,R[796],E,E,40,[[["self"]],["bool"]]],[11,R[797],E,E,40,[[["self"]],["bool"]]],[11,R[798],E,E,40,[[["self"]],["bool"]]],[11,R[799],E,E,40,[[["self"]],["bool"]]],[11,R[800],E,E,40,[[["self"]],["bool"]]],[11,R[801],E,E,40,[[["self"]],["bool"]]],[11,R[802],E,E,40,[[["self"]],["bool"]]],[11,R[803],R[736],E,48,[[["self"]],["bool"]]],[11,R[804],E,E,48,[[["self"]],["bool"]]],[11,R[805],E,E,48,[[["self"]],["bool"]]],[11,R[806],E,E,48,[[["self"]],["bool"]]],[11,R[807],E,E,48,[[["self"]],["bool"]]],[11,"ICW4",R[748],E,76,[[["self"]],["bool"]]],[11,"SINGLE",E,E,76,[[["self"]],["bool"]]],[11,R[808],E,E,76,[[["self"]],["bool"]]],[11,"LEVEL",E,E,76,[[["self"]],["bool"]]],[11,"INIT",E,E,76,[[["self"]],["bool"]]],[11,R[809],R[749],E,80,[[["self"]],["bool"]]],[11,R[810],E,E,80,[[["self"]],["bool"]]],[11,"GATE_2",E,E,80,[[["self"]],["bool"]]],[11,R[811],E,E,80,[[["self"]],["bool"]]],[11,"OTHER_2",E,E,80,[[["self"]],["bool"]]],[11,"OTHER_3",E,E,80,[[["self"]],["bool"]]],[11,"OTHER_6",E,E,80,[[["self"]],["bool"]]],[11,"OTHER_7",E,E,80,[[["self"]],["bool"]]],[11,R[812],R[751],E,93,[[["self"]],["bool"]]],[11,R[813],E,E,93,[[["self"]],["bool"]]],[11,R[814],E,E,93,[[["self"]],["bool"]]],[11,R[815],E,E,93,[[["self"]],["bool"]]],[11,R[816],E,E,93,[[["self"]],["bool"]]],[11,R[817],E,E,93,[[["self"]],["bool"]]],[11,R[818],E,E,93,[[["self"]],["bool"]]],[11,R[819],E,E,93,[[["self"]],["bool"]]],[11,R[207],R[389],E,11,[[["self"]],[T]]],[11,R[207],R[738],"DerefMut always returns a reference to the table not in…",51,[[["self"]],[R[71]]]],[11,R[207],R[754],E,109,[[["self"]],[T]]],[11,R[207],R[755],E,113,[[["self"]],[T]]],[11,R[207],R[759],E,131,[[["self"]],[T]]],[11,"deref",R[389],E,11,[[["self"]],[T]]],[11,"deref",R[738],"Deref always returns a reference to the table not in use,…",51,[[["self"]],[R[71]]]],[11,"deref",R[740],E,60,[[["self"]],[R[820]]]],[11,"deref",R[746],E,68,[[["self"]],[R[820]]]],[11,"deref",R[749],E,79,[[["self"]],[R[820]]]],[11,"deref",R[754],E,109,[[["self"]],[T]]],[11,"deref",R[755],E,113,[[["self"]],[T]]],[11,"deref",R[759],E,130,[[["self"]],[T]]],[11,"deref",E,E,131,[[["self"]],[T]]],[11,"deref",R[706],E,133,[[["self"]],[R[361]]]],[11,"fmt",R[441],E,32,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[731],E,37,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[740],E,59,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",R[750],E,85,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",R[755],E,113,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[759],E,128,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,129,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",R[415],E,3,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[724],E,6,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[726],E,8,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,9,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[727],E,10,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[364],E,2,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[389],E,165,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[728],E,17,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,18,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",R[729],E,19,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,20,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,21,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,166,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,22,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,23,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[364],E,0,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[725],E,162,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,163,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,164,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[416],E,24,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[415],E,4,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[364],E,1,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[730],E,25,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,26,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,27,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,28,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,29,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[441],E,32,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[731],E,37,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[446],E,36,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,34,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,35,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[733],E,40,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[734],E,41,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,42,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[735],E,43,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[736],E,44,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,45,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,49,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,46,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,47,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,48,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[737],E,50,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[738],E,56,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,51,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,52,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,54,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,57,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,55,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",R[740],E,59,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[742],E,62,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[469],E,39,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,38,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[743],E,64,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,63,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",R[567],E,169,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[747],E,69,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,70,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,71,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,R[1801],72,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,73,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,74,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,75,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[748],E,76,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,77,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,78,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[749],E,83,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,80,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[750],E,84,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,87,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,85,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,88,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[751],E,96,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,97,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,89,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,90,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,91,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,92,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,93,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,95,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[753],E,98,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,101,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,100,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,99,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[754],E,108,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,109,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[755],E,110,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,113,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[756],E,116,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[757],E,125,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,126,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[758],E,127,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[670],E,117,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,118,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,119,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,120,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,123,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,121,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,122,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,124,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[759],E,128,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,129,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,130,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,131,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,132,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[760],E,134,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,135,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,136,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,137,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,138,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,139,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,140,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,141,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[761],E,143,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,144,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,145,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,146,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[762],E,147,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[764],E,159,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,160,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"sub",R[728],R[210],17,[[[R[138]]],[R[138]]]],[11,"sub",R[364],R[210],1,[[[R[360]]],[R[360]]]],[11,"sub",R[733],R[210],40,[[["eflags"]],["eflags"]]],[11,"sub",R[736],R[210],48,[[[R[501]]],[R[501]]]],[11,"sub",R[748],R[210],76,[[["icw1"]],["icw1"]]],[11,"sub",R[749],R[210],80,[[[R[609]]],[R[609]]]],[11,"sub",R[751],R[210],93,[[["error"]],["error"]]],[11,"sub",R[759],R[208],129,[[[R[4]]],[R[77]]]],[11,"sub",E,R[208],128,[[[R[4]]],[R[74]]]],[11,"sub",E,R[209],129,[[[R[77]]],[R[4]]]],[11,"sub",E,R[209],128,[[[R[74]]],[R[4]]]],[11,"eq",R[728],E,17,[[["self"],[R[138]]],["bool"]]],[11,"ne",E,E,17,[[["self"],[R[138]]],["bool"]]],[11,"eq",R[364],E,1,[[["self"],[R[360]]],["bool"]]],[11,"ne",E,E,1,[[["self"],[R[360]]],["bool"]]],[11,"eq",R[733],E,40,[[["self"],["eflags"]],["bool"]]],[11,"ne",E,E,40,[[["self"],["eflags"]],["bool"]]],[11,"eq",R[736],E,49,[[["self"],[R[821]]],["bool"]]],[11,"eq",E,E,48,[[["self"],[R[501]]],["bool"]]],[11,"ne",E,E,48,[[["self"],[R[501]]],["bool"]]],[11,"eq",R[469],E,39,[[["self"],[R[61]]],["bool"]]],[11,"eq",R[748],E,76,[[["self"],["icw1"]],["bool"]]],[11,"ne",E,E,76,[[["self"],["icw1"]],["bool"]]],[11,"eq",R[749],E,80,[[["self"],[R[609]]],["bool"]]],[11,"ne",E,E,80,[[["self"],[R[609]]],["bool"]]],[11,"eq",R[751],E,93,[[["self"],["error"]],["bool"]]],[11,"ne",E,E,93,[[["self"],["error"]],["bool"]]],[11,"eq",R[670],E,124,[[["self"],[R[822]]],["bool"]]],[11,"eq",R[759],E,128,[[["self"],[R[74]]],["bool"]]],[11,"ne",E,E,128,[[["self"],[R[74]]],["bool"]]],[11,"eq",E,E,129,[[["self"],[R[77]]],["bool"]]],[11,"ne",E,E,129,[[["self"],[R[77]]],["bool"]]],[11,R[211],R[728],E,17,[[["self"]]]],[11,R[211],R[364],E,1,[[["self"]]]],[11,R[211],R[733],E,40,[[["self"]]]],[11,R[211],R[736],E,49,[[["self"]]]],[11,R[211],E,E,48,[[["self"]]]],[11,R[211],R[469],E,39,[[["self"]]]],[11,R[211],R[748],E,76,[[["self"]]]],[11,R[211],R[749],E,80,[[["self"]]]],[11,R[211],R[751],E,93,[[["self"]]]],[11,R[211],R[670],E,124,[[["self"]]]],[11,R[211],R[759],E,128,[[["self"]]]],[11,R[211],E,E,129,[[["self"]]]],[11,"cmp",R[728],E,17,[[["self"],[R[138]]],[R[47]]]],[11,"cmp",R[364],E,1,[[["self"],[R[360]]],[R[47]]]],[11,"cmp",R[733],E,40,[[["self"],["eflags"]],[R[47]]]],[11,"cmp",R[736],E,48,[[["self"],[R[501]]],[R[47]]]],[11,"cmp",R[748],E,76,[[["self"],["icw1"]],[R[47]]]],[11,"cmp",R[749],E,80,[[["self"],[R[609]]],[R[47]]]],[11,"cmp",R[751],E,93,[[["self"],["error"]],[R[47]]]],[11,"cmp",R[759],E,128,[[["self"],[R[74]]],[R[47]]]],[11,"cmp",E,E,129,[[["self"],[R[77]]],[R[47]]]],[11,R[212],R[728],E,17,[[["self"],[R[138]]],[[R[5],[R[47]]],[R[47]]]]],[11,"lt",E,E,17,[[["self"],[R[138]]],["bool"]]],[11,"le",E,E,17,[[["self"],[R[138]]],["bool"]]],[11,"gt",E,E,17,[[["self"],[R[138]]],["bool"]]],[11,"ge",E,E,17,[[["self"],[R[138]]],["bool"]]],[11,R[212],R[364],E,1,[[["self"],[R[360]]],[[R[5],[R[47]]],[R[47]]]]],[11,"lt",E,E,1,[[["self"],[R[360]]],["bool"]]],[11,"le",E,E,1,[[["self"],[R[360]]],["bool"]]],[11,"gt",E,E,1,[[["self"],[R[360]]],["bool"]]],[11,"ge",E,E,1,[[["self"],[R[360]]],["bool"]]],[11,R[212],R[733],E,40,[[["self"],["eflags"]],[[R[5],[R[47]]],[R[47]]]]],[11,"lt",E,E,40,[[["self"],["eflags"]],["bool"]]],[11,"le",E,E,40,[[["self"],["eflags"]],["bool"]]],[11,"gt",E,E,40,[[["self"],["eflags"]],["bool"]]],[11,"ge",E,E,40,[[["self"],["eflags"]],["bool"]]],[11,R[212],R[736],E,48,[[["self"],[R[501]]],[[R[5],[R[47]]],[R[47]]]]],[11,"lt",E,E,48,[[["self"],[R[501]]],["bool"]]],[11,"le",E,E,48,[[["self"],[R[501]]],["bool"]]],[11,"gt",E,E,48,[[["self"],[R[501]]],["bool"]]],[11,"ge",E,E,48,[[["self"],[R[501]]],["bool"]]],[11,R[212],R[748],E,76,[[["self"],["icw1"]],[[R[5],[R[47]]],[R[47]]]]],[11,"lt",E,E,76,[[["self"],["icw1"]],["bool"]]],[11,"le",E,E,76,[[["self"],["icw1"]],["bool"]]],[11,"gt",E,E,76,[[["self"],["icw1"]],["bool"]]],[11,"ge",E,E,76,[[["self"],["icw1"]],["bool"]]],[11,R[212],R[749],E,80,[[["self"],[R[609]]],[[R[5],[R[47]]],[R[47]]]]],[11,"lt",E,E,80,[[["self"],[R[609]]],["bool"]]],[11,"le",E,E,80,[[["self"],[R[609]]],["bool"]]],[11,"gt",E,E,80,[[["self"],[R[609]]],["bool"]]],[11,"ge",E,E,80,[[["self"],[R[609]]],["bool"]]],[11,R[212],R[751],E,93,[[["self"],["error"]],[[R[5],[R[47]]],[R[47]]]]],[11,"lt",E,E,93,[[["self"],["error"]],["bool"]]],[11,"le",E,E,93,[[["self"],["error"]],["bool"]]],[11,"gt",E,E,93,[[["self"],["error"]],["bool"]]],[11,"ge",E,E,93,[[["self"],["error"]],["bool"]]],[11,R[212],R[759],E,128,[[["self"],[R[74]]],[[R[5],[R[47]]],[R[47]]]]],[11,"lt",E,E,128,[[["self"],[R[74]]],["bool"]]],[11,"le",E,E,128,[[["self"],[R[74]]],["bool"]]],[11,"gt",E,E,128,[[["self"],[R[74]]],["bool"]]],[11,"ge",E,E,128,[[["self"],[R[74]]],["bool"]]],[11,R[212],E,E,129,[[["self"],[R[77]]],[[R[5],[R[47]]],[R[47]]]]],[11,"lt",E,E,129,[[["self"],[R[77]]],["bool"]]],[11,"le",E,E,129,[[["self"],[R[77]]],["bool"]]],[11,"gt",E,E,129,[[["self"],[R[77]]],["bool"]]],[11,"ge",E,E,129,[[["self"],[R[77]]],["bool"]]],[11,R[823],R[750],R[824],88,[[["self"],["str"]],[[R[23],["error"]],["error"]]]],[11,"add",R[759],R[213],129,[[[R[4]]],[R[77]]]],[11,"add",E,R[213],128,[[[R[4]]],[R[74]]]],[11,R[214],E,R[213],129,[[["self"],[R[4]]]]],[11,R[214],E,R[213],128,[[["self"],[R[4]]]]],[11,R[215],R[728],R[216],17,[[["self"],[R[138]]]]],[11,R[215],R[364],R[216],1,[[["self"],[R[360]]]]],[11,R[215],R[733],R[216],40,[[["self"],["eflags"]]]],[11,R[215],R[736],R[216],48,[[["self"],[R[501]]]]],[11,R[215],R[748],R[216],76,[[["self"],["icw1"]]]],[11,R[215],R[749],R[216],80,[[["self"],[R[609]]]]],[11,R[215],R[751],R[216],93,[[["self"],["error"]]]],[11,R[215],R[759],R[208],129,[[["self"],[R[4]]]]],[11,R[215],E,R[208],128,[[["self"],[R[4]]]]],[11,"not",R[728],R[217],17,[[],[R[138]]]],[11,"not",R[364],R[217],1,[[],[R[360]]]],[11,"not",R[733],R[217],40,[[],["eflags"]]],[11,"not",R[736],R[217],48,[[],[R[501]]]],[11,"not",R[748],R[217],76,[[],["icw1"]]],[11,"not",R[749],R[217],80,[[],[R[609]]]],[11,"not",R[751],R[217],93,[[],["error"]]],[11,R[3],R[728],R[218],17,[[[R[138]]],[R[138]]]],[11,R[3],R[364],R[218],1,[[[R[360]]],[R[360]]]],[11,R[3],R[733],R[218],40,[[["eflags"]],["eflags"]]],[11,R[3],R[736],R[218],48,[[[R[501]]],[R[501]]]],[11,R[3],R[748],R[218],76,[[["icw1"]],["icw1"]]],[11,R[3],R[749],R[218],80,[[[R[609]]],[R[609]]]],[11,R[3],R[751],R[218],93,[[["error"]],["error"]]],[11,"bitor",R[728],R[219],17,[[[R[138]]],[R[138]]]],[11,"bitor",R[364],R[219],1,[[[R[360]]],[R[360]]]],[11,"bitor",R[733],R[219],40,[[["eflags"]],["eflags"]]],[11,"bitor",R[736],R[219],48,[[[R[501]]],[R[501]]]],[11,"bitor",R[748],R[219],76,[[["icw1"]],["icw1"]]],[11,"bitor",R[749],R[219],80,[[[R[609]]],[R[609]]]],[11,"bitor",R[751],R[219],93,[[["error"]],["error"]]],[11,"bitxor",R[728],R[220],17,[[[R[138]]],[R[138]]]],[11,"bitxor",R[364],R[220],1,[[[R[360]]],[R[360]]]],[11,"bitxor",R[733],R[220],40,[[["eflags"]],["eflags"]]],[11,"bitxor",R[736],R[220],48,[[[R[501]]],[R[501]]]],[11,"bitxor",R[748],R[220],76,[[["icw1"]],["icw1"]]],[11,"bitxor",R[749],R[220],80,[[[R[609]]],[R[609]]]],[11,"bitxor",R[751],R[220],93,[[["error"]],["error"]]],[11,R[221],R[728],R[222],17,[[["self"],[R[138]]]]],[11,R[221],R[364],R[222],1,[[["self"],[R[360]]]]],[11,R[221],R[733],R[222],40,[[["self"],["eflags"]]]],[11,R[221],R[736],R[222],48,[[["self"],[R[501]]]]],[11,R[221],R[748],R[222],76,[[["self"],["icw1"]]]],[11,R[221],R[749],R[222],80,[[["self"],[R[609]]]]],[11,R[221],R[751],R[222],93,[[["self"],["error"]]]],[11,R[223],R[728],R[224],17,[[["self"],[R[138]]]]],[11,R[223],R[364],R[224],1,[[["self"],[R[360]]]]],[11,R[223],R[733],R[224],40,[[["self"],["eflags"]]]],[11,R[223],R[736],R[224],48,[[["self"],[R[501]]]]],[11,R[223],R[748],R[224],76,[[["self"],["icw1"]]]],[11,R[223],R[749],R[224],80,[[["self"],[R[609]]]]],[11,R[223],R[751],R[224],93,[[["self"],["error"]]]],[11,R[225],R[728],R[226],17,[[["self"],[R[138]]]]],[11,R[225],R[364],R[226],1,[[["self"],[R[360]]]]],[11,R[225],R[733],R[226],40,[[["self"],["eflags"]]]],[11,R[225],R[736],R[226],48,[[["self"],[R[501]]]]],[11,R[225],R[748],R[226],76,[[["self"],["icw1"]]]],[11,R[225],R[749],R[226],80,[[["self"],[R[609]]]]],[11,R[225],R[751],R[226],93,[[["self"],["error"]]]],[11,"drop",R[727],E,10,[[["self"]]]],[11,"drop",R[389],E,11,[[["self"]]]],[11,"drop",R[729],"When the temporary inactive directory is drop, we unmap it.",23,[[["self"]]]],[11,"drop",E,"When the temporary inactive table is drop, we unmap it.",22,[[["self"]]]],[11,"drop",R[364],"When a process dies, its InactiveHierarchy is dropped. The…",0,[[["self"]]]],[11,"drop",R[734],"We deallocate the stack when it is dropped",41,[[["self"]]]],[11,"drop",R[743],"Dropping a `PhysicalMemRegion` may free its frames.",63,[[["self"]]]],[11,"drop",R[754],E,109,[[["self"]]]],[11,"drop",R[755],E,113,[[["self"]]]],[11,"drop",R[670],E,119,[[["self"]]]],[11,"drop",E,"Late thread death notifications:",120,[[["self"]]]],[11,"drop",R[760],E,137,[[["self"]]]],[11,"drop",R[761],E,145,[[["self"]]]],[11,"drop",R[762],"Unmap the module, but do not deallocate physical memory",147,[[["self"]]]],[11,"drop",R[764],"Dropping a CpuLocalRegion deallocates it.",160,[[["self"]]]],[11,"index",R[736],E,44,[[["self"],[R[4]]]]],[11,R[227],E,E,44,[[["self"],[R[4]]]]],[11,"hash",R[728],E,17,[[["self"],["__h"]]]],[11,"hash",R[364],E,1,[[["self"],["__h"]]]],[11,"hash",R[733],E,40,[[["self"],["__h"]]]],[11,"hash",R[736],E,48,[[["self"],["__h"]]]],[11,"hash",R[748],E,76,[[["self"],["__h"]]]],[11,"hash",R[749],E,80,[[["self"],["__h"]]]],[11,"hash",R[751],E,93,[[["self"],["__h"]]]],[11,"hash",R[759],E,128,[[["self"],["__h"]]]],[11,"hash",E,E,129,[[["self"],["__h"]]]],[11,"next",R[743],E,64,[[["self"]],[[R[5],[R[74]]],[R[74]]]]],[11,R[825],R[759],E,128,[[["self"]],[[R[4]],[R[5],[R[4]]]]]],[11,R[826],E,E,128,[[["self"]],["self"]]],[11,R[827],E,E,128,[[["self"]],["self"]]],[11,"add_one",E,E,128,[[["self"]],["self"]]],[11,"sub_one",E,E,128,[[["self"]],["self"]]],[11,R[828],E,E,128,[[["self"],[R[4]]],[R[5]]]],[11,R[825],E,E,129,[[["self"]],[[R[4]],[R[5],[R[4]]]]]],[11,R[826],E,E,129,[[["self"]],["self"]]],[11,R[827],E,E,129,[[["self"]],["self"]]],[11,"add_one",E,E,129,[[["self"]],["self"]]],[11,"sub_one",E,E,129,[[["self"]],["self"]]],[11,R[828],E,E,129,[[["self"],[R[4]]],[R[5]]]],[11,"extend",R[728],E,17,[[["self"],[R[228]]]]],[11,"extend",R[364],E,1,[[["self"],[R[228]]]]],[11,"extend",R[733],E,40,[[["self"],[R[228]]]]],[11,"extend",R[736],E,48,[[["self"],[R[228]]]]],[11,"extend",R[748],E,76,[[["self"],[R[228]]]]],[11,"extend",R[749],E,80,[[["self"],[R[228]]]]],[11,"extend",R[751],E,93,[[["self"],[R[228]]]]],[11,R[229],R[728],E,17,[[[R[228]]],[R[138]]]],[11,R[229],R[364],E,1,[[[R[228]]],[R[360]]]],[11,R[229],R[733],E,40,[[[R[228]]],["eflags"]]],[11,R[229],R[736],E,48,[[[R[228]]],[R[501]]]],[11,R[229],R[748],E,76,[[[R[228]]],["icw1"]]],[11,R[229],R[749],E,80,[[[R[228]]],[R[609]]]],[11,R[229],R[751],E,93,[[[R[228]]],["error"]]],[11,"into",R[759],E,131,[[],[R[561]]]],[11,"from",R[728],E,17,[[[R[360]]],[R[138]]]],[11,"from",R[364],E,1,[[[R[285]]],["self"]]],[11,"from",R[441],E,31,[[[R[268]]],[R[438]]]],[11,"from",R[736],E,49,[[["u8"]],[R[821]]]],[11,"from",R[469],E,39,[[["u8"]],[R[61]]]],[11,"from",R[751],E,96,[[["u32"]],[R[622]]]],[11,"from",E,E,97,[[["u32"]],[R[627]]]],[11,"from",R[753],E,101,[[["u64"]],[R[622]]]],[11,"from",R[755],"Creates a new mutex in an unlocked state ready for use.…",110,[[[T]],["self"]]],[11,"fmt",R[728],E,17,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[364],E,1,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[733],E,40,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[736],E,48,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[748],E,76,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[749],E,80,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[751],E,93,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[728],E,17,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[364],E,1,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[733],E,40,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[736],E,48,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[748],E,76,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[749],E,80,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[751],E,93,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[728],E,17,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[364],E,1,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[733],E,40,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[736],E,48,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[748],E,76,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[749],E,80,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[751],E,93,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[759],E,128,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,129,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",R[728],E,17,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[364],E,1,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[733],E,40,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[736],E,48,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[748],E,76,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[749],E,80,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[751],E,93,[[["self"],[R[28]]],[R[23]]]],[11,"clone",R[728],E,17,[[["self"]],[R[138]]]],[11,"clone",E,E,18,[[["self"]],["i386entry"]]],[11,"clone",R[364],E,1,[[["self"]],[R[360]]]],[11,"clone",R[730],E,26,[[["self"]],[R[684]]]],[11,"clone",E,E,27,[[["self"]],[R[683]]]],[11,"clone",R[733],E,40,[[["self"]],["eflags"]]],[11,"clone",R[735],E,43,[[["self"]],[R[63]]]],[11,"clone",R[736],E,45,[[["self"]],["idtentry"]]],[11,"clone",E,E,49,[[["self"]],[R[821]]]],[11,"clone",E,E,46,[[["self"]],[R[499]]]],[11,"clone",E,E,48,[[["self"]],[R[501]]]],[11,"clone",R[738],E,56,[[["self"]],["gdtindex"]]],[11,"clone",E,E,54,[[["self"]],[R[71]]]],[11,"clone",E,E,57,[[["self"]],[R[230]]]],[11,"clone",E,E,55,[[["self"]],[R[69]]]],[11,"clone",R[740],E,59,[[["self"]],[R[533]]]],[11,"clone",R[742],E,62,[[["self"]],[R[64]]]],[11,"clone",R[469],E,39,[[["self"]],[R[61]]]],[11,"clone",E,E,38,[[["self"]],[R[72]]]],[11,"clone",R[743],E,64,[[["self"]],["physicalmemregioniter"]]],[11,"clone",R[747],E,69,[[["self"]],["hpetidregister"]]],[11,"clone",E,E,70,[[["self"]],["hpetgeneralconfigurationregister"]]],[11,"clone",E,E,71,[[["self"]],["hpettimerconfigurationregister"]]],[11,"clone",R[748],E,76,[[["self"]],["icw1"]]],[11,"clone",R[749],E,83,[[["self"]],[R[829]]]],[11,"clone",E,E,80,[[["self"]],[R[609]]]],[11,"clone",R[750],E,84,[[["self"]],["comport"]]],[11,"clone",E,E,87,[[["self"]],[R[613]]]],[11,"clone",E,E,85,[[["self"]],[R[614]]]],[11,"clone",R[751],E,96,[[["self"]],[R[622]]]],[11,"clone",E,E,97,[[["self"]],[R[627]]]],[11,"clone",E,E,90,[[["self"]],["localapicversion"]]],[11,"clone",E,E,91,[[["self"]],["localvector"]]],[11,"clone",E,E,92,[[["self"]],["spuriousinterrupt"]]],[11,"clone",E,E,93,[[["self"]],["error"]]],[11,"clone",R[753],E,101,[[["self"]],[R[622]]]],[11,"clone",R[670],E,124,[[["self"]],[R[822]]]],[11,"clone",R[759],E,128,[[["self"]],[R[74]]]],[11,"clone",E,E,129,[[["self"]],[R[77]]]],[11,"clone",E,E,130,[[["self"]],[R[561]]]],[11,"clone",E,E,131,[[["self"]],[R[562]]]],[11,"clone",R[760],E,136,[[["self"]],[R[682]]]],[11,"clone",E,E,137,[[["self"]],["self"]]],[11,"clone",R[761],E,144,[[["self"]],[R[680]]]],[11,"clone",E,E,145,[[["self"]],["self"]]],[11,R[49],R[415],"Creates a ProcessMemory, allocating the…",3,[[],["self"]]],[11,R[49],R[446],E,35,[[],["self"]]],[11,R[49],R[737],"Creates an empty ThreadHardwareContext.",50,[[],["self"]]],[11,R[49],R[738],E,51,[[],["gdtmanager"]]],[11,R[49],E,E,54,[[],[R[71]]]],[11,R[49],E,E,55,[[],["self"]]],[11,R[49],R[740],E,59,[[],[R[533]]]],[11,R[49],R[755],"Creates a `Mutex<T>`, with the `Default` value for T.",110,[[],["mutex"]]],[11,R[49],R[757],E,126,[[],["tlsmanager"]]],[11,R[49],R[670],E,117,[[],["self"]]],[11,R[49],E,"Creates an empty handle table. Note that an empty handle…",122,[[],["self"]]],[11,"alloc",R[746],E,68,[[["self"],["layout"]]]],[11,"dealloc",E,E,68,[[["self"],["layout"]]]],[11,R[231],R[740],E,60,[[["self"]]]],[11,R[231],R[749],E,79,[[["self"]]]],[11,R[231],R[706],E,133,[[["self"]]]],[11,"enabled",R[448],E,33,[[["self"],["metadata"]],["bool"]]],[11,"log",E,E,33,[[["self"],["record"]]]],[11,"flush",E,E,33,[[["self"]]]],[11,"name",R[441],E,32,[[["self"]],[[R[5],["str"]],["str"]]]],[11,"cause",E,E,32,[[["self"]],[[R[5],["fail"]],["fail"]]]],[11,R[442],E,E,32,[[["self"]],[[R[442]],[R[5],[R[442]]]]]],[11,R[830],R[736],E,46,[[["self"],[R[4]]],[T]]],[11,R[831],E,E,46,[[["self"],[R[4]],[T]]]],[11,R[830],R[747],E,69,[[["self"],[R[4]]],[T]]],[11,R[831],E,E,69,[[["self"],[R[4]],[T]]]],[11,R[830],E,E,70,[[["self"],[R[4]]],[T]]],[11,R[831],E,E,70,[[["self"],[R[4]],[T]]]],[11,R[830],E,E,71,[[["self"],[R[4]]],[T]]],[11,R[831],E,E,71,[[["self"],[R[4]],[T]]]],[11,R[830],R[751],E,90,[[["self"],[R[4]]],[T]]],[11,R[831],E,E,90,[[["self"],[R[4]],[T]]]],[11,R[830],E,E,91,[[["self"],[R[4]]],[T]]],[11,R[831],E,E,91,[[["self"],[R[4]],[T]]]],[11,R[830],E,E,92,[[["self"],[R[4]]],[T]]],[11,R[831],E,E,92,[[["self"],[R[4]],[T]]]],[11,R[830],R[753],E,100,[[["self"],[R[4]]],[T]]],[11,R[831],E,E,100,[[["self"],[R[4]],[T]]]],[11,R[830],R[760],E,138,[[["self"],[R[4]]],[T]]],[11,R[831],E,E,138,[[["self"],[R[4]],[T]]]],[11,R[830],E,E,139,[[["self"],[R[4]]],[T]]],[11,R[831],E,E,139,[[["self"],[R[4]],[T]]]],[11,"read",R[751],E,89,[[["self"]]]],[11,"write",E,E,89,[[["self"]]]],[11,"map_physical_region",R[732],E,168,[[["self"],[R[4]]],[R[832]]]],[11,"unmap_physical_region",E,E,168,[[["self"],[R[832]]]]],[11,"make_ret",R[441],R[967],31,[[],["u32"]]],[11,R[968],E,R[969],31,[[["u32"]],[R[268]]]],[11,R[970],E,R[971],31,[[["u32"]],[R[268]]]],[11,R[972],E,R[973],31,[[],["u32"]]],[18,R[833],E,R[934],31,N],[18,R[834],E,R[935],31,N],[18,R[327],E,R[936],31,N],[18,R[835],E,R[937],31,N],[18,R[938],E,R[939],31,N],[18,R[940],E,R[941],31,N],[18,R[836],E,R[942],31,N],[18,R[943],E,R[944],31,N],[18,R[945],E,R[946],31,N],[18,R[947],E,R[948],31,N],[18,R[949],E,R[950],31,N],[18,R[951],E,R[952],31,N],[18,R[953],E,R[954],31,N],[18,R[837],E,R[955],31,N],[18,"Timeout",E,R[956],31,N],[18,"Canceled",E,R[957],31,N],[18,R[838],E,R[958],31,N],[18,R[959],E,R[960],31,N],[18,R[961],E,R[962],31,N],[18,R[963],E,R[964],31,N],[18,R[839],E,R[965],31,N],[18,R[840],E,R[966],31,N],[11,"new",R[741],R[1000],61,[[["u16"]],["pio"]]],[11,"new",R[659],R[842],102,[[[T]],["mutex"]]],[11,R[660],E,R[841],102,[[],[T]]],[11,"lock",E,"Locks the spinlock and returns a guard.",102,[[["self"]],[R[661]]]],[11,R[658],E,"Force unlock the spinlock.",102,[[["self"]]]],[11,R[662],E,"Tries to lock the mutex. If it is already locked, it will…",102,[[["self"]],[[R[661]],[R[5],[R[661]]]]]],[11,"new",E,R[842],104,[[[T]],["rwlock"]]],[11,R[660],E,"Consumes this `RwLock`, returning the underlying data.",104,[[],[T]]],[11,"read",E,"Locks this rwlock with shared read access, blocking the…",104,[[["self"]],[R[843]]]],[11,"try_read",E,"Attempt to acquire this lock with shared read access.",104,[[["self"]],[[R[5],[R[843]]],[R[843]]]]],[11,"force_read_decrement",E,"Force decrement the reader count.",104,[[["self"]]]],[11,"force_write_unlock",E,"Force unlock exclusive write access.",104,[[["self"]]]],[11,"write",E,"Lock this rwlock with exclusive write access, blocking the…",104,[[["self"]],[R[844]]]],[11,"try_write",E,"Attempt to lock this rwlock with exclusive write access.",104,[[["self"]],[[R[5],[R[844]]],[R[844]]]]],[11,"upgradeable_read",E,"Obtain a readable lock guard that can later be upgraded to…",104,[[["self"]],[R[845]]]],[11,"try_upgradeable_read",E,"Tries to obtain an upgradeable lock guard.",104,[[["self"]],[[R[845]],[R[5],[R[845]]]]]],[11,"downgrade",E,"Downgrades the writable lock guard to a readable, shared…",106,[[],[R[843]]]],[18,"INIT",E,"Initialization constant of `Once`.",107,N],[11,"new",E,"Creates a new `Once` value.",107,[[],["once"]]],[11,"call_once",E,"Performs an initialization routine once and only once. The…",107,[[["self"],["f"]],[T]]],[11,"try",E,"Returns a pointer iff the `Once` was previously initialized",107,[[["self"]],[[T],[R[5]]]]],[11,"wait",E,"Like try, but will spin if the `Once` is in the process of…",107,[[["self"]],[[T],[R[5]]]]],[11,"new",R[741],R[1005],149,[[["i"]],["readonly"]]],[11,"read",E,R[12],149,[[["self"]]]],[11,"readf",E,R[13],149,[[["self"]],["bool"]]],[11,"new",E,R[1006],150,[[["i"]],["writeonly"]]],[11,"write",E,R[14],150,[[["self"]]]],[11,"new",E,R[1001],151,[[],["mmio"]]],[11,"map",R[763],R[1519],154,[[["f"]],["poll"]]],[11,"is_ready",E,R[1520],154,[[["self"]],["bool"]]],[11,"is_pending",E,R[1521],154,[[["self"]],["bool"]]],[11,"map_ok",E,R[1522],154,[[["f"]],[[R[23]],["poll",[R[23]]]]]],[11,"map_err",E,R[1523],154,[[["f"]],[[R[23]],["poll",[R[23]]]]]],[11,"new",R[719],R[18],156,[[],["cursorread"]]],[11,"pos",E,R[19],156,[[["self"]],[R[4]]]],[11,"read_u8",E,R[1015],156,[[["self"]],["u8"]]],[11,"read_u16",E,R[1016],156,[[["self"]],["u16"]]],[11,"read_u32",E,R[1017],156,[[["self"]],["u32"]]],[11,"read_u64",E,R[1018],156,[[["self"]],["u64"]]],[11,"assert",E,R[1019],156,[[["self"]]]],[11,"skip_read",E,R[1020],156,[[["self"],[R[4]]]]],[11,"read_raw",E,R[1021],156,[[["self"]],[T]]],[11,"new",E,R[18],157,[[],[R[1007]]]],[11,"pos",E,R[19],157,[[["self"]],[R[4]]]],[11,"skip_write",E,R[1008],157,[[["self"],[R[4]]]]],[11,"write_u8",E,R[1009],157,[[["self"],["u8"]]]],[11,"write_u16",E,R[1010],157,[[["self"],["u16"]]]],[11,"write_u32",E,R[1011],157,[[["self"],["u32"]]]],[11,"write_u64",E,R[1012],157,[[["self"],["u64"]]]],[11,"write",E,R[1013],157,[[["self"]]]],[11,R[846],E,R[1014],157,[[["self"],[T]]]]],"p":[[3,R[398]],[3,R[847]],[4,R[95]],[3,R[848]],[4,R[411]],[4,R[849]],[3,R[850]],[8,R[258]],[3,"Mapping"],[4,R[851]],[3,R[852]],[3,R[249]],[8,R[853]],[8,R[255]],[8,R[854]],[8,R[855]],[8,R[423]],[3,R[856]],[3,R[857]],[3,"Table"],[3,R[248]],[3,R[247]],[3,R[251]],[3,R[250]],[3,R[858]],[3,"Event"],[3,R[665]],[3,R[666]],[3,"IRQEvent"],[3,"IRQState"],[8,"Waitable"],[3,R[859]],[4,R[320]],[3,"Logger"],[3,"Filter"],[3,"Builder"],[3,R[860]],[3,"Filter"],[3,R[240]],[4,R[241]],[3,"EFlags"],[3,R[861]],[3,R[862]],[3,R[239]],[3,"Idt"],[3,"IdtEntry"],[3,R[863]],[3,R[864]],[3,R[865]],[4,"GateType"],[3,R[866]],[3,R[867]],[3,"MainTask"],[3,R[868]],[3,R[236]],[3,R[237]],[4,"GdtIndex"],[4,R[238]],[3,R[869]],[3,R[870]],[3,"IDT"],[3,"Pio"],[3,R[242]],[3,R[565]],[3,R[871]],[3,R[872]],[8,R[873]],[8,R[874]],[3,R[875]],[3,R[876]],[3,R[877]],[3,R[878]],[3,R[879]],[3,R[880]],[3,"Hpet"],[3,R[881]],[3,"ICW1"],[3,R[882]],[3,"Pic"],[3,R[608]],[3,R[883]],[3,"PITPorts"],[3,R[884]],[4,R[885]],[3,"ComPort"],[3,R[886]],[3,R[887]],[4,R[888]],[3,R[889]],[3,R[890]],[3,R[891]],[3,R[892]],[3,R[893]],[3,"Error"],[3,R[894]],[3,R[895]],[4,R[636]],[4,R[896]],[3,R[897]],[3,"IoApic"],[3,R[898]],[4,R[636]],[3,"SpinLock"],[3,R[899]],[3,R[900]],[3,R[901]],[3,R[902]],[3,"Once"],[3,R[903]],[3,R[904]],[3,"Mutex"],[3,R[905]],[3,R[906]],[3,R[907]],[8,"Lock"],[3,R[908]],[3,"IRQTimer"],[3,R[671]],[3,R[909]],[3,R[910]],[3,R[911]],[3,R[912]],[3,R[913]],[4,"Handle"],[4,R[914]],[3,"TLSPage"],[3,R[915]],[3,R[916]],[3,R[243]],[3,R[244]],[3,R[917]],[3,R[918]],[3,"FatPtr"],[3,R[713]],[3,R[919]],[3,"Session"],[3,R[702]],[3,R[703]],[3,R[920]],[3,R[921]],[3,"Request"],[3,"Buffer"],[4,R[922]],[3,"Port"],[3,R[709]],[3,R[710]],[3,R[923]],[3,R[924]],[8,"Io"],[3,R[29]],[3,R[30]],[3,"Mmio"],[4,"Loop"],[3,"LoopFn"],[4,"Poll"],[8,R[31]],[3,R[17]],[3,R[16]],[8,R[925]],[3,R[926]],[3,R[927]],[4,R[928]],[3,R[259]],[3,R[371]],[3,R[405]],[3,"NoFlush"],[3,R[929]],[3,R[401]],[3,R[930]],[3,R[261]]]};
searchIndex["sunrise_keyboard"]={"doc":"Keyboard Service","i":[[3,"Keyboard",R[1649],"Keyboard handling structure.",N,N],[12,"writable_event",E,"The event used to signal changes in the shared memory.",0,N],[12,R[1651],E,"The event returned to the client when requested via IPC.",0,N],[12,"keys_queue",E,"The queue containing the keyboard state received by the…",0,N],[3,R[1440],E,R[1318],N,N],[5,"update_keyboard",E,"Task responsible for signaling KEYBOARD_INSTANCE's event…",N,[[[R[1265]]]]],[5,"main",E,E,N,[[]]],[0,"ps2",E,"PS/2 Keyboard Driver",N,N],[3,"PS2",R[1650],"PS2 keyboard state.",N,N],[12,R[1639],E,"Status Register address",1,N],[12,"data_port",E,"Data Register address",1,N],[12,"event",E,"IRQEvent for the PS/2 keyboard. Triggered each time the…",1,N],[12,"is_capslocked",E,"Flips when the user has toggled the caps lock key. When…",1,N],[12,"is_left_shift",E,"Set to true if the user is currently holding the left…",1,N],[12,"is_right_shift",E,R[1640],1,N],[12,"is_left_ctrl",E,"Set to true if the user is currently holding the left ctrl…",1,N],[12,"is_right_ctrl",E,R[1640],1,N],[12,"is_left_alt",E,"Set to true if the user is currently holding the left alt…",1,N],[12,"is_right_alt",E,"Set to true if the user is currently holding the right alt…",1,N],[3,"LetterKey",E,"A non-control key (lowercase_ascii, uppercase_ascii)",N,N],[12,"lower_case",E,E,2,N],[12,"upper_case",E,E,2,N],[3,"ControlKey",E,"A control key (ctrl, shift, alt, arrows, end, ...)",N,N],[12,"0",E,E,3,N],[3,"KeyEvent",E,"A KeyEvent is the combination of a key and its state",N,N],[12,"key",E,E,4,N],[12,"state",E,E,4,N],[3,R[1642],E,"Primary PS2 controller instance on a classical IBM/PC…",N,N],[12,R[60],E,E,5,N],[4,"Key",E,"A key is either a letter key, a control key, or not…",N,N],[13,"Letter",E,E,6,N],[13,"Control",E,E,6,N],[13,"Scancode",E,E,6,N],[13,"Unknown",E,E,6,N],[4,"State",E,"State of a key on the keyboard.",N,N],[13,"Pressed",E,E,7,N],[13,"Released",E,E,7,N],[5,"read_key",E,R[1647],N,[[],["char"]]],[5,R[1483],E,R[1484],N,[[],[[R[5],["char"]],["char"]]]],[5,"get_event",E,R[1648],N,[[],[R[684]]]],[5,R[1643],E,R[1644],N,[[],["bool"]]],[5,R[1645],E,R[1646],N,[[],[[R[5],[R[1641]]],[R[1641]]]]],[7,R[1642],E,E,N,N],[11,"ctrl",E,"Create a control key with the given human-readable name.",6,[[["str"]],["key"]]],[11,"letter",E,"Create a letter key with the given lowercase and uppercase…",6,[[["u8"]],["key"]]],[11,"scancode",E,"Create a scancode key with the given scancode.",6,[[[R[1510]]],["key"]]],[11,"read_key_event",E,"Reads one or more bytes from the port until it matches a…",4,[[["pio",["u8"]],["u8"]],["keyevent"]]],[11,"handle_control_key",E,"Handle a control key scancode",1,[[["self"],[R[1510]],["state"]]]],[11,"key_to_letter",E,"Gets the letter from the key, accounting for shift and…",1,[[["self"],["letterkey"]],["char"]]],[11,"encode_modifiers",E,"Get a bitfield representing the modifiers of this keyboard",1,[[["self"],["state"]],["u8"]]],[11,R[1643],E,R[1644],1,[[["self"]],["bool"]]],[11,R[1645],E,R[1646],1,[[["self"]],[[R[5],[R[1641]]],[R[1641]]]]],[11,"read_key",E,R[1647],1,[[["self"]],["char"]]],[11,R[1483],E,R[1484],1,[[["self"]],[[R[5],["char"]],["char"]]]],[11,"event_irq",E,R[1648],1,[[["self"]],[R[684]]]],[7,"HEADER",R[1649],E,N,N],[7,R[1630],E,E,N,N],[7,"KEYBOARD_INSTANCE",E,"Global instance of Keyboard.",N,N],[11,"new",E,"Create a new instance of Keyboard.",0,[[],[["error"],[R[23],["error"]]]]],[11,"get_readable_event",E,"Get the readable update event of the Keyboard.",0,[[["self"]],[R[1257]]]],[11,"take_writable_event",E,"Get the writeable update event of the Keyboard.",0,[[["self"]],[[R[5],[R[683]]],[R[683]]]]],[11,"handle_ps2_irq",E,"Handle a PS2 IRQ and push a new key state to the internal…",0,[[["self"]],[R[5]]]],[11,R[1445],E,"Get the last key states on the internal queue.",0,[[["self"]],[["error"],[R[23],["u64","error"]],["u64"]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[20],E,E,0,[[[U]],[R[23]]]],[11,"into",E,E,0,[[],[U]]],[11,R[21],E,E,0,[[],[R[23]]]],[11,R[25],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],[T]]],[11,R[24],E,E,0,[[["self"]],[R[26]]]],[11,"size",E,E,0,[[["self"]],[R[4]]]],[11,"is_cool",E,E,0,[[[R[4]]],["bool"]]],[11,R[1272],E,E,0,[[[R[4]]],[T]]],[11,R[1273],E,E,0,[[[R[4]]],[T]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[20],E,E,8,[[[U]],[R[23]]]],[11,"into",E,E,8,[[],[U]]],[11,R[21],E,E,8,[[],[R[23]]]],[11,R[25],E,E,8,[[["self"]],[T]]],[11,R[22],E,E,8,[[["self"]],[T]]],[11,R[24],E,E,8,[[["self"]],[R[26]]]],[11,"size",E,E,8,[[["self"]],[R[4]]]],[11,"is_cool",E,E,8,[[[R[4]]],["bool"]]],[11,R[1272],E,E,8,[[[R[4]]],[T]]],[11,R[1273],E,E,8,[[[R[4]]],[T]]],[11,R[189],E,E,8,[[["self"]],[T]]],[11,R[187],E,E,8,[[["self"],[T]]]],[11,"from",R[1650],E,1,[[[T]],[T]]],[11,R[20],E,E,1,[[[U]],[R[23]]]],[11,"into",E,E,1,[[],[U]]],[11,R[21],E,E,1,[[],[R[23]]]],[11,R[25],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"]],[T]]],[11,R[24],E,E,1,[[["self"]],[R[26]]]],[11,"size",E,E,1,[[["self"]],[R[4]]]],[11,"is_cool",E,E,1,[[[R[4]]],["bool"]]],[11,R[1272],E,E,1,[[[R[4]]],[T]]],[11,R[1273],E,E,1,[[[R[4]]],[T]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[20],E,E,2,[[[U]],[R[23]]]],[11,"into",E,E,2,[[],[U]]],[11,R[21],E,E,2,[[],[R[23]]]],[11,R[25],E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"]],[T]]],[11,R[24],E,E,2,[[["self"]],[R[26]]]],[11,"size",E,E,2,[[["self"]],[R[4]]]],[11,"is_cool",E,E,2,[[[R[4]]],["bool"]]],[11,R[1272],E,E,2,[[[R[4]]],[T]]],[11,R[1273],E,E,2,[[[R[4]]],[T]]],[11,R[189],E,E,2,[[["self"]],[T]]],[11,R[187],E,E,2,[[["self"],[T]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[20],E,E,3,[[[U]],[R[23]]]],[11,"into",E,E,3,[[],[U]]],[11,R[21],E,E,3,[[],[R[23]]]],[11,R[25],E,E,3,[[["self"]],[T]]],[11,R[22],E,E,3,[[["self"]],[T]]],[11,R[24],E,E,3,[[["self"]],[R[26]]]],[11,"size",E,E,3,[[["self"]],[R[4]]]],[11,"is_cool",E,E,3,[[[R[4]]],["bool"]]],[11,R[1272],E,E,3,[[[R[4]]],[T]]],[11,R[1273],E,E,3,[[[R[4]]],[T]]],[11,R[189],E,E,3,[[["self"]],[T]]],[11,R[187],E,E,3,[[["self"],[T]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[20],E,E,4,[[[U]],[R[23]]]],[11,"into",E,E,4,[[],[U]]],[11,R[21],E,E,4,[[],[R[23]]]],[11,R[25],E,E,4,[[["self"]],[T]]],[11,R[22],E,E,4,[[["self"]],[T]]],[11,R[24],E,E,4,[[["self"]],[R[26]]]],[11,"size",E,E,4,[[["self"]],[R[4]]]],[11,"is_cool",E,E,4,[[[R[4]]],["bool"]]],[11,R[1272],E,E,4,[[[R[4]]],[T]]],[11,R[1273],E,E,4,[[[R[4]]],[T]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[20],E,E,5,[[[U]],[R[23]]]],[11,"into",E,E,5,[[],[U]]],[11,R[21],E,E,5,[[],[R[23]]]],[11,R[25],E,E,5,[[["self"]],[T]]],[11,R[22],E,E,5,[[["self"]],[T]]],[11,R[24],E,E,5,[[["self"]],[R[26]]]],[11,"size",E,E,5,[[["self"]],[R[4]]]],[11,"is_cool",E,E,5,[[[R[4]]],["bool"]]],[11,R[1272],E,E,5,[[[R[4]]],[T]]],[11,R[1273],E,E,5,[[[R[4]]],[T]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[20],E,E,6,[[[U]],[R[23]]]],[11,"into",E,E,6,[[],[U]]],[11,R[21],E,E,6,[[],[R[23]]]],[11,R[25],E,E,6,[[["self"]],[T]]],[11,R[22],E,E,6,[[["self"]],[T]]],[11,R[24],E,E,6,[[["self"]],[R[26]]]],[11,"size",E,E,6,[[["self"]],[R[4]]]],[11,"is_cool",E,E,6,[[[R[4]]],["bool"]]],[11,R[1272],E,E,6,[[[R[4]]],[T]]],[11,R[1273],E,E,6,[[[R[4]]],[T]]],[11,R[189],E,E,6,[[["self"]],[T]]],[11,R[187],E,E,6,[[["self"],[T]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[20],E,E,7,[[[U]],[R[23]]]],[11,"into",E,E,7,[[],[U]]],[11,R[21],E,E,7,[[],[R[23]]]],[11,R[25],E,E,7,[[["self"]],[T]]],[11,R[22],E,E,7,[[["self"]],[T]]],[11,R[24],E,E,7,[[["self"]],[R[26]]]],[11,"size",E,E,7,[[["self"]],[R[4]]]],[11,"is_cool",E,E,7,[[[R[4]]],["bool"]]],[11,R[1272],E,E,7,[[[R[4]]],[T]]],[11,R[1273],E,E,7,[[[R[4]]],[T]]],[11,R[189],E,E,7,[[["self"]],[T]]],[11,R[187],E,E,7,[[["self"],[T]]]],[11,"deref",E,E,5,[[["self"]],["ps2"]]],[11,"eq",E,E,7,[[["self"],["state"]],["bool"]]],[11,"clone",E,E,2,[[["self"]],["letterkey"]]],[11,"clone",E,E,3,[[["self"]],["controlkey"]]],[11,"clone",E,E,6,[[["self"]],["key"]]],[11,"clone",E,E,7,[[["self"]],["state"]]],[11,"clone",R[1649],E,8,[[["self"]],[R[1633]]]],[11,"fmt",R[1650],E,2,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,3,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,6,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1649],E,8,[[["self"],[R[28]]],[R[23]]]],[11,R[49],E,E,8,[[],[R[1633]]]],[11,R[1443],E,E,8,[[["self"],[R[1265]]],[["error"],[R[23],[R[1257],"error"]],[R[1257]]]]],[11,R[1445],E,E,8,[[["self"],[R[1265]]],[["error"],[R[23],["u64","error"]],["u64"]]]],[11,R[231],R[1650],E,5,[[["self"]]]]],"p":[[3,"Keyboard"],[3,"PS2"],[3,"LetterKey"],[3,"ControlKey"],[3,"KeyEvent"],[3,R[1642]],[4,"Key"],[4,"State"],[3,R[1440]]]};
searchIndex["sunrise_libkern"]={"doc":"Types shared by user and kernel","i":[[3,R[315],R[269],"Represents the current state of a memory region: why is it…",N,N],[12,"bits",E,E,0,N],[3,R[316],E,"Low-level attributes of a memory mapping.",N,N],[12,"bits",E,E,1,N],[3,R[317],E,R[1182],N,N],[12,"bits",E,E,2,N],[3,R[318],E,R[1174],N,N],[12,"baseaddr",E,R[1175],3,N],[12,"size",E,R[1176],3,N],[12,"memtype",E,R[931],3,N],[12,"memattr",E,R[1177],3,N],[12,"perms",E,R[1178],3,N],[12,R[1179],E,R[1180],3,N],[12,R[1181],E,"Unknown.",3,N],[3,"TLS",E,"Thread Local Storage region.",N,N],[12,"ptr_self",E,"Pointer pointing to this TLS region (i.e pointing to…",4,N],[12,R[932],E,R[264],4,N],[12,"ipc_command_buffer",E,"Buffer used for IPC. Kernel reads, interprets, and copies…",4,N],[12,R[263],E,R[264],4,N],[12,"ptr_thread_context",E,"User controlled pointer to thread context. Not observed by…",4,N],[3,R[280],E,"A table associating a syscall name string for every…",N,N],[12,R[60],E,E,5,N],[4,R[319],E,"The type of this memory area.",N,N],[13,"Unmapped",E,"Nothing is stored there. Accessing it will page fault. An…",6,N],[13,"Io",E,"Mapped by the kernel during process creation, for every IO…",6,N],[13,"Normal",E,"Mapped by the kernel during process creation, for every…",6,N],[13,"CodeStatic",E,"Mapped by the kernel during process creation, at the…",6,N],[13,"CodeMutable",E,"Transitioned from CodeStatic in…",6,N],[13,"Heap",E,"Mapped using `svcSetHeapSize`.",6,N],[13,R[329],E,"Mapped using `svcMapSharedMemory`.",6,N],[13,"Alias",E,R[265],6,N],[13,"ModuleCodeStatic",E,"Mapped using `svcMapProcessCodeMemory`.",6,N],[13,"ModuleCodeMutable",E,"Transitioned from ModuleCodeStatic in…",6,N],[13,"Ipc",E,"IPC buffers with descriptor flags=0.",6,N],[13,"Stack",E,R[265],6,N],[13,"ThreadLocal",E,"Mapped by the kernel during process creation. The TLS…",6,N],[13,"TransferMemoryIsolated",E,R[266],6,N],[13,R[328],E,R[266],6,N],[13,R[848],E,"Mapped using `svcMapProcessMemory`.",6,N],[13,"Reserved",E,"Reserved for kernel use.",6,N],[13,"NonSecureIpc",E,"IPC buffers with descriptor flags=1.",6,N],[13,"NonDeviceIpc",E,"IPC buffers with descriptor flags=3.",6,N],[13,R[861],E,"Mapped by the kernel during svcCreateThread. Unused.",6,N],[13,"CodeReadOnly",E,R[267],6,N],[13,"CodeWritable",E,R[267],6,N],[0,"error",E,"Kernel errors",N,N],[3,R[320],R[286],R[933],N,N],[12,"0",E,E,7,N],[18,R[833],E,R[934],7,N],[18,R[834],E,R[935],7,N],[18,R[327],E,R[936],7,N],[18,R[835],E,R[937],7,N],[18,R[938],E,R[939],7,N],[18,R[940],E,R[941],7,N],[18,R[836],E,R[942],7,N],[18,R[943],E,R[944],7,N],[18,R[945],E,R[946],7,N],[18,R[947],E,R[948],7,N],[18,R[949],E,R[950],7,N],[18,R[951],E,R[952],7,N],[18,R[953],E,R[954],7,N],[18,R[837],E,R[955],7,N],[18,"Timeout",E,R[956],7,N],[18,"Canceled",E,R[957],7,N],[18,R[838],E,R[958],7,N],[18,R[959],E,R[960],7,N],[18,R[961],E,R[962],7,N],[18,R[963],E,R[964],7,N],[18,R[839],E,R[965],7,N],[18,R[840],E,R[966],7,N],[11,"make_ret",E,R[967],7,[[],["u32"]]],[11,R[968],E,R[969],7,[[["u32"]],[R[268]]]],[11,R[970],E,R[971],7,[[["u32"]],[R[268]]]],[11,R[972],E,R[973],7,[[],["u32"]]],[0,"process",R[269],"Data-structures related to process syscalls.",N,N],[3,R[321],R[287],R[1195],N,N],[12,"0",E,E,8,N],[3,R[322],E,R[1059],N,N],[12,"0",E,E,9,N],[3,"ProcInfo",E,R[1196],N,N],[12,"name",E,R[1197],10,N],[12,R[270],E,R[1198],10,N],[12,"title_id",E,R[1199],10,N],[12,"code_addr",E,R[1200],10,N],[12,R[1201],E,R[1202],10,N],[12,"flags",E,R[1203],10,N],[12,R[1204],E,R[1205],10,N],[12,R[1206],E,R[1207],10,N],[3,R[323],E,R[1046],N,N],[12,"magic",E,R[1047],11,N],[12,"name",E,R[1048],11,N],[12,"title_id",E,R[1049],11,N],[12,R[270],E,R[1050],11,N],[12,R[1051],E,R[1052],11,N],[12,R[1053],E,R[1054],11,N],[12,R[35],E,R[1055],11,N],[12,"flags",E,R[1056],11,N],[12,R[1057],E,R[1058],11,N],[3,R[279],E,R[974],N,N],[12,"0",E,E,12,N],[3,R[324],E,R[1208],N,N],[12,"0",E,E,13,N],[4,R[325],E,R[1183],N,N],[13,R[1184],E,R[1185],14,N],[13,"Applet",E,R[1186],14,N],[13,"Sysmodule",E,R[1187],14,N],[13,"Nvservices",E,R[1188],14,N],[4,R[326],E,R[1189],N,N],[13,"AS32Bit",E,R[1190],15,N],[13,R[1191],E,R[1192],15,N],[13,"AS36Bit",E,R[1193],15,N],[13,"AS39Bit",E,R[1194],15,N],[11,"is_64bit",E,R[271],8,[[["self"]],["bool"]]],[11,"set_64bit",E,R[271],8,[[["self"],["bool"]]]],[11,R[1536],E,R[272],8,[[["self"]],[R[273]]]],[11,R[1537],E,R[272],8,[[["self"],[R[273]]]]],[11,"is_debug",E,R[274],8,[[["self"]],["bool"]]],[11,"set_debug",E,R[274],8,[[["self"],["bool"]]]],[11,"is_aslr",E,R[275],8,[[["self"]],["bool"]]],[11,"set_aslr",E,R[275],8,[[["self"],["bool"]]]],[11,R[1538],E,R[276],8,[[["self"]],["bool"]]],[11,R[1539],E,R[276],8,[[["self"],["bool"]]]],[11,R[1540],E,"unknown.",8,[[["self"]],["bool"]]],[11,R[1541],E,R[277],8,[[["self"]],[R[278]]]],[11,R[1542],E,R[277],8,[[["self"],[R[278]]]]],[11,R[1543],E,"unknown",8,[[["self"]],["bool"]]],[11,"check",E,R[1535],8,[[["self"]],[[R[268]],[R[23],[R[268]]]]]],[18,R[1524],E,R[1525],9,N],[18,R[1526],E,R[1527],9,N],[18,"Created",E,R[1544],12,N],[18,R[1545],E,R[1546],12,N],[18,"Started",E,R[1547],12,N],[18,"Crashed",E,R[1548],12,N],[18,R[1549],E,R[1550],12,N],[18,"Exiting",E,R[1551],12,N],[18,"Exited",E,R[1552],12,N],[18,R[1553],E,R[1554],12,N],[18,R[279],E,R[1555],13,N],[0,"nr",R[269],R[1060],N,N],[17,R[1061],"sunrise_libkern::nr",E,N,N],[17,R[1062],E,E,N,N],[17,R[1063],E,E,N,N],[17,"MapMemory",E,E,N,N],[17,R[1064],E,E,N,N],[17,R[411],E,E,N,N],[17,R[1065],E,E,N,N],[17,R[1066],E,E,N,N],[17,R[1067],E,E,N,N],[17,"ExitThread",E,E,N,N],[17,R[1068],E,E,N,N],[17,R[1069],E,E,N,N],[17,R[1070],E,E,N,N],[17,R[1071],E,E,N,N],[17,R[1072],E,E,N,N],[17,R[1073],E,E,N,N],[17,R[1074],E,E,N,N],[17,"ClearEvent",E,E,N,N],[17,R[1075],E,E,N,N],[17,R[1076],E,E,N,N],[17,R[1077],E,E,N,N],[17,R[1078],E,E,N,N],[17,R[1079],E,E,N,N],[17,R[1080],E,E,N,N],[17,R[1081],E,E,N,N],[17,R[1082],E,E,N,N],[17,R[1083],E,E,N,N],[17,R[1084],E,E,N,N],[17,R[1085],E,E,N,N],[17,R[1086],E,E,N,N],[17,R[1087],E,E,N,N],[17,R[1088],E,E,N,N],[17,R[1089],E,E,N,N],[17,R[1090],E,E,N,N],[17,R[1091],E,E,N,N],[17,R[1092],E,E,N,N],[17,R[1093],E,E,N,N],[17,"Break",E,E,N,N],[17,R[1094],E,E,N,N],[17,R[1095],E,E,N,N],[17,"GetInfo",E,E,N,N],[17,R[1096],E,E,N,N],[17,R[1097],E,E,N,N],[17,R[1098],E,E,N,N],[17,R[1099],E,E,N,N],[17,R[1100],E,E,N,N],[17,R[1101],E,E,N,N],[17,R[1102],E,E,N,N],[17,R[1103],E,E,N,N],[17,R[1104],E,E,N,N],[17,R[1105],E,E,N,N],[17,R[1106],E,E,N,N],[17,R[1107],E,E,N,N],[17,"DumpInfo",E,E,N,N],[17,R[1108],E,E,N,N],[17,R[1109],E,E,N,N],[17,R[1110],E,E,N,N],[17,R[1111],E,E,N,N],[17,R[1112],E,E,N,N],[17,R[1113],E,E,N,N],[17,R[1114],E,E,N,N],[17,R[1115],E,E,N,N],[17,R[1116],E,E,N,N],[17,R[1117],E,E,N,N],[17,R[1118],E,E,N,N],[17,R[1119],E,E,N,N],[17,R[1120],E,E,N,N],[17,R[1121],E,E,N,N],[17,R[1122],E,E,N,N],[17,R[1123],E,E,N,N],[17,R[1124],E,E,N,N],[17,R[1125],E,E,N,N],[17,R[1126],E,E,N,N],[17,R[1127],E,E,N,N],[17,R[1128],E,E,N,N],[17,R[1129],E,E,N,N],[17,R[1130],E,E,N,N],[17,R[1131],E,E,N,N],[17,R[1132],E,E,N,N],[17,R[1133],E,E,N,N],[17,R[1134],E,E,N,N],[17,R[1135],E,E,N,N],[17,R[1136],E,E,N,N],[17,R[1137],E,E,N,N],[17,R[1138],E,E,N,N],[17,R[1139],E,E,N,N],[17,R[1140],E,E,N,N],[17,R[1141],E,E,N,N],[17,R[1142],E,E,N,N],[17,R[1143],E,E,N,N],[17,R[1144],E,E,N,N],[17,R[1145],E,E,N,N],[17,R[1146],E,E,N,N],[17,R[1147],E,E,N,N],[17,R[1148],E,E,N,N],[17,R[1149],E,E,N,N],[17,R[1150],E,E,N,N],[17,R[1151],E,E,N,N],[17,R[1152],E,E,N,N],[17,R[1153],E,E,N,N],[17,"CreatePort",E,E,N,N],[17,R[1154],E,E,N,N],[17,R[1155],E,E,N,N],[17,R[1156],E,E,N,N],[17,R[1157],E,E,N,N],[17,R[1158],E,E,N,N],[17,R[1159],E,E,N,N],[17,R[1160],E,E,N,N],[17,R[1161],E,E,N,N],[17,R[1162],E,E,N,N],[17,R[1163],E,E,N,N],[17,R[1164],E,E,N,N],[17,R[1165],E,E,N,N],[17,R[1166],E,E,N,N],[17,R[1167],E,E,N,N],[17,R[1168],E,E,N,N],[17,R[1169],E,E,N,N],[17,R[1170],E,E,N,N],[17,R[1171],E,E,N,N],[17,R[1172],E,E,N,N],[17,"MaxSvc",E,E,N,N],[6,"IpcBuffer",R[269],"Buffer used for Inter Process Communication. Kernel reads,…",N,N],[7,R[280],E,E,N,N],[17,"_",E,E,N,N],[18,"TY",E,"The low 8 bits are used to keep the type.",0,N],[18,R[288],E,"Allows the use of `svcSetMemoryPermissions` on this memory…",0,N],[18,R[289],E,"Allow writing to read-only segments with…",0,N],[18,R[290],E,"Allows sending this region over IPC.",0,N],[18,R[291],E,R[281],0,N],[18,R[292],E,R[281],0,N],[18,R[293],E,"Allows the use of `svcSetProcessMemoryPermission` on this…",0,N],[18,R[294],E,"Allows remapping this memory region with `svcMapMemory`.",0,N],[18,R[295],E,"Allows unmapping this memory region through…",0,N],[18,R[296],E,"Allows creating Transfer Memory from this memory region…",0,N],[18,R[297],E,"Allows using [query_physical_memory] on this memory region.",0,N],[18,R[298],E,R[282],0,N],[18,R[299],E,R[282],0,N],[18,R[300],E,"Allows using this memory region as an IPC Command Buffer.",0,N],[18,R[301],E,"If true, this memory region is reference…",0,N],[18,R[302],E,"Allows mapping this region accross process boundary…",0,N],[18,R[303],E,"Allows using the `svcSetMemoryAttribute` syscall on this…",0,N],[18,R[304],E,"Allows creating a CodeMemory backed by this memory region.",0,N],[18,R[305],E,"All IPC Buffer Send permissions are allowed by this type.",0,N],[18,R[306],E,"This type can use all IOMMU-related permissions (MapDevice…",0,N],[11,"empty",E,R[106],0,[[],[R[283]]]],[11,"all",E,R[107],0,[[],[R[283]]]],[11,"bits",E,R[108],0,[[["self"]],["u32"]]],[11,R[109],E,R[110],0,[[["u32"]],[[R[5],[R[283]]],[R[283]]]]],[11,R[111],E,R[112],0,[[["u32"]],[R[283]]]],[11,R[147],E,R[113],0,[[["self"]],["bool"]]],[11,"is_all",E,R[114],0,[[["self"]],["bool"]]],[11,R[115],E,R[116],0,[[["self"],[R[283]]],["bool"]]],[11,R[148],E,R[117],0,[[["self"],[R[283]]],["bool"]]],[11,"insert",E,R[118],0,[[["self"],[R[283]]]]],[11,"remove",E,R[119],0,[[["self"],[R[283]]]]],[11,"toggle",E,R[120],0,[[["self"],[R[283]]]]],[11,"set",E,R[121],0,[[["self"],[R[283]],["bool"]]]],[11,"ty",E,"[MemoryType] this state represents.",0,[[],[R[313]]]],[11,"get_memory_state",E,"Get the [MemoryState] associated with a [MemoryType].",6,[[],[R[283]]]],[18,"BORROWED",E,"Is mapped in more than one area.",1,N],[18,R[307],E,"Is mapped through an IPC request.",1,N],[18,R[308],E,"Is a device mapping.",1,N],[18,"UNCACHED",E,"Is caching disabled in the MMU.",1,N],[11,"empty",E,R[106],1,[[],[R[284]]]],[11,"all",E,R[107],1,[[],[R[284]]]],[11,"bits",E,R[108],1,[[["self"]],["u32"]]],[11,R[109],E,R[110],1,[[["u32"]],[[R[284]],[R[5],[R[284]]]]]],[11,R[111],E,R[112],1,[[["u32"]],[R[284]]]],[11,R[147],E,R[113],1,[[["self"]],["bool"]]],[11,"is_all",E,R[114],1,[[["self"]],["bool"]]],[11,R[115],E,R[116],1,[[["self"],[R[284]]],["bool"]]],[11,R[148],E,R[117],1,[[["self"],[R[284]]],["bool"]]],[11,"insert",E,R[118],1,[[["self"],[R[284]]]]],[11,"remove",E,R[119],1,[[["self"],[R[284]]]]],[11,"toggle",E,R[120],1,[[["self"],[R[284]]]]],[11,"set",E,R[121],1,[[["self"],[R[284]],["bool"]]]],[18,R[975],E,R[1529],2,N],[18,R[99],E,R[1530],2,N],[18,R[309],E,R[1531],2,N],[18,"RO",E,R[1532],2,N],[18,"RW",E,R[1533],2,N],[18,"RX",E,R[1534],2,N],[11,"empty",E,R[106],2,[[],[R[285]]]],[11,"all",E,R[107],2,[[],[R[285]]]],[11,"bits",E,R[108],2,[[["self"]],["u32"]]],[11,R[109],E,R[110],2,[[["u32"]],[[R[5],[R[285]]],[R[285]]]]],[11,R[111],E,R[112],2,[[["u32"]],[R[285]]]],[11,R[147],E,R[113],2,[[["self"]],["bool"]]],[11,"is_all",E,R[114],2,[[["self"]],["bool"]]],[11,R[115],E,R[116],2,[[["self"],[R[285]]],["bool"]]],[11,R[148],E,R[117],2,[[["self"],[R[285]]],["bool"]]],[11,"insert",E,R[118],2,[[["self"],[R[285]]]]],[11,"remove",E,R[119],2,[[["self"],[R[285]]]]],[11,"toggle",E,R[120],2,[[["self"],[R[285]]]]],[11,"set",E,R[121],2,[[["self"],["bool"],[R[285]]]]],[11,"check",E,R[1528],2,[[],[[R[23],[R[268]]],[R[268]]]]],[11,R[20],E,E,0,[[[U]],[R[23]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[21],E,E,0,[[],[R[23]]]],[11,R[25],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],[T]]],[11,R[24],E,E,0,[[["self"]],[R[26]]]],[11,R[20],E,E,1,[[[U]],[R[23]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[21],E,E,1,[[],[R[23]]]],[11,R[25],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"]],[T]]],[11,R[24],E,E,1,[[["self"]],[R[26]]]],[11,R[20],E,E,2,[[[U]],[R[23]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[21],E,E,2,[[],[R[23]]]],[11,R[25],E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"]],[T]]],[11,R[24],E,E,2,[[["self"]],[R[26]]]],[11,R[20],E,E,3,[[[U]],[R[23]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[21],E,E,3,[[],[R[23]]]],[11,R[25],E,E,3,[[["self"]],[T]]],[11,R[22],E,E,3,[[["self"]],[T]]],[11,R[24],E,E,3,[[["self"]],[R[26]]]],[11,R[20],E,E,4,[[[U]],[R[23]]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[21],E,E,4,[[],[R[23]]]],[11,R[25],E,E,4,[[["self"]],[T]]],[11,R[22],E,E,4,[[["self"]],[T]]],[11,R[24],E,E,4,[[["self"]],[R[26]]]],[11,R[20],E,E,5,[[[U]],[R[23]]]],[11,"into",E,E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[21],E,E,5,[[],[R[23]]]],[11,R[25],E,E,5,[[["self"]],[T]]],[11,R[22],E,E,5,[[["self"]],[T]]],[11,R[24],E,E,5,[[["self"]],[R[26]]]],[11,R[20],E,E,6,[[[U]],[R[23]]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[21],E,E,6,[[],[R[23]]]],[11,R[25],E,E,6,[[["self"]],[T]]],[11,R[22],E,E,6,[[["self"]],[T]]],[11,R[24],E,E,6,[[["self"]],[R[26]]]],[11,R[20],R[286],E,7,[[[U]],[R[23]]]],[11,"into",E,E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[21],E,E,7,[[],[R[23]]]],[11,R[25],E,E,7,[[["self"]],[T]]],[11,R[22],E,E,7,[[["self"]],[T]]],[11,R[24],E,E,7,[[["self"]],[R[26]]]],[11,R[20],R[287],E,8,[[[U]],[R[23]]]],[11,"into",E,E,8,[[],[U]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[21],E,E,8,[[],[R[23]]]],[11,R[25],E,E,8,[[["self"]],[T]]],[11,R[22],E,E,8,[[["self"]],[T]]],[11,R[24],E,E,8,[[["self"]],[R[26]]]],[11,"bit",E,E,8,[[["self"],[R[4]]],["bool"]]],[11,R[752],E,E,8,[[["self"],[R[4]],["bool"]]]],[11,R[20],E,E,9,[[[U]],[R[23]]]],[11,"into",E,E,9,[[],[U]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[21],E,E,9,[[],[R[23]]]],[11,R[25],E,E,9,[[["self"]],[T]]],[11,R[22],E,E,9,[[["self"]],[T]]],[11,R[24],E,E,9,[[["self"]],[R[26]]]],[11,R[20],E,E,10,[[[U]],[R[23]]]],[11,"into",E,E,10,[[],[U]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[21],E,E,10,[[],[R[23]]]],[11,R[25],E,E,10,[[["self"]],[T]]],[11,R[22],E,E,10,[[["self"]],[T]]],[11,R[24],E,E,10,[[["self"]],[R[26]]]],[11,R[20],E,E,11,[[[U]],[R[23]]]],[11,"into",E,E,11,[[],[U]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[21],E,E,11,[[],[R[23]]]],[11,R[25],E,E,11,[[["self"]],[T]]],[11,R[22],E,E,11,[[["self"]],[T]]],[11,R[24],E,E,11,[[["self"]],[R[26]]]],[11,R[20],E,E,12,[[[U]],[R[23]]]],[11,"into",E,E,12,[[],[U]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[21],E,E,12,[[],[R[23]]]],[11,R[25],E,E,12,[[["self"]],[T]]],[11,R[22],E,E,12,[[["self"]],[T]]],[11,R[24],E,E,12,[[["self"]],[R[26]]]],[11,R[20],E,E,13,[[[U]],[R[23]]]],[11,"into",E,E,13,[[],[U]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[21],E,E,13,[[],[R[23]]]],[11,R[25],E,E,13,[[["self"]],[T]]],[11,R[22],E,E,13,[[["self"]],[T]]],[11,R[24],E,E,13,[[["self"]],[R[26]]]],[11,R[20],E,E,14,[[[U]],[R[23]]]],[11,"into",E,E,14,[[],[U]]],[11,"from",E,E,14,[[[T]],[T]]],[11,R[21],E,E,14,[[],[R[23]]]],[11,R[25],E,E,14,[[["self"]],[T]]],[11,R[22],E,E,14,[[["self"]],[T]]],[11,R[24],E,E,14,[[["self"]],[R[26]]]],[11,R[20],E,E,15,[[[U]],[R[23]]]],[11,"into",E,E,15,[[],[U]]],[11,"from",E,E,15,[[[T]],[T]]],[11,R[21],E,E,15,[[],[R[23]]]],[11,R[25],E,E,15,[[["self"]],[T]]],[11,R[22],E,E,15,[[["self"]],[T]]],[11,R[24],E,E,15,[[["self"]],[R[26]]]],[11,"TY",R[269],E,0,[[["self"]],["bool"]]],[11,R[288],E,E,0,[[["self"]],["bool"]]],[11,R[289],E,E,0,[[["self"]],["bool"]]],[11,R[290],E,E,0,[[["self"]],["bool"]]],[11,R[291],E,E,0,[[["self"]],["bool"]]],[11,R[292],E,E,0,[[["self"]],["bool"]]],[11,R[293],E,E,0,[[["self"]],["bool"]]],[11,R[294],E,E,0,[[["self"]],["bool"]]],[11,R[295],E,E,0,[[["self"]],["bool"]]],[11,R[296],E,E,0,[[["self"]],["bool"]]],[11,R[297],E,E,0,[[["self"]],["bool"]]],[11,R[298],E,E,0,[[["self"]],["bool"]]],[11,R[299],E,E,0,[[["self"]],["bool"]]],[11,R[300],E,E,0,[[["self"]],["bool"]]],[11,R[301],E,E,0,[[["self"]],["bool"]]],[11,R[302],E,E,0,[[["self"]],["bool"]]],[11,R[303],E,E,0,[[["self"]],["bool"]]],[11,R[304],E,E,0,[[["self"]],["bool"]]],[11,R[305],E,E,0,[[["self"]],["bool"]]],[11,R[306],E,E,0,[[["self"]],["bool"]]],[11,"BORROWED",E,E,1,[[["self"]],["bool"]]],[11,R[307],E,E,1,[[["self"]],["bool"]]],[11,R[308],E,E,1,[[["self"]],["bool"]]],[11,"UNCACHED",E,E,1,[[["self"]],["bool"]]],[11,R[975],E,E,2,[[["self"]],["bool"]]],[11,R[99],E,E,2,[[["self"]],["bool"]]],[11,R[309],E,E,2,[[["self"]],["bool"]]],[11,"RO",E,E,2,[[["self"]],["bool"]]],[11,"RW",E,E,2,[[["self"]],["bool"]]],[11,"RX",E,E,2,[[["self"]],["bool"]]],[11,"deref",E,E,5,[[["self"]]]],[11,"fmt",R[286],E,7,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,7,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[287],E,14,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,15,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,8,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,9,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,10,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,11,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,12,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,13,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[269],E,0,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,6,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,1,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,2,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,3,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,"Debug on TLS displays only the address of the IPC command…",4,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"sub",E,R[210],0,[[[R[283]]],[R[283]]]],[11,"sub",E,R[210],1,[[[R[284]]],[R[284]]]],[11,"sub",E,R[210],2,[[[R[285]]],[R[285]]]],[11,"eq",R[286],E,7,[[["self"],[R[268]]],["bool"]]],[11,"ne",E,E,7,[[["self"],[R[268]]],["bool"]]],[11,"eq",R[287],E,9,[[["self"],[R[310]]],["bool"]]],[11,"ne",E,E,9,[[["self"],[R[310]]],["bool"]]],[11,"eq",E,E,12,[[["self"],[R[311]]],["bool"]]],[11,"ne",E,E,12,[[["self"],[R[311]]],["bool"]]],[11,"eq",E,E,13,[[["self"],[R[312]]],["bool"]]],[11,"ne",E,E,13,[[["self"],[R[312]]],["bool"]]],[11,"eq",R[269],E,0,[[["self"],[R[283]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[283]]],["bool"]]],[11,"eq",E,E,6,[[["self"],[R[313]]],["bool"]]],[11,"eq",E,E,1,[[["self"],[R[284]]],["bool"]]],[11,"ne",E,E,1,[[["self"],[R[284]]],["bool"]]],[11,"eq",E,E,2,[[["self"],[R[285]]],["bool"]]],[11,"ne",E,E,2,[[["self"],[R[285]]],["bool"]]],[11,R[211],R[286],E,7,[[["self"]]]],[11,R[211],R[287],E,9,[[["self"]]]],[11,R[211],E,E,12,[[["self"]]]],[11,R[211],E,E,13,[[["self"]]]],[11,R[211],R[269],E,0,[[["self"]]]],[11,R[211],E,E,6,[[["self"]]]],[11,R[211],E,E,1,[[["self"]]]],[11,R[211],E,E,2,[[["self"]]]],[11,"cmp",E,E,0,[[["self"],[R[283]]],[R[47]]]],[11,"cmp",E,E,1,[[["self"],[R[284]]],[R[47]]]],[11,"cmp",E,E,2,[[["self"],[R[285]]],[R[47]]]],[11,R[212],E,E,0,[[["self"],[R[283]]],[[R[5],[R[47]]],[R[47]]]]],[11,"lt",E,E,0,[[["self"],[R[283]]],["bool"]]],[11,"le",E,E,0,[[["self"],[R[283]]],["bool"]]],[11,"gt",E,E,0,[[["self"],[R[283]]],["bool"]]],[11,"ge",E,E,0,[[["self"],[R[283]]],["bool"]]],[11,R[212],E,E,1,[[["self"],[R[284]]],[[R[5],[R[47]]],[R[47]]]]],[11,"lt",E,E,1,[[["self"],[R[284]]],["bool"]]],[11,"le",E,E,1,[[["self"],[R[284]]],["bool"]]],[11,"gt",E,E,1,[[["self"],[R[284]]],["bool"]]],[11,"ge",E,E,1,[[["self"],[R[284]]],["bool"]]],[11,R[212],E,E,2,[[["self"],[R[285]]],[[R[5],[R[47]]],[R[47]]]]],[11,"lt",E,E,2,[[["self"],[R[285]]],["bool"]]],[11,"le",E,E,2,[[["self"],[R[285]]],["bool"]]],[11,"gt",E,E,2,[[["self"],[R[285]]],["bool"]]],[11,"ge",E,E,2,[[["self"],[R[285]]],["bool"]]],[11,R[215],E,R[216],0,[[["self"],[R[283]]]]],[11,R[215],E,R[216],1,[[["self"],[R[284]]]]],[11,R[215],E,R[216],2,[[["self"],[R[285]]]]],[11,"not",E,R[217],0,[[],[R[283]]]],[11,"not",E,R[217],1,[[],[R[284]]]],[11,"not",E,R[217],2,[[],[R[285]]]],[11,R[3],E,R[218],0,[[[R[283]]],[R[283]]]],[11,R[3],E,R[218],1,[[[R[284]]],[R[284]]]],[11,R[3],E,R[218],2,[[[R[285]]],[R[285]]]],[11,"bitor",E,R[219],0,[[[R[283]]],[R[283]]]],[11,"bitor",E,R[219],1,[[[R[284]]],[R[284]]]],[11,"bitor",E,R[219],2,[[[R[285]]],[R[285]]]],[11,"bitxor",E,R[220],0,[[[R[283]]],[R[283]]]],[11,"bitxor",E,R[220],1,[[[R[284]]],[R[284]]]],[11,"bitxor",E,R[220],2,[[[R[285]]],[R[285]]]],[11,R[221],E,R[222],0,[[["self"],[R[283]]]]],[11,R[221],E,R[222],1,[[["self"],[R[284]]]]],[11,R[221],E,R[222],2,[[["self"],[R[285]]]]],[11,R[223],E,R[224],0,[[["self"],[R[283]]]]],[11,R[223],E,R[224],1,[[["self"],[R[284]]]]],[11,R[223],E,R[224],2,[[["self"],[R[285]]]]],[11,R[225],E,R[226],0,[[["self"],[R[283]]]]],[11,R[225],E,R[226],1,[[["self"],[R[284]]]]],[11,R[225],E,R[226],2,[[["self"],[R[285]]]]],[11,"hash",E,E,0,[[["self"],["__h"]]]],[11,"hash",E,E,1,[[["self"],["__h"]]]],[11,"hash",E,E,2,[[["self"],["__h"]]]],[11,"extend",E,E,0,[[["self"],[R[228]]]]],[11,"extend",E,E,1,[[["self"],[R[228]]]]],[11,"extend",E,E,2,[[["self"],[R[228]]]]],[11,R[229],E,E,0,[[[R[228]]],[R[283]]]],[11,R[229],E,E,1,[[[R[228]]],[R[284]]]],[11,R[229],E,E,2,[[[R[228]]],[R[285]]]],[11,"from",R[287],E,14,[[["u32"]],[R[278]]]],[11,"from",E,E,15,[[["u32"]],[R[273]]]],[11,"fmt",R[269],E,0,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,1,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,2,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,0,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,1,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,2,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,0,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,1,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,2,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,0,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,1,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,2,[[["self"],[R[28]]],[R[23]]]],[11,"clone",R[286],E,7,[[["self"]],[R[268]]]],[11,"clone",R[287],E,9,[[["self"]],[R[310]]]],[11,"clone",E,E,11,[[["self"]],[R[314]]]],[11,"clone",E,E,12,[[["self"]],[R[311]]]],[11,"clone",E,E,13,[[["self"]],[R[312]]]],[11,"clone",R[269],E,0,[[["self"]],[R[283]]]],[11,"clone",E,E,6,[[["self"]],[R[313]]]],[11,"clone",E,E,1,[[["self"]],[R[284]]]],[11,"clone",E,E,2,[[["self"]],[R[285]]]],[11,R[49],R[287],E,9,[[],[R[310]]]],[11,R[49],E,E,11,[[],[R[314]]]],[11,R[49],E,E,12,[[],[R[311]]]],[11,R[49],E,E,13,[[],[R[312]]]],[11,R[49],R[269],E,0,[[],[R[283]]]],[11,R[49],E,E,1,[[],[R[284]]]],[11,R[49],E,E,2,[[],[R[285]]]],[11,R[49],E,E,3,[[],[R[564]]]],[11,R[231],E,E,5,[[["self"]]]],[11,R[830],R[287],E,8,[[["self"],[R[4]]],[T]]],[11,R[831],E,E,8,[[["self"],[R[4]],[T]]]]],"p":[[3,R[315]],[3,R[316]],[3,R[317]],[3,R[318]],[3,"TLS"],[3,R[280]],[4,R[319]],[3,R[320]],[3,R[321]],[3,R[322]],[3,"ProcInfo"],[3,R[323]],[3,R[279]],[3,R[324]],[4,R[325]],[4,R[326]]]};
searchIndex["sunrise_libtimezone"]={"doc":"Local Time crate","i":[[3,R[50],R[42],"Represent a TimeZone type info.",N,N],[12,R[33],E,"The GMT offset of the time type info.",0,N],[12,"is_dst",E,"True if the time type info represent a Day Saving Time.",0,N],[12,"abbreviation_list_index",E,"The index inside the TimeZoneRule char array of the…",0,N],[12,"is_std",E,"True if this represent a Standard Time Daylight.",0,N],[12,"is_gmt",E,"True if this represent a GMT time.",0,N],[12,"padding",E,"Explicit padding.",0,N],[3,R[51],E,"Represent the rules defining a TimeZone.",N,N],[12,"timecnt",E,R[36],1,N],[12,"typecnt",E,R[37],1,N],[12,"charcnt",E,R[38],1,N],[12,"goback",E,R[32],1,N],[12,"goahead",E,R[32],1,N],[12,"ats",E,"Time transition timepoints.",1,N],[12,"types",E,"Time transition types.",1,N],[12,"ttis",E,"Time type infos.",1,N],[12,"chars",E,"The chars.",1,N],[12,"default_type",E,"The index of the default type (usually zero).",1,N],[12,R[35],E,"Reserved / Unused space.",1,N],[3,R[52],E,R[1343],N,N],[12,"year",E,"The year of the local time.",2,N],[12,"month",E,"The month of the local time.",2,N],[12,"day",E,"The day of the local time.",2,N],[12,"hour",E,"The hour of the local time.",2,N],[12,"minute",E,"The minute of the local time.",2,N],[12,"second",E,"The seconds of the local time.",2,N],[3,R[53],E,"Represent the aditional information attached to a local…",N,N],[12,R[1344],E,"The day of the week of the local time.",3,N],[12,R[1345],E,"The day of the year of the local time.",3,N],[12,"timezone_name",E,"The name of the timezone of the local time.",3,N],[12,"is_dst",E,"True if the local time represent a Day Saving Time.",3,N],[12,R[33],E,R[1346],3,N],[3,R[54],E,"Represent a local time.",N,N],[12,"time",E,"The local time basic informations.",4,N],[12,"additional_info",E,"Additional information of the local time.",4,N],[4,R[55],E,"Represent a time zone error.",N,N],[13,R[1481],E,"The time values got out of range internally (usually an…",5,N],[13,R[1478],E,R[1479],5,N],[13,R[327],E,"The given Tzif file couldn't be stored to a TimeZoneRule…",5,N],[13,"InvalidData",E,"Some data inside the Tzif file are invalid.",5,N],[13,"InvalidTypeCount",E,"Some data inside the Tzif file are invalid (type…",5,N],[13,"InvalidTimeComparison",E,"An invalid time comparaison occured (is the time in range…",5,N],[13,"Overflow",E,R[1480],5,N],[13,"Unknown",E,"Unknown.",5,N],[5,"create_calendar_time",E,"Create a CalendarTime from a timestamp and a GMT offset.",N,[[["time"],["i32"]],[[R[34]],[R[41],[R[34]]]]]],[0,"conversion",E,"Conversion module",N,N],[3,R[56],R[45],"Represent a buffer used to convert a TzIf file to a…",N,N],[12,"work_buffer",E,"The work buffer containing the TzIf file content.",6,N],[12,"temp_rules",E,"A temporary storage used to store the result of…",6,N],[3,R[57],E,"Represent the header of a Tzif file.",N,N],[12,"magic",E,"The magic number of a Tzif file (\"TZif\").",7,N],[12,"version",E,"The version number of the TzIf file.",7,N],[12,R[35],E,"Reserved for future usage.",7,N],[12,"ttis_gmt_count",E,"The count of GMT TimeTypeInfo.",7,N],[12,"ttis_std_count",E,"The count of Standard Time Daylight TimeTypeInfo.",7,N],[12,"leap_count",E,"The count of leap definitions.",7,N],[12,"time_count",E,R[36],7,N],[12,"type_count",E,R[37],7,N],[12,"char_count",E,R[38],7,N],[3,"Rule",E,"Represent a rule of a POSIX TimeZone name.",N,N],[12,"rule_type",E,"The type of this rule.",8,N],[12,"day",E,R[39],8,N],[12,"week",E,R[39],8,N],[12,"month",E,"The month of this rule.",8,N],[12,"time",E,"The time of this rule.",8,N],[4,R[58],E,"Represent a rule type of a POSIX TimeZone name.",N,N],[13,"JulianDay",E,"Represent a day in the Julian Calendar.",9,N],[13,"DayOfYear",E,"Represent a day of the year.",9,N],[13,"MonthNthDayOfWeek",E,"Represent the month number and the day of the week.",9,N],[13,"Invalid",E,"Invalid type.",9,N],[5,"differ_by_repeat",E,"Return true if t1 - t0 equals to the count of seconds…",N,[[["time"]],["bool"]]],[5,"detzcode",E,"Convert a Tzif 32 bits integer to a platform dependent 32…",N,[[],["i32"]]],[5,"detzcode64",E,"Convert a Tzif 64 bits integer to a platform dependent 64…",N,[[],["i64"]]],[5,"get_qz_name",E,"Get as shrinked slice at the given delimiter.",N,[[["char"]]]],[5,"get_tz_name",E,"Get the timezone name from a given slice.",N,[[]]],[5,"get_num",E,"Parse a number and return the rest if the number is in…",N,[[["i64"],["i64"]],[R[5]]]],[5,"get_secs",E,"Parse a time and return the rest while giving the seconds…",N,[[["i64"]],[R[5]]]],[5,"get_rule",E,"Parse the given rule and return the rest if valid.",N,[[["rule"]],[R[5]]]],[5,"get_offset",E,"Parse the offset of a rule and return the rest if valid.",N,[[["i64"]],[R[5]]]],[5,"translate_rule_to_time",E,"Translate a given rule to a Time.",N,[[["i64"],["rule"]],["time"]]],[5,"parse_timezone_name",E,"Parse a POSIX timezone c string into a TimeZoneRule.",N,[[["bool"],[R[40]]],["bool"]]],[5,"tzif_header_from_bytes",E,"Convert a slice to a ref to a TzifHeader with the…",N,[[],["tzifheader"]]],[5,"load_body",E,"Load the given timezones rules from a given…",N,[[["conversionbuffer"],[R[40]]],[R[41]]]],[17,"GMT_TZ_STRING",E,"GMT POSIX Time Zone abreviation.",N,N],[17,"TZ_DEFAULT_RULE",E,"Default POSIX Time Zone rules.",N,N],[17,"_",E,E,N,N],[0,"misc",R[42],"Misc utils",N,N],[5,"len_cstr","sunrise_libtimezone::misc","Compute the length of a C string.",N,[[],[R[4]]]],[5,"compare_cstr",E,"Compare two C strings.",N,[[],["isize"]]],[0,"utils",R[42],"Utils used for local time managment.",N,N],[5,"increment_overflow","sunrise_libtimezone::utils","Increment the given `ip` with `j` if it doesn't overflow.",N,[[["checkedadd"],["num"],["copy"],[T]],["bool"]]],[5,"normalize_overflow",E,"Normalize and increment the given `ip` with the given…",N,[[[T],[T]],["bool"]]],[5,"is_leap_year",E,"Return true if it's a leap year.",N,[[["i64"]],["bool"]]],[5,"get_leap_days_not_neg",E,"Actual implementation of get_leap_days.",N,[[["i64"]],["i64"]]],[5,"get_leap_days",E,"Get the total count of leap days since year 1.",N,[[["i64"]],["i64"]]],[6,"Time",R[42],"The type used to express time internally.",N,N],[6,"PosixTime",E,"The type used to express time at the API level.",N,N],[6,"TimeZoneResult",E,"The Result of a time conversion.",N,N],[17,"TIME_T_MAX",E,"The max value of the Time type.",N,N],[17,"TIME_T_MIN",E,"The min value of the Time type.",N,N],[17,"TZ_MAX_TIMES",E,"The max number of time transitions that can be stored in a…",N,N],[17,"TZ_MAX_TYPES",E,"The max number of type time infos that can be stored in a…",N,N],[17,"TZ_NAME_MAX",E,"The max size of a POSIX TimeZone name.",N,N],[17,"TZ_MAX_LEAPS",E,"The max number of leaps definition in TzIf files.",N,N],[17,"TZ_MAX_CHARS",E,"The max number of chars that can be stored in a…",N,N],[17,"EPOCH_YEAR",E,"The year of the UNIX Epoch.",N,N],[17,"YEAR_BASE",E,"The year base of the EPOCH_YEAR.",N,N],[17,"EPOCH_WEEK_DAY",E,"The week day of the UNIX Epoch.",N,N],[17,"SECS_PER_MIN",E,"The count of seconds in a minute.",N,N],[17,"MINS_PER_HOUR",E,"The count of minutes in an hour.",N,N],[17,"HOURS_PER_DAY",E,"The count of hours in a day.",N,N],[17,"DAYS_PER_WEEK",E,"The count of days in a week.",N,N],[17,"DAYS_PER_NYEAR",E,"The count of days in a common year.",N,N],[17,"DAYS_PER_LYEAR",E,"The count of days in a leap year.",N,N],[17,"MONS_PER_YEAR",E,"The count of months in a year.",N,N],[17,"SECS_PER_HOUR",E,"The count of seconds in an hour.",N,N],[17,"SECS_PER_DAY",E,"The count of seconds in a day.",N,N],[17,"YEAR_LENGTHS",E,"The year lengths definition (index 0 is a common year,…",N,N],[17,"MON_LENGTHS",E,"The month lengths definition (index 0 is a common year,…",N,N],[17,"YEARS_PER_REPEAT",E,"The number of year before a reset of leap years.",N,N],[17,"AVERAGE_SECS_PER_YEAR",E,"The average count of seconds per year.",N,N],[17,"SECS_PER_REPEAT",E,"The number of seconds before a reset of leap years.",N,N],[17,"_",E,E,N,N],[17,"_",E,E,N,N],[17,"_",E,E,N,N],[17,"_",E,E,N,N],[17,"_",E,E,N,N],[11,"new",E,"Create a new TimeTypeInfo.",0,[[["bool"],["i32"]],["self"]]],[11,R[344],E,R[43],1,[[],["self"]]],[11,"from_mut_bytes",E,R[43],1,[[],["self"]]],[11,"load_rules",E,"Load the given timezones rules from a given slice…",1,[[["self"],[R[40]]],[R[41]]]],[11,R[1349],E,"Convert a PosixTime to a CalendarTime using the current…",1,[[["self"],[R[44]]],[[R[34]],[R[41],[R[34]]]]]],[11,R[1350],E,"Convert a CalendarTime to a PosixTime using the current…",1,[[["self"],[R[46]]],[[R[44]],[R[41],[R[44]]]]]],[11,R[20],E,E,0,[[[U]],[R[23]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[21],E,E,0,[[],[R[23]]]],[11,R[25],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],[T]]],[11,R[24],E,E,0,[[["self"]],[R[26]]]],[11,R[20],E,E,1,[[[U]],[R[23]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[21],E,E,1,[[],[R[23]]]],[11,R[25],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"]],[T]]],[11,R[24],E,E,1,[[["self"]],[R[26]]]],[11,R[20],E,E,2,[[[U]],[R[23]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[21],E,E,2,[[],[R[23]]]],[11,R[25],E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"]],[T]]],[11,R[24],E,E,2,[[["self"]],[R[26]]]],[11,R[20],E,E,3,[[[U]],[R[23]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[21],E,E,3,[[],[R[23]]]],[11,R[25],E,E,3,[[["self"]],[T]]],[11,R[22],E,E,3,[[["self"]],[T]]],[11,R[24],E,E,3,[[["self"]],[R[26]]]],[11,R[20],E,E,4,[[[U]],[R[23]]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[21],E,E,4,[[],[R[23]]]],[11,R[25],E,E,4,[[["self"]],[T]]],[11,R[22],E,E,4,[[["self"]],[T]]],[11,R[24],E,E,4,[[["self"]],[R[26]]]],[11,R[20],E,E,5,[[[U]],[R[23]]]],[11,"into",E,E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[21],E,E,5,[[],[R[23]]]],[11,R[25],E,E,5,[[["self"]],[T]]],[11,R[22],E,E,5,[[["self"]],[T]]],[11,R[24],E,E,5,[[["self"]],[R[26]]]],[11,R[20],R[45],E,6,[[[U]],[R[23]]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[21],E,E,6,[[],[R[23]]]],[11,R[25],E,E,6,[[["self"]],[T]]],[11,R[22],E,E,6,[[["self"]],[T]]],[11,R[24],E,E,6,[[["self"]],[R[26]]]],[11,R[20],E,E,7,[[[U]],[R[23]]]],[11,"into",E,E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[21],E,E,7,[[],[R[23]]]],[11,R[25],E,E,7,[[["self"]],[T]]],[11,R[22],E,E,7,[[["self"]],[T]]],[11,R[24],E,E,7,[[["self"]],[R[26]]]],[11,R[20],E,E,8,[[[U]],[R[23]]]],[11,"into",E,E,8,[[],[U]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[21],E,E,8,[[],[R[23]]]],[11,R[25],E,E,8,[[["self"]],[T]]],[11,R[22],E,E,8,[[["self"]],[T]]],[11,R[24],E,E,8,[[["self"]],[R[26]]]],[11,R[20],E,E,9,[[[U]],[R[23]]]],[11,"into",E,E,9,[[],[U]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[21],E,E,9,[[],[R[23]]]],[11,R[25],E,E,9,[[["self"]],[T]]],[11,R[22],E,E,9,[[["self"]],[T]]],[11,R[24],E,E,9,[[["self"]],[R[26]]]],[11,"fmt",R[42],E,5,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,2,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,3,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,4,[[["self"],[R[28]]],[R[23]]]],[11,"eq",E,E,0,[[["self"],[R[48]]],["bool"]]],[11,"eq",E,E,2,[[["self"],[R[46]]],["bool"]]],[11,"ne",E,E,2,[[["self"],[R[46]]],["bool"]]],[11,R[211],E,E,2,[[["self"]]]],[11,R[212],E,E,2,[[["self"]],[[R[5],[R[47]]],[R[47]]]]],[11,"clone",E,E,0,[[["self"]],[R[48]]]],[11,"clone",E,E,1,[[["self"]],[R[40]]]],[11,"clone",E,E,2,[[["self"]],[R[46]]]],[11,"clone",E,E,3,[[["self"]],[R[1516]]]],[11,"clone",E,E,4,[[["self"]],[R[34]]]],[11,R[49],R[45],E,8,[[],["self"]]],[11,R[49],R[42],E,0,[[],["self"]]],[11,R[49],E,E,2,[[],["self"]]],[11,R[49],E,E,3,[[],["self"]]],[11,R[49],E,E,4,[[],[R[34]]]],[11,R[49],E,E,1,[[],["self"]]]],"p":[[3,R[50]],[3,R[51]],[3,R[52]],[3,R[53]],[3,R[54]],[4,R[55]],[3,R[56]],[3,R[57]],[3,"Rule"],[4,R[58]]]};
searchIndex["sunrise_libuser"]={"doc":"Userspace library","i":[[0,R[1022],R[1045],R[1023],N,N],[4,"Loop",R[1486],R[1027],N,N],[13,"Break",E,R[1028],0,N],[13,"Continue",E,R[1029],0,N],[3,"LoopFn",E,R[1024],N,N],[12,"future",E,R[1025],1,N],[12,"func",E,R[1026],1,N],[5,"loop_fn",E,R[1030],N,[[["s"],["f"]],["loopfn"]]],[4,"Poll",E,R[1042],N,N],[13,"Ready",E,R[1043],2,N],[13,"Pending",E,R[1044],2,N],[0,"io",R[1045],R[997],N,N],[8,"Io",R[1487],R[1002],N,N],[16,"Value",E,R[1003],3,N],[10,"read",E,R[12],3,[[["self"]]]],[10,"write",E,R[14],3,[[["self"]]]],[11,"readf",E,R[13],3,[[["self"]],["bool"]]],[11,"writef",E,R[1004],3,[[["self"],["bool"]]]],[3,R[29],E,R[998],N,N],[12,"inner",E,E,4,N],[3,R[30],E,R[999],N,N],[12,"inner",E,E,5,N],[3,"Pio",E,R[6],N,N],[12,"port",E,R[7],6,N],[12,"value",E,R[8],6,N],[3,"Mmio",E,R[10],N,N],[12,"value",E,R[11],7,N],[5,"real_start",R[1045],"calls logger initialization, main, and finally exits the…",N,[[]]],[0,"argv",E,"Argument handling",N,N],[5,"argc","sunrise_libuser::argv","Get the number of arguments in argv.",N,[[],["isize"]]],[5,"argv",E,"Get the argument array. It is guaranteed to have at least…",N,[[]]],[5,"__libuser_get_args",E,"Get the arguments. This will parse and setup the arguments…",N,[[]]],[0,"caps",R[1045],"Kernel Capabilities declaration",N,N],[3,R[323],"sunrise_libuser::caps",R[1046],N,N],[12,"magic",E,R[1047],8,N],[12,"name",E,R[1048],8,N],[12,"title_id",E,R[1049],8,N],[12,R[270],E,R[1050],8,N],[12,R[1051],E,R[1052],8,N],[12,R[1053],E,R[1054],8,N],[12,R[35],E,R[1055],8,N],[12,"flags",E,R[1056],8,N],[12,R[1057],E,R[1058],8,N],[3,R[322],E,R[1059],N,N],[12,"0",E,E,9,N],[5,"kernel_flags",E,"Create a kernel flag capability. Specifies the…",N,[[["u32"],["u8"]],["u32"]]],[5,"map_normal_page",E,"Maps the given physical memory page at a random address on…",N,[[["u32"]],["u32"]]],[5,"ioport",E,"Allows the process to use the given IO Ports directly…",N,[[["u16"]],["u32"]]],[5,"irq_pair",E,"Allows the process to create an IRQEvent for those IRQs.…",N,[[["u16"]],["u32"]]],[5,"application_type",E,"Declare the type of the application. 0 is a sysmodule, 1…",N,[[["u32"]],["u32"]]],[5,"kernel_release_version",E,"The minimum kernel version this process expects.",N,[[["u32"]],["u32"]]],[5,"handle_table_size",E,"Declare the maximum number of live handles this process is…",N,[[["u32"]],["u32"]]],[5,"debug_flags",E,"Declares whether this application can be debugged (e.g. it…",N,[[["bool"]],["u32"]]],[0,"syscalls",R[1045],"Syscall Wrappers",N,N],[0,"nr",R[1173],R[1060],N,N],[17,R[1061],"sunrise_libuser::syscalls::nr",E,N,N],[17,R[1062],E,E,N,N],[17,R[1063],E,E,N,N],[17,"MapMemory",E,E,N,N],[17,R[1064],E,E,N,N],[17,R[411],E,E,N,N],[17,R[1065],E,E,N,N],[17,R[1066],E,E,N,N],[17,R[1067],E,E,N,N],[17,"ExitThread",E,E,N,N],[17,R[1068],E,E,N,N],[17,R[1069],E,E,N,N],[17,R[1070],E,E,N,N],[17,R[1071],E,E,N,N],[17,R[1072],E,E,N,N],[17,R[1073],E,E,N,N],[17,R[1074],E,E,N,N],[17,"ClearEvent",E,E,N,N],[17,R[1075],E,E,N,N],[17,R[1076],E,E,N,N],[17,R[1077],E,E,N,N],[17,R[1078],E,E,N,N],[17,R[1079],E,E,N,N],[17,R[1080],E,E,N,N],[17,R[1081],E,E,N,N],[17,R[1082],E,E,N,N],[17,R[1083],E,E,N,N],[17,R[1084],E,E,N,N],[17,R[1085],E,E,N,N],[17,R[1086],E,E,N,N],[17,R[1087],E,E,N,N],[17,R[1088],E,E,N,N],[17,R[1089],E,E,N,N],[17,R[1090],E,E,N,N],[17,R[1091],E,E,N,N],[17,R[1092],E,E,N,N],[17,R[1093],E,E,N,N],[17,"Break",E,E,N,N],[17,R[1094],E,E,N,N],[17,R[1095],E,E,N,N],[17,"GetInfo",E,E,N,N],[17,R[1096],E,E,N,N],[17,R[1097],E,E,N,N],[17,R[1098],E,E,N,N],[17,R[1099],E,E,N,N],[17,R[1100],E,E,N,N],[17,R[1101],E,E,N,N],[17,R[1102],E,E,N,N],[17,R[1103],E,E,N,N],[17,R[1104],E,E,N,N],[17,R[1105],E,E,N,N],[17,R[1106],E,E,N,N],[17,R[1107],E,E,N,N],[17,"DumpInfo",E,E,N,N],[17,R[1108],E,E,N,N],[17,R[1109],E,E,N,N],[17,R[1110],E,E,N,N],[17,R[1111],E,E,N,N],[17,R[1112],E,E,N,N],[17,R[1113],E,E,N,N],[17,R[1114],E,E,N,N],[17,R[1115],E,E,N,N],[17,R[1116],E,E,N,N],[17,R[1117],E,E,N,N],[17,R[1118],E,E,N,N],[17,R[1119],E,E,N,N],[17,R[1120],E,E,N,N],[17,R[1121],E,E,N,N],[17,R[1122],E,E,N,N],[17,R[1123],E,E,N,N],[17,R[1124],E,E,N,N],[17,R[1125],E,E,N,N],[17,R[1126],E,E,N,N],[17,R[1127],E,E,N,N],[17,R[1128],E,E,N,N],[17,R[1129],E,E,N,N],[17,R[1130],E,E,N,N],[17,R[1131],E,E,N,N],[17,R[1132],E,E,N,N],[17,R[1133],E,E,N,N],[17,R[1134],E,E,N,N],[17,R[1135],E,E,N,N],[17,R[1136],E,E,N,N],[17,R[1137],E,E,N,N],[17,R[1138],E,E,N,N],[17,R[1139],E,E,N,N],[17,R[1140],E,E,N,N],[17,R[1141],E,E,N,N],[17,R[1142],E,E,N,N],[17,R[1143],E,E,N,N],[17,R[1144],E,E,N,N],[17,R[1145],E,E,N,N],[17,R[1146],E,E,N,N],[17,R[1147],E,E,N,N],[17,R[1148],E,E,N,N],[17,R[1149],E,E,N,N],[17,R[1150],E,E,N,N],[17,R[1151],E,E,N,N],[17,R[1152],E,E,N,N],[17,R[1153],E,E,N,N],[17,"CreatePort",E,E,N,N],[17,R[1154],E,E,N,N],[17,R[1155],E,E,N,N],[17,R[1156],E,E,N,N],[17,R[1157],E,E,N,N],[17,R[1158],E,E,N,N],[17,R[1159],E,E,N,N],[17,R[1160],E,E,N,N],[17,R[1161],E,E,N,N],[17,R[1162],E,E,N,N],[17,R[1163],E,E,N,N],[17,R[1164],E,E,N,N],[17,R[1165],E,E,N,N],[17,R[1166],E,E,N,N],[17,R[1167],E,E,N,N],[17,R[1168],E,E,N,N],[17,R[1169],E,E,N,N],[17,R[1170],E,E,N,N],[17,R[1171],E,E,N,N],[17,R[1172],E,E,N,N],[17,"MaxSvc",E,E,N,N],[3,R[318],R[1173],R[1174],N,N],[12,"baseaddr",E,R[1175],10,N],[12,"size",E,R[1176],10,N],[12,"memtype",E,R[931],10,N],[12,"memattr",E,R[1177],10,N],[12,"perms",E,R[1178],10,N],[12,R[1179],E,R[1180],10,N],[12,R[1181],E,"Unknown.",10,N],[3,R[317],E,R[1182],N,N],[12,"bits",E,E,11,N],[4,R[325],E,R[1183],N,N],[13,R[1184],E,R[1185],12,N],[13,"Applet",E,R[1186],12,N],[13,"Sysmodule",E,R[1187],12,N],[13,"Nvservices",E,R[1188],12,N],[4,R[326],E,R[1189],N,N],[13,"AS32Bit",E,R[1190],13,N],[13,R[1191],E,R[1192],13,N],[13,"AS36Bit",E,R[1193],13,N],[13,"AS39Bit",E,R[1194],13,N],[3,R[321],E,R[1195],N,N],[12,"0",E,E,14,N],[3,R[322],E,R[1059],N,N],[12,"0",E,E,9,N],[3,"ProcInfo",E,R[1196],N,N],[12,"name",E,R[1197],15,N],[12,R[270],E,R[1198],15,N],[12,"title_id",E,R[1199],15,N],[12,"code_addr",E,R[1200],15,N],[12,R[1201],E,R[1202],15,N],[12,"flags",E,R[1203],15,N],[12,R[1204],E,R[1205],15,N],[12,R[1206],E,R[1207],15,N],[3,R[323],E,R[1046],N,N],[12,"magic",E,R[1047],8,N],[12,"name",E,R[1048],8,N],[12,"title_id",E,R[1049],8,N],[12,R[270],E,R[1050],8,N],[12,R[1051],E,R[1052],8,N],[12,R[1053],E,R[1054],8,N],[12,R[35],E,R[1055],8,N],[12,"flags",E,R[1056],8,N],[12,R[1057],E,R[1058],8,N],[3,R[279],E,R[974],N,N],[12,"0",E,E,16,N],[3,R[324],E,R[1208],N,N],[12,"0",E,E,17,N],[3,"Registers",E,"Register backup structure. The syscall_inner will pop the…",N,N],[12,"eax",E,E,18,N],[12,"ebx",E,E,18,N],[12,"ecx",E,E,18,N],[12,"edx",E,E,18,N],[12,"esi",E,E,18,N],[12,"edi",E,E,18,N],[12,"ebp",E,E,18,N],[5,"syscall",E,"Generic syscall function.",N,[[[R[4]]],[[R[268]],[R[23],[R[268]]]]]],[5,R[1209],E,R[1210],N,[[[R[4]]],[[R[268]],[R[4]],[R[23],[R[4],R[268]]]]]],[5,R[563],E,"Query information about an address. Will fetch the…",N,[[[R[4]]],[[R[268]],[R[23],[R[268]]]]]],[5,R[1211],E,"Exits the process, killing all threads.",N,[[]]],[5,R[1212],E,"Creates a thread in the current process.",N,[[["u32"],[R[4]]],[["thread"],[R[268]],[R[23],["thread",R[268]]]]]],[5,R[1213],E,"Starts the thread for the provided handle.",N,[[["thread"]],[[R[23],[R[268]]],[R[268]]]]],[5,R[1214],E,"Exits the current thread.",N,[[]]],[5,R[1215],E,"Sleeps for a specified amount of time, or yield thread.",N,[[[R[4]]],[[R[23],[R[268]]],[R[268]]]]],[5,R[1216],E,R[1217],N,[[[R[683]]],[[R[23],[R[268]]],[R[268]]]]],[5,R[1218],E,R[1219],N,[[[R[1257]]],[[R[23],[R[268]]],[R[268]]]]],[5,R[1220],E,"Creates a shared memory handle.",N,[[[R[285]],[R[4]]],[[R[23],[R[1221],R[268]]],[R[1221]],[R[268]]]]],[5,R[1222],E,"Maps a shared memory.",N,[[[R[285]],[R[1221]],[R[4]]],[[R[23],[R[268]]],[R[268]]]]],[5,R[1223],E,"Unmaps a shared memory.",N,[[[R[1221]],[R[4]]],[[R[23],[R[268]]],[R[268]]]]],[5,R[1224],E,"Close the given handle.",N,[[["u32"]],[[R[23],[R[268]]],[R[268]]]]],[5,R[1225],E,"Wait for an event on the given handles.",N,[[[R[4]],[R[5],[R[4]]]],[[R[268]],[R[4]],[R[23],[R[4],R[268]]]]]],[5,R[701],E,"Creates a session to the given named port.",N,[[["str"]],[[R[682]],[R[23],[R[682],R[268]]],[R[268]]]]],[5,R[1226],E,"Send an IPC request through the given pipe.",N,[[[R[682]]],[[R[23],[R[268]]],[R[268]]]]],[5,R[1227],E,"Print the given string to the kernel's debug output.",N,[[["str"],[R[4]]],[[R[23],[R[268]]],[R[268]]]]],[5,R[1228],E,"Create an anonymous session.",N,[[[R[4]],["bool"]],[[R[23],[R[268]]],[R[268]]]]],[5,R[1229],E,"Accept a connection on the given port.",N,[[[R[700]]],[[R[681]],[R[23],[R[681],R[268]]],[R[268]]]]],[5,R[1230],E,"Reply and Receive IPC requests on the given handles.",N,[[[R[4]],[R[5],[R[1257]]],[R[1257]],[R[5],[R[4]]]],[[R[268]],[R[4]],[R[23],[R[4],R[268]]]]]],[5,R[1231],E,"Create a [ReadableEvent]/[WritableEvent] pair.",N,[[],[[R[23],[R[268]]],[R[268]]]]],[5,R[1232],E,"Create a waitable object for the given IRQ number.",N,[[["u32"],[R[4]]],[[R[684]],[R[268]],[R[23],[R[684],R[268]]]]]],[5,R[1233],E,R[1234],N,[[[R[4]]],[[R[23],[R[268]]],[R[268]]]]],[5,R[1235],E,"Creates an anonymous port.",N,[[["u32"],["bool"]],[[R[23],[R[268]]],[R[268]]]]],[5,R[1236],E,R[1237],N,[[["u32"],["str"]],[[R[23],[R[700],R[268]]],[R[700]],[R[268]]]]],[5,R[1238],E,"Connects to the given named port.",N,[[[R[680]]],[[R[682]],[R[23],[R[682],R[268]]],[R[268]]]]],[5,R[1239],E,"Maps the framebuffer to a kernel-chosen address.",N,[[],[[R[268]],[R[23],[R[268]]]]]],[5,R[1240],E,R[1241],N,[[[R[4]],["bool"]],[[R[23],[R[268]]],[R[268]]]]],[5,R[1242],E,R[1243],N,[[[R[4]]],[[R[23],[R[268]]],[R[268]]]]],[5,R[1244],E,R[1245],N,[[[R[285]],["process"],[R[4]]],[[R[23],[R[268]]],[R[268]]]]],[5,R[1246],E,R[1247],N,[[[R[4]],["process"]],[[R[23],[R[268]]],[R[268]]]]],[5,R[1248],E,R[1249],N,[[[R[4]],["process"]],[[R[23],[R[268]]],[R[268]]]]],[5,R[1250],E,"Creates a new process with the given parameters.",N,[[[R[686]]],[[R[23],["process",R[268]]],["process"],[R[268]]]]],[5,R[1251],E,R[1252],N,[[["u32"],["process"]],[[R[23],[R[268]]],[R[268]]]]],[5,R[1253],E,R[1254],N,[[["process"],[R[312]]],[[R[23],["u32",R[268]]],["u32"],[R[268]]]]],[5,R[1255],E,R[1256],N,[[[R[1257]]],[[R[23],[R[268]]],[R[268]]]]],[5,R[1258],E,R[1259],N,[[["process"]],[[R[23],["u64",R[268]]],["u64"],[R[268]]]]],[5,R[1260],E,E,N,N],[0,R[1260],E,E,N,N],[5,R[1260],"sunrise_libuser::syscalls::syscall_inner",E,N,[[["registers"]]]],[0,"mem",R[1045],"Memory",N,N],[5,"find_free_address","sunrise_libuser::mem","Finds a free memory zone of the given size and alignment…",N,[[[R[4]]],[["error"],[R[23],[R[4],"error"]],[R[4]]]]],[5,"map_mmio",E,"Maps a Mmio struct in the virtual memory of this process.",N,[[[R[4]]],[[R[268]],[R[23],[R[268]]]]]],[5,"virt_to_phys",E,"Gets the physical address of a structure from its virtual…",N,[[],[R[4]]]],[17,R[409],E,"The size of page. Used to interface with the kernel.",N,N],[0,"types",R[1045],"Core kernel types.",N,N],[3,"Handle",R[1488],"A Handle is a sort of reference to a Kernel Object. Its…",N,N],[12,"0",E,E,19,N],[3,"HandleRef",E,"A fake reference to a Handle. Has the same representation…",N,N],[12,"inner",E,"The underlying handle number.",20,N],[12,"lifetime",E,"The real handle this reference is tied to.",20,N],[3,"IRQEvent",E,"A handle on an IRQ event.",N,N],[12,"0",E,E,21,N],[3,R[665],E,R[1261],N,N],[12,"0",E,E,22,N],[3,R[666],E,R[1262],N,N],[12,"0",E,E,23,N],[3,R[702],E,"The client side of an IPC session.",N,N],[12,"0",E,E,24,N],[3,R[703],E,"The server side of an IPC session.",N,N],[12,"0",E,E,25,N],[3,R[709],E,"The client side of an IPC Port. Allows connecting to an…",N,N],[12,"0",E,E,26,N],[3,R[710],E,"The server side of an IPC Port. Allows listening for…",N,N],[12,"0",E,E,27,N],[3,"Thread",E,"A Thread. Created with the [create_thread syscall].",N,N],[12,"0",E,E,28,N],[3,"Process",E,"A Process. Created with `create_process` syscall, or by…",N,N],[12,"0",E,E,29,N],[3,R[329],E,"A handle to memory that may be mapped in multiple…",N,N],[12,"0",E,E,30,N],[3,R[1556],E,"A mapping to a shared memory region.",N,N],[12,"handle",E,E,31,N],[12,"addr",E,E,31,N],[12,"size",E,E,31,N],[12,"perm",E,E,31,N],[3,"Pid",E,"Process ID, as returned by IPC.",N,N],[12,"0",E,E,32,N],[11,"new",E,"Creates a new handle from the given number. This number…",19,[[["u32"]],["handle"]]],[11,"as_ref",E,"Creates a new reference to this handle. See the…",19,[[["self"]],[R[1257]]]],[11,"as_ref_static",E,"Creates a new static reference to this handle. See the…",19,[[["self"]],[R[1257]]]],[11,"staticify",E,"Remove the lifetime on the current HandleRef. See…",20,[[],[R[1257]]]],[11,R[1264],E,"Returns a future that waits for the current handle to get…",20,[[[R[1265]]]]],[11,"clear",E,R[440],22,[[["self"]],[[R[23],[R[268]]],[R[268]]]]],[11,R[1264],E,"Waits for the event to get signaled.",22,[[["self"],[R[1265]]]]],[11,"wait_async_cb",E,"Turns this ReadableEvent into a semaphore-like structure.",22,[[["self"],[R[1265]],["f"]]]],[11,"clear",E,R[440],23,[[["self"]],[[R[23],[R[268]]],[R[268]]]]],[11,"signal",E,R[1263],23,[[["self"]],[[R[23],[R[268]]],[R[268]]]]],[11,R[1226],E,"Send an IPC request to the handle, and wait for a…",24,[[["self"]],[["error"],[R[23],["error"]]]]],[11,"into_handle",E,"Consumes the session, returning the underlying handle.…",24,[[],["handle"]]],[11,"receive",E,"Receives an IPC request from the session, waiting if none…",25,[[["self"],[R[4]],[R[5],[R[4]]]],[["error"],[R[23],["error"]]]]],[11,"reply",E,"Replies to an IPC request on the given session. If the…",25,[[["self"]],[["error"],[R[23],["error"]]]]],[11,R[1264],E,"Waits for the server to receive a request.",25,[[["self"],[R[1265]]]]],[11,"connect",E,"Connects to a port, returning a session on which to send…",26,[[["self"]],[[R[682]],[R[23],[R[682],"error"]],["error"]]]],[11,"accept",E,"Accepts a connection to the port, returning a server…",27,[[["self"]],[[R[681]],["error"],[R[23],[R[681],"error"]]]]],[11,R[1264],E,"Waits for the server to receive a connection.",27,[[["self"],[R[1265]]]]],[11,"current",E,"Gets the current process handle. Uses the 0xFFFF8000…",28,[[],["thread"]]],[11,"current",E,"Gets the current process handle. Uses the 0xFFFF8001…",29,[[],["process"]]],[11,"start",E,R[1252],29,[[["self"],["u32"]],[["error"],[R[23],["error"]]]]],[11,"state",E,"Get the state the given process is currently in.",29,[[["self"]],[[R[311]],[R[23],[R[311],"error"]],["error"]]]],[11,R[1264],E,"Waits for the process to change state. Use…",29,[[["self"],[R[1265]]]]],[11,R[1255],E,"Clear the \"signaled\" state of a process. A process moves…",29,[[["self"]],[["error"],[R[23],["error"]]]]],[11,"pid",E,"Gets the [Pid] of this Process.",29,[[["self"]],[["pid"],[R[23],["pid","error"]],["error"]]]],[11,"new",E,"Creates a new Shared Memory handle. The physical memory…",30,[[[R[285]],[R[4]]],[[R[1221]],[R[23],[R[1221],"error"]],["error"]]]],[11,"map",E,"Maps the current shared memory at the given address,…",30,[[[R[285]],[R[4]]],[[R[23],[R[1266],"error"]],[R[1266]],["error"]]]],[11,"as_ptr",E,"Gets a raw pointer to the underlying shared memory.",31,[[["self"]]]],[11,"as_mut_ptr",E,"Gets a mutable raw pointer to the underlying shared memory.",31,[[["self"]]]],[11,"len",E,"Gets the byte length of the mapped shared memory.",31,[[["self"]],[R[4]]]],[11,"as_shared_mem",E,"Return a reference to the underlying shared memory. Useful…",31,[[["self"]],[R[1221]]]],[0,"ipc",R[1045],"Core IPC Routines",N,N],[3,R[920],R[1269],R[1267],N,N],[12,"0",E,E,33,N],[3,R[921],E,R[1268],N,N],[12,"0",E,E,34,N],[3,"IPCBuffer",E,"An IPC Buffer represents a section of memory to send to…",N,N],[12,"addr",E,"Address to the value",35,N],[12,"size",E,"Size of the value",35,N],[12,"ty",E,"Buffer type",35,N],[12,"phantom",E,"Tie the buffer's lifetime to the value's ! This is very…",35,N],[3,"Message",E,"A generic IPC message, representing either an IPC Request…",N,N],[12,"ty",E,"Type of the message. This is derived from [MessageTy] and…",36,N],[12,"pid",E,"Optional PID included in the message. For outgoing…",36,N],[12,"buffers",E,"Array of IPC Buffers included in the message.",36,N],[12,"copy_handles",E,"Array of copy handles included in the message. Copy…",36,N],[12,"move_handles",E,"Array of move handles included in the message. Move…",36,N],[12,"is_request",E,"Whether this message contains an IPC request or an IPC…",36,N],[12,"cmdid_error",E,"Contains either the cmdid (if this message is a request)…",36,N],[12,"token",E,"Optional tracking token. This is used to track the origin…",36,N],[12,"raw",E,"The raw arguments included in this message.",36,N],[4,R[1557],E,"Type of an IPC Buffer. Depending on the type, the kernel…",N,N],[13,"A",E,"Send Buffer.",37,N],[12,"flags",R[1270],R[1271],37,N],[13,"B",R[1269],"Receive Buffer.",37,N],[12,"flags",R[1270],R[1271],37,N],[13,"W",R[1269],"SendReceive Buffer.",37,N],[12,"flags",R[1270],R[1271],37,N],[13,"X",R[1269],"Pointer.",37,N],[12,"counter",R[1270],"The index of the C buffer to copy this pointer into.",37,N],[13,"C",R[1269],"Receive List.",37,N],[12,"has_u16_size",R[1270],"If true, the size of the receive list should be written in…",37,N],[4,"MessageTy",R[1269],"Type of an IPC message.",N,N],[13,"Close",E,"Requests the other end to close the handle and any…",38,N],[13,"Request",E,"A normal request.",38,N],[13,"Control",E,"A request handled by the server handler. See [switchbrew]…",38,N],[5,"find_ty_cmdid",E,"Quickly find the type and cmdid of an IPC message for the…",N,[[],[R[5]]]],[0,"server",E,"IPC Server primitives",N,N],[3,"Align16",R[1489],"Wrapper struct that forces the alignment to 0x10. Somewhat…",N,N],[12,"0",E,E,39,N],[5,"encode_bytes",E,"Encode an 8-character service string into an u64",N,[[["str"]],["u64"]]],[5,"common_port_handler",E,"Infinite loop future that waits for `port` to get…",N,[[[R[1265]],[R[700]],[R[1314]]]]],[5,"port_handler",E,"Creates a port through…",N,[[[R[1265]],["str"],[R[1314]]],[[R[23],["error"]],["error"]]]],[5,"managed_port_handler",E,"Creates a port through [syscalls::manage_named_port()]…",N,[[[R[1265]],["str"],[R[1314]]],[[R[23],["error"]],["error"]]]],[5,"new_session_wrapper",E,"Creates a new top-level future that handles session.",N,[[[R[1265]],[R[1314]],[R[681]],[T]]]],[5,"control_dispatch",E,"Implement the Control ipc cmd types.",N,[[[R[1314]],[R[1265]],[T],["u32"]],[["error"],[R[23],["error"]]]]],[0,"hrtb_hack",E,"Ideally, that's what we would want to write async fn…",N,N],[8,R[1558],"sunrise_libuser::ipc::server::hrtb_hack","A similar trait to FnMut() but moving the Ret associated…",N,N],[16,"Ret",E,"See [type FnMut::Output]",40,N],[10,"call",E,"See [FnMut::call_mut()].",40,[[["self"],[T]]]],[8,R[1559],R[1269],"Util used for IPC buffer sizing.",N,N],[10,"size",E,"Return the size of the type.",41,[[["self"]],[R[4]]]],[10,"is_cool",E,"Check if the address and size are correct.",41,[[[R[4]]],["bool"]]],[10,R[1272],E,"Create a reference to a ipc buffer from an address and a…",41,[[[R[4]]],["self"]]],[10,R[1273],E,"Create a mutable reference to a ipc buffer from an address…",41,[[[R[4]]],["self"]]],[11,"ty",E,E,33,[[["self"]],["u16"]]],[11,"set_ty",E,E,33,[[["self"],["u16"]]]],[11,R[1274],E,E,33,[[["self"]],["u8"]]],[11,R[1275],E,E,33,[[["self"],["u8"]]]],[11,R[1276],E,E,33,[[["self"]],["u8"]]],[11,R[1277],E,E,33,[[["self"],["u8"]]]],[11,R[1278],E,E,33,[[["self"]],["u8"]]],[11,R[1279],E,E,33,[[["self"],["u8"]]]],[11,R[1280],E,E,33,[[["self"]],["u8"]]],[11,R[1281],E,E,33,[[["self"],["u8"]]]],[11,R[1282],E,E,33,[[["self"]],["u16"]]],[11,R[1283],E,E,33,[[["self"],["u16"]]]],[11,R[1284],E,E,33,[[["self"]],["u8"]]],[11,R[1285],E,E,33,[[["self"],["u8"]]]],[11,R[1286],E,E,33,[[["self"]],["bool"]]],[11,R[1287],E,E,33,[[["self"],["bool"]]]],[11,"send_pid",E,E,34,[[["self"]],["bool"]]],[11,R[1288],E,E,34,[[["self"],["bool"]]]],[11,R[1289],E,E,34,[[["self"]],["u8"]]],[11,R[1290],E,E,34,[[["self"],["u8"]]]],[11,R[1291],E,E,34,[[["self"]],["u8"]]],[11,R[1292],E,E,34,[[["self"],["u8"]]]],[11,"is_type_a",E,"Checks if this buffer is a Send Buffer.",37,[[],["bool"]]],[11,"is_type_b",E,"Checks if this buffer is a Receive Buffer.",37,[[],["bool"]]],[11,"is_type_w",E,"Checks if this buffer is a SendReceive Buffer.",37,[[],["bool"]]],[11,"is_type_x",E,"Checks if this buffer is a Pointer Buffer.",37,[[],["bool"]]],[11,"out_buffer",E,"Creates a Type-A IPCBuffer from the given reference.",35,[[["u8"],[T]],[R[1293]]]],[11,"in_buffer",E,"Creates a Type-B IPCBuffer from the given reference.",35,[[["u8"],[T]],[R[1293]]]],[11,"in_pointer",E,"Creates a Type-C IPCBuffer from the given reference.",35,[[["bool"],[T]],[R[1293]]]],[11,"out_pointer",E,"Creates a Type-X IPCBuffer from the given reference.",35,[[["u8"],[T]],[R[1293]]]],[11,"buftype",E,"Gets the [IPCBufferType] of this buffer. The buffer type…",35,[[["self"]],[R[1514]]]],[11,"new_request",E,"Create a new request for the given cmdid. If a token is…",36,[[["u32"],[R[5],["u32"]]],["message"]]],[11,"new_response",E,"Create a new empty reply. If the request this reply is…",36,[[["u32"],[R[5],["u32"]]],["message"]]],[11,"set_ty",E,"Sets the message type.",36,[[["self"],["messagety"]],["self"]]],[11,"set_error",E,"Set the error code from a reply.",36,[[["self"],["u32"]],["self"]]],[11,"error",E,"Get the error code from a reply.",36,[[["self"]],[["error"],[R[23],["error"]]]]],[11,"push_raw",E,"Sets the raw data of the message.",36,[[["self"],["raw"]],["self"]]],[11,"raw",E,"Gets the raw data of the message.",36,[[["self"]],["raw"]]],[11,"token",E,"Gets the token of a message. This token is used to track…",36,[[["self"]],[["u32"],[R[5],["u32"]]]]],[11,"push_handle_move",E,"Move a handle over IPC. Once the message is sent, the…",36,[[["self"],["handle"]],["self"]]],[11,"push_handle_copy",E,"Copy a handle over IPC. The remote process will have a…",36,[[["self"],[R[1257]]],["self"]]],[11,"pop_handle_move",E,"Retrieve a moved handle from this IPC message. Those are…",36,[[["self"]],[[R[23],["handle","error"]],["handle"],["error"]]]],[11,"pop_handle_copy",E,"Retrieve a copied handle from this IPC message. Those are…",36,[[["self"]],[[R[23],["handle","error"]],["handle"],["error"]]]],[11,"pop_pid",E,"Retrieve the PID of the remote process (if sent at all).…",36,[[["self"]],[["pid"],[R[23],["pid","error"]],["error"]]]],[11,"pop_in_buffer",E,"Retreive the next InBuffer (type-A buffer) in the message.",36,[[["self"]],[[R[23],["error"]],[T],["error"]]]],[11,"pop_out_buffer",E,"Retreive the next OutBuffer (type-B buffer) in the message.",36,[[["self"]],[[R[23],["error"]],[T],["error"]]]],[11,"push_out_buffer",E,"Push an OutBuffer (type-A buffer) backed by the specified…",36,[[["self"],[T]],["self"]]],[11,"push_in_buffer",E,"Push an InBuffer (type-B buffer) backed by the specified…",36,[[["self"],[T]],["self"]]],[11,"push_in_pointer",E,"Push an InPointer (type-C buffer) backed by the specified…",36,[[["self"],["bool"],[T]],["self"]]],[11,"push_out_pointer",E,"Push an OutPointer (type-X buffer) backed by the specified…",36,[[["self"],[T]],["self"]]],[11,"send_pid",E,"Send a Pid with this IPC request.",36,[[["self"],[R[5],["pid"]],["pid"]],["self"]]],[11,"pop_in_pointer",E,"Retreive the next InPointer (type-X buffer) in the message.",36,[[["self"]],[[R[23],["error"]],[T],["error"]]]],[11,"pack",E,"Packs this IPC Message to an IPC buffer.",36,[[]]],[11,"unpack",E,"Parse the passed buffer into an IPC Message.",36,[[],["message"]]],[0,"threads",R[1045],"Low-level api to create threads and start them.",N,N],[3,R[1560],R[1490],"Stack allocation informations",N,N],[12,R[472],E,"The addresss of the allocated stack",42,N],[12,"stack_layout",E,"The stack layout.",42,N],[3,R[1561],E,"Structure holding the thread local context of a thread.…",N,N],[12,"entry_point",E,"Pointer to the function this thread should execute after…",43,N],[12,"arg",E,"The argument to call it with.",43,N],[12,"stack",E,"The stack used by this thread.",43,N],[12,"tls_elf",E,"The thread local storage of this thread.",43,N],[12,"thread_handle",E,"The ThreadHandle of this thread.",43,N],[3,"Thread",E,"Libuser's representation of a thread.",N,N],[12,"0",E,E,44,N],[5,"get_my_tls_region",E,"Get a pointer to this thread's [TLS] region pointed to by…",N,[[]]],[5,"get_my_thread_context",E,"Get a reference to this thread's [ThreadContext], from the…",N,[[],["threadcontext"]]],[5,"get_my_ipc_buffer",E,"Get a pointer to this thread's [IPCBuffer], from the [TLS]…",N,[[]]],[5,"thread_trampoline",E,"Small stub executed by every thread but the main thread…",N,[[[R[4]]]]],[5,"init_main_thread",E,"Initialisation of the main thread's thread local structures:",N,[[["u32"]]]],[7,"MAIN_THREAD_CONTEXT",E,"Context of the main thread. Instead of allocating it at…",N,N],[17,"DEFAULT_STACK_SIZE",E,"Default size of a thread's stack, in bytes.",N,N],[11,"new",E,"Create a new StackContext from a given size. The stack…",42,[[[R[4]]],[[R[23],["error"]],["error"]]]],[11,"get_stack_top",E,"Get the address of the stack top.",42,[[["self"]]]],[11,"start",E,"Start this thread.",44,[[["self"]],[["error"],[R[23],["error"]]]]],[11,"join",E,"Wait for the thread to exit.",44,[[["self"]],[["error"],[R[23],["error"]]]]],[11,"create",E,"Allocates resources for a thread. To start it, call…",44,[[[R[4]]],[[R[23],["error"]],["error"]]]],[0,R[1294],R[1045],"Thread Local Storage on x86",N,N],[3,"TlsElf",R[1491],"The Thread Local Storage manager for a thread",N,N],[12,"static_region",E,"The array of static module blocks + TCB",45,N],[3,R[926],E,R[1295],N,N],[12,R[1296],E,R[1297],46,N],[3,R[1562],E,"Represents an allocated thread local static region.",N,N],[12,"ptr",E,R[1298],47,N],[12,"layout",E,R[1299],47,N],[12,"tcb_offset",E,R[1300],47,N],[5,R[1301],E,R[1302],N,[[[R[4]]],[R[4]]]],[7,"__tls_init_image_addr__",E,"The address of the start of the TLS initialisation image…",N,N],[7,"__tls_file_size__",E,"The size of the TLS initialisation image in our `.tdata`.",N,N],[7,"__tls_mem_size__",E,"The total memsize of the TLS segment: .tdata + .tbss",N,N],[7,"__tls_align__",E,"The alignment of the TLS segment.",N,N],[11,"allocate",E,"Allocates and initializes the static region, including TCB.",45,[[],["self"]]],[11,"enable_for_current_thread",E,"Calls [`syscalls::set_thread_area`] with the address of…",45,[[["self"]]]],[11,"tcb",E,R[1303],47,[[["self"]],[R[1304]]]],[11,"allocate",E,"Allocates a ThreadLocalStaticRegion.",47,[[[R[4]]],["self"]]],[0,"futures",R[1045],"Futures Executor",N,N],[3,"Task",R[1492],"A Task represents a future spawned on the [WaitableManager].",N,N],[12,"future",E,"The future backing this task. When the task is woken up,…",48,N],[12,"waker",E,"The waker used to wake this task up from sleep,…",48,N],[12,"waiting_on",E,"List of handles that this task is currently waiting on.",48,N],[3,"WorkQueue",E,"A WorkQueue represents a handle to a [WaitableManager] on…",N,N],[12,"0",E,E,49,N],[3,R[1563],E,"A variant of a WorkQueue that can only push…",N,N],[12,"0",E,E,50,N],[3,"QueueWaker",E,"A waker backed by a WorkQueue and an index in the…",N,N],[12,"queue",E,"The WorkQueue this waker operates on.",51,N],[12,"id",E,"An index to the future to poll on wake in the…",51,N],[3,R[1564],E,"The event loop manager. Waits on the waitable objects…",N,N],[12,"work_queue",E,"Queue of things to do in the next \"tick\" of the event loop.",52,N],[12,"registry",E,"List of futures that are currently running on this executor.",52,N],[4,"WorkItem",E,"A WorkItem is an element of work that will be executed by…",N,N],[13,"Poll",E,"Causes the [Task] specified by the index to be woken up…",53,N],[13,"Spawn",E,"Creates a new [Task] backed by the given future on the…",53,N],[13,"WaitHandle",E,"Registers the [Task] backed by the given [Waker] to be…",53,N],[13,"UnregisterHandle",E,"Stop the task identified by the Waker from waiting on this…",53,N],[7,"CURRENT_TASK",E,"Task currently executing on this thread, or None.",N,N],[11,"spawn",E,"Spawn a top-level future on the event loop. The future…",49,[[["self"],[R[1309]]]]],[11,"simple",E,"Turn this WorkQueue into a SimpleWorkQueue.",49,[[],[R[1515]]]],[11,"wait_for",E,"Registers the task represented by the given [Context] to…",50,[[["self"],[R[1257]],["context"]]]],[11,"unwait_for",E,"Unregisters the task represented by the given [Waker] from…",50,[[["self"],[R[1257]],["waker"]]]],[11,"new",E,"Creates an empty event loop.",52,[[],["waitablemanager"]]],[11,"work_queue",E,"Returns a handle to the underlying WorkQueue backing this…",52,[[["self"]],[R[1265]]]],[11,"run",E,"Runs the event loop, popping items from the underlying…",52,[[["self"]]]],[0,"sm",R[1045],R[1317],N,N],[3,R[1565],R[1493],R[1305],N,N],[12,"0",E,E,54,N],[8,R[1566],E,R[1305],N,N],[10,R[231],E,R[1306],55,[[["self"],["pid"],[R[1265]]],[["error"],[R[23],["error"]]]]],[10,R[1307],E,R[1308],55,[[["self"],["u64"],[R[1265]]],[["error"],[R[682]],[R[23],[R[682],"error"]]]]],[10,R[1310],E,R[1311],55,[[["self"],["bool"],["u32"],["u64"],[R[1265]]],[["error"],[R[23],[R[700],"error"]],[R[700]]]]],[10,R[1312],E,R[1313],55,[[["self"],["u64"],[R[1265]]],[["error"],[R[23],["error"]]]]],[11,R[1314],E,R[1315],55,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,R[1567],E,R[1305],N,N],[10,R[231],E,R[1306],56,[[["pid"],["self"],[R[1265]]],[[R[23],["error"]],[R[1309],[R[23]]]]]],[10,R[1307],E,R[1308],56,[[["u64"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],[R[682],"error"]]]]],[10,R[1310],E,R[1311],56,[[[R[1265]],["bool"],["u32"],["u64"],["self"]],[[R[1309],[R[23]]],[R[23],[R[700],"error"]]]]],[10,R[1312],E,R[1313],56,[[["u64"],["self"],[R[1265]]],[[R[23],["error"]],[R[1309],[R[23]]]]]],[11,R[1314],E,R[1315],56,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[11,"raw_new",E,"Creates a new [IUserInterfaceProxy] by connecting to the…",54,[[],[["error"],[R[1316]],[R[23],[R[1316],"error"]]]]],[11,"new",E,"Acquires the shared handle to the `sm:` service -…",54,[[],[[R[23],[R[1316],"error"]],[R[1316]],["error"]]]],[11,R[231],E,R[1306],54,[[["self"]],[["error"],[R[23],["error"]]]]],[11,R[1307],E,R[1308],54,[[["self"],["u64"]],[["error"],[R[682]],[R[23],[R[682],"error"]]]]],[11,R[1310],E,R[1311],54,[[["self"],["u32"],["u64"],["bool"]],[["error"],[R[23],[R[700],"error"]],[R[700]]]]],[11,R[1312],E,R[1313],54,[[["self"],["u64"]],[["error"],[R[23],["error"]]]]],[0,"vi",R[1045],R[1317],N,N],[3,R[1568],R[1494],R[1318],N,N],[12,"0",E,E,57,N],[3,R[1569],E,R[1329],N,N],[12,"0",E,E,58,N],[8,R[1570],E,R[1318],N,N],[10,R[1320],E,R[1321],59,[[["self"],["u32"],["i32"],[R[1221]],[R[1265]]],[[R[1319]],["error"],[R[23],[R[1319],"error"]]]]],[10,R[1322],E,R[1323],59,[[["self"],[R[1265]]],[[R[23],["error"]],["error"]]]],[10,R[1324],E,R[1325],59,[[["self"],[R[1265]]],[["u32"],[R[23],["u32","error"]],["error"]]]],[10,R[1326],E,R[1327],59,[[["self"],["u32"],["i32"],[R[1221]],[R[1265]]],[[R[23],[R[1328],"error"]],[R[1328]],["error"]]]],[11,R[1314],E,R[1315],59,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,R[1571],E,R[1318],N,N],[10,R[1320],E,R[1321],60,[[["u32"],["i32"],[R[1221]],["self"],[R[1265]]],[[R[23],[R[1319],"error"]],[R[1309],[R[23]]]]]],[10,R[1322],E,R[1323],60,[[["self"],[R[1265]]],[[R[23],["error"]],[R[1309],[R[23]]]]]],[10,R[1324],E,R[1325],60,[[["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["u32","error"]]]]],[10,R[1326],E,R[1327],60,[[["u32"],["i32"],[R[1221]],["self"],[R[1265]]],[[R[23],[R[1328],"error"]],[R[1309],[R[23]]]]]],[11,R[1314],E,R[1315],60,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,"IBuffer",E,R[1329],N,N],[10,"draw",E,R[1330],61,[[["self"],[R[1265]]],[["error"],[R[23],["error"]]]]],[11,R[1314],E,R[1315],61,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,R[1572],E,R[1329],N,N],[10,"draw",E,R[1330],62,[[["self"],[R[1265]]],[[R[23],["error"]],[R[1309],[R[23]]]]]],[11,R[1314],E,R[1315],62,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[11,"raw_new",E,"Creates a new [ViInterfaceProxy] by connecting to the…",57,[[],[[R[23],[R[1331],"error"]],[R[1331]],["error"]]]],[11,"new",E,"Acquires the shared handle to the `vi:` service -…",57,[[],[[R[1331]],[R[23],[R[1331],"error"]],["error"]]]],[11,R[1320],E,R[1321],57,[[["self"],["u32"],["i32"],[R[1221]]],[[R[1319]],["error"],[R[23],[R[1319],"error"]]]]],[11,R[1322],E,R[1323],57,[[["self"]],[[R[23],["error"]],["error"]]]],[11,R[1324],E,R[1325],57,[[["self"]],[["u32"],[R[23],["u32","error"]],["error"]]]],[11,R[1326],E,R[1327],57,[[["self"],["u32"],["i32"],[R[1221]]],[[R[23],[R[1328],"error"]],[R[1328]],["error"]]]],[11,"draw",E,R[1330],58,[[["self"]],[["error"],[R[23],["error"]]]]],[0,"ahci",R[1045],R[1317],N,N],[3,R[1573],R[1495],R[1332],N,N],[12,"0",E,E,63,N],[3,"IDiskProxy",E,R[1337],N,N],[12,"0",E,E,64,N],[6,"Block",E,"A block (or sector) used by AHCI I/O operations.",N,N],[8,R[1574],E,R[1332],N,N],[10,R[1333],E,R[1334],65,[[["self"],[R[1265]]],[["u32"],[R[23],["u32","error"]],["error"]]]],[10,"get_disk",E,R[1335],65,[[["self"],["u32"],[R[1265]]],[["error"],[R[23],[R[1336],"error"]],[R[1336]]]]],[11,R[1314],E,R[1315],65,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,R[1575],E,R[1332],N,N],[10,R[1333],E,R[1334],66,[[["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["u32","error"]]]]],[10,"get_disk",E,R[1335],66,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],[R[1336],"error"]]]]],[11,R[1314],E,R[1315],66,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,"IDisk",E,R[1337],N,N],[10,R[1338],E,R[1339],67,[[["self"],[R[1265]]],[["error"],["u64"],[R[23],["u64","error"]]]]],[10,"read_dma",E,R[1340],67,[[["self"],["u64"],[R[1265]]],[["error"],[R[23],["error"]]]]],[10,R[1816],E,R[1341],67,[[["self"],["u64"],[R[1265]]],[["error"],[R[23],["error"]]]]],[11,R[1314],E,R[1315],67,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,"IDiskAsync",E,R[1337],N,N],[10,R[1338],E,R[1339],68,[[["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["u64","error"]]]]],[10,"read_dma",E,R[1340],68,[[[R[1265]],["u64"],["self"]],[[R[23],["error"]],[R[1309],[R[23]]]]]],[10,R[1816],E,R[1341],68,[[[R[1265]],["u64"],["self"]],[[R[23],["error"]],[R[1309],[R[23]]]]]],[11,R[1314],E,R[1315],68,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[11,"raw_new",E,"Creates a new [AhciInterfaceProxy] by connecting to the…",63,[[],[["error"],[R[23],[R[1342],"error"]],[R[1342]]]]],[11,"new",E,"Acquires the shared handle to the `ahci:` service -…",63,[[],[[R[23],[R[1342],"error"]],[R[1342]],["error"]]]],[11,R[1333],E,R[1334],63,[[["self"]],[["u32"],[R[23],["u32","error"]],["error"]]]],[11,"get_disk",E,R[1335],63,[[["self"],["u32"]],[["error"],[R[23],[R[1336],"error"]],[R[1336]]]]],[11,R[1338],E,R[1339],64,[[["self"]],[["error"],["u64"],[R[23],["u64","error"]]]]],[11,"read_dma",E,R[1340],64,[[["self"],["u64"]],[["error"],[R[23],["error"]]]]],[11,R[1816],E,R[1341],64,[[["self"],["u64"]],[["error"],[R[23],["error"]]]]],[0,"time",R[1045],R[1317],N,N],[3,R[54],R[1496],R[1343],N,N],[12,"year",E,"The year of the local time",69,N],[12,"month",E,"The month of the local time",69,N],[12,"day",E,"The day of the local time",69,N],[12,"hour",E,"The hour of the local time",69,N],[12,"minute",E,"The minute of the local time",69,N],[12,"second",E,"The second of the local time",69,N],[3,R[53],E,"Represent aditional info of a local time",N,N],[12,R[1344],E,"The day of the week of the local time",70,N],[12,R[1345],E,"The day of the year of the local time",70,N],[12,"tz_name",E,"The name of the timezone of the local time",70,N],[12,"is_daylight_saving_time",E,"True if the local time represent a Day Saving Time",70,N],[12,R[33],E,R[1346],70,N],[3,R[1576],E,R[1347],N,N],[12,"0",E,E,71,N],[3,R[1577],E,R[1367],N,N],[12,"0",E,E,72,N],[3,R[1439],E,R[1372],N,N],[12,"0",E,E,73,N],[6,R[51],E,"An opaque type that represent a time zone rule.",N,N],[6,"PosixTime",E,"Represent a POSIX Timestamp",N,N],[6,"LocationName",E,"Represent a time zone location name",N,N],[8,R[1578],E,R[1347],N,N],[10,R[1351],E,R[1352],74,[[["self"],[R[1265]]],[[R[23],[R[1348],"error"]],[R[1348]],["error"]]]],[10,R[1353],E,R[1354],74,[[["self"],[R[1348]],[R[1265]]],[["error"],[R[23],["error"]]]]],[10,R[1355],E,R[1356],74,[[["self"],[R[1265]]],[["u32"],[R[23],["u32","error"]],["error"]]]],[10,R[1357],E,R[1358],74,[[["self"],["u32"],[R[1265]]],[["u32"],[R[23],["u32","error"]],["error"]]]],[10,R[1359],E,R[1360],74,[[["self"],[R[1348]],[R[40]],[R[1265]]],[["error"],[R[23],["error"]]]]],[10,R[1349],E,R[1361],74,[[["self"],[R[44]],[R[40]],[R[1265]]],[[R[23],["error"]],["error"]]]],[10,R[1362],E,R[1363],74,[[["self"],[R[44]],[R[1265]]],[[R[23],["error"]],["error"]]]],[10,R[1350],E,R[1364],74,[[["self"],[R[40]],[R[34]],[R[1265]]],[[R[44]],[R[23],[R[44],"error"]],["error"]]]],[10,R[1365],E,R[1366],74,[[["self"],[R[34]],[R[1265]]],[[R[44]],[R[23],[R[44],"error"]],["error"]]]],[11,R[1314],E,R[1315],74,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,R[1579],E,R[1347],N,N],[10,R[1351],E,R[1352],75,[[["self"],[R[1265]]],[[R[23],[R[1348],"error"]],[R[1309],[R[23]]]]]],[10,R[1353],E,R[1354],75,[[[R[1348]],["self"],[R[1265]]],[[R[23],["error"]],[R[1309],[R[23]]]]]],[10,R[1355],E,R[1356],75,[[["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["u32","error"]]]]],[10,R[1357],E,R[1358],75,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["u32","error"]]]]],[10,R[1359],E,R[1360],75,[[[R[1348]],[R[40]],["self"],[R[1265]]],[[R[23],["error"]],[R[1309],[R[23]]]]]],[10,R[1349],E,R[1361],75,[[[R[44]],[R[40]],["self"],[R[1265]]],[[R[23],["error"]],[R[1309],[R[23]]]]]],[10,R[1362],E,R[1363],75,[[[R[44]],["self"],[R[1265]]],[[R[23],["error"]],[R[1309],[R[23]]]]]],[10,R[1350],E,R[1364],75,[[[R[40]],[R[34]],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],[R[44],"error"]]]]],[10,R[1365],E,R[1366],75,[[[R[34]],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],[R[44],"error"]]]]],[11,R[1314],E,R[1315],75,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,R[1625],E,R[1367],N,N],[10,R[1368],E,R[1369],76,[[["self"],[R[1265]]],[[R[44]],[R[23],[R[44],"error"]],["error"]]]],[10,R[1370],E,R[1371],76,[[["self"],[R[1265]]],[[R[1257]],[R[23],[R[1257],"error"]],["error"]]]],[11,R[1314],E,R[1315],76,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,R[1580],E,R[1367],N,N],[10,R[1368],E,R[1369],77,[[["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],[R[44],"error"]]]]],[10,R[1370],E,R[1371],77,[[["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],[R[1257],"error"]]]]],[11,R[1314],E,R[1315],77,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,R[1440],E,R[1372],N,N],[10,R[1374],E,R[1375],78,[[["self"],[R[1265]]],[[R[1373]],["error"],[R[23],[R[1373],"error"]]]]],[11,R[1314],E,R[1315],78,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,R[1442],E,R[1372],N,N],[10,R[1374],E,R[1375],79,[[["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],[R[1373],"error"]]]]],[11,R[1314],E,R[1315],79,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[11,R[1351],E,R[1352],71,[[["self"]],[[R[23],[R[1348],"error"]],[R[1348]],["error"]]]],[11,R[1353],E,R[1354],71,[[["self"],[R[1348]]],[["error"],[R[23],["error"]]]]],[11,R[1355],E,R[1356],71,[[["self"]],[["u32"],[R[23],["u32","error"]],["error"]]]],[11,R[1357],E,R[1358],71,[[["self"],["u32"]],[["u32"],[R[23],["u32","error"]],["error"]]]],[11,R[1359],E,R[1360],71,[[["self"],[R[1348]],[R[40]]],[["error"],[R[23],["error"]]]]],[11,R[1349],E,R[1361],71,[[["self"],[R[44]],[R[40]]],[[R[23],["error"]],["error"]]]],[11,R[1362],E,R[1363],71,[[["self"],[R[44]]],[[R[23],["error"]],["error"]]]],[11,R[1350],E,R[1364],71,[[["self"],[R[34]],[R[40]]],[[R[44]],[R[23],[R[44],"error"]],["error"]]]],[11,R[1365],E,R[1366],71,[[["self"],[R[34]]],[[R[44]],[R[23],[R[44],"error"]],["error"]]]],[11,"raw_new",E,"Creates a new [RTCManagerProxy] by connecting to the `rtc`…",72,[[],[[R[23],[R[1376],"error"]],[R[1376]],["error"]]]],[11,"new",E,"Acquires the shared handle to the `rtc` service -…",72,[[],[[R[1376]],["error"],[R[23],[R[1376],"error"]]]]],[11,R[1368],E,R[1369],72,[[["self"]],[[R[44]],[R[23],[R[44],"error"]],["error"]]]],[11,R[1370],E,R[1371],72,[[["self"]],[[R[23],["handle","error"]],["handle"],["error"]]]],[11,"raw_new_time_u",E,R[1378],73,[[],[["error"],[R[1377]],[R[23],[R[1377],"error"]]]]],[11,"new_time_u",E,"Acquires the shared handle to the `time:u` service -…",73,[[],[[R[1377]],[R[23],[R[1377],"error"]],["error"]]]],[11,"raw_new_time_a",E,R[1378],73,[[],[["error"],[R[1377]],[R[23],[R[1377],"error"]]]]],[11,"new_time_a",E,"Acquires the shared handle to the `time:a` service -…",73,[[],[[R[1377]],[R[23],[R[1377],"error"]],["error"]]]],[11,"raw_new_time_s",E,R[1378],73,[[],[["error"],[R[1377]],[R[23],[R[1377],"error"]]]]],[11,"new_time_s",E,"Acquires the shared handle to the `time:s` service -…",73,[[],[[R[1377]],[R[23],[R[1377],"error"]],["error"]]]],[11,R[1374],E,R[1375],73,[[["self"]],[[R[1373]],["error"],[R[23],[R[1373],"error"]]]]],[0,"fs",R[1045],R[1317],N,N],[3,R[1581],R[1497],"Represent the type of a given resource when walking a…",N,N],[12,"0",E,E,80,N],[3,R[1582],E,"Represent the attached timestamps on a given resource.",N,N],[12,"creation_timestamp",E,"The resource creation UNIX timestamp.",81,N],[12,"modified_timestamp",E,"The resource last modification UNIX timestamp.",81,N],[12,"accessed_timestamp",E,"The resource last access UNIX timestamp.",81,N],[12,"is_valid",E,"false if one of the given timestamp couldn't have been…",81,N],[3,R[1583],E,"Represent an entry inside a directory.",N,N],[12,"path",E,"The path of the resource.",82,N],[12,"attribute",E,"The attribute of the resource. 1 = Archive bit is set…",82,N],[12,"directory_entry_type",E,"The type of the resource.",82,N],[12,"file_size",E,"The size of the file. (0 if it's a directory)",82,N],[3,R[1584],E,"Represent the type of a filesystem.",N,N],[12,"0",E,E,83,N],[3,R[1585],E,R[1379],N,N],[12,"0",E,E,84,N],[3,R[1586],E,R[1411],N,N],[12,"0",E,E,85,N],[3,R[1587],E,R[1417],N,N],[12,"0",E,E,86,N],[3,R[1588],E,R[1429],N,N],[12,"0",E,E,87,N],[3,"IFileProxy",E,R[1433],N,N],[12,"0",E,E,88,N],[6,"PartitionId",E,"A partition unique identifier on a disk.",N,N],[6,"DiskId",E,"A disk unique identifier.",N,N],[6,"FileSystemPath",E,"Represent a path in a filesystem.",N,N],[8,R[1589],E,R[1379],N,N],[10,R[1385],E,R[1386],89,[[["self"],["u32"],[R[1380]],["u64"],[R[1265]]],[["error"],[R[23],["error"]]]]],[10,R[1387],E,R[1388],89,[[["self"],[R[1380]],[R[1265]]],[["error"],[R[23],["error"]]]]],[10,R[1389],E,R[1390],89,[[["self"],[R[1380]],[R[1265]]],[["error"],[R[23],["error"]]]]],[10,R[1391],E,R[1392],89,[[["self"],[R[1380]],[R[1265]]],[["error"],[R[23],["error"]]]]],[10,R[1393],E,R[1394],89,[[["self"],[R[1380]],[R[1265]]],[["error"],[R[23],["error"]]]]],[10,R[1395],E,R[1396],89,[[["self"],[R[1380]],[R[1265]]],[["error"],[R[23],["error"]]]]],[10,R[1397],E,R[1398],89,[[["self"],[R[1380]],[R[1265]]],[[R[23],[R[1381],"error"]],["error"],[R[1381]]]]],[10,R[1626],E,R[1399],89,[[["self"],["u32"],[R[1380]],[R[1265]]],[[R[23],[R[1400],"error"]],["error"],[R[1400]]]]],[10,R[1401],E,R[1402],89,[[["self"],["u32"],[R[1380]],[R[1265]]],[[R[23],[R[1382],"error"]],[R[1382]],["error"]]]],[10,R[1403],E,R[1404],89,[[["self"],[R[1380]],[R[1265]]],[["error"],["u64"],[R[23],["u64","error"]]]]],[10,R[1405],E,R[1406],89,[[["self"],[R[1380]],[R[1265]]],[["error"],["u64"],[R[23],["u64","error"]]]]],[10,R[1407],E,R[1408],89,[[["self"],[R[1380]],[R[1265]]],[["error"],[R[1383]],[R[23],[R[1383],"error"]]]]],[10,R[1409],E,R[1410],89,[[["self"],[R[1265]]],[[R[23],[R[1384],"error"]],[R[1384]],["error"]]]],[11,R[1314],E,R[1315],89,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,R[1590],E,R[1379],N,N],[10,R[1385],E,R[1386],90,[[["u64"],["u32"],[R[1380]],["self"],[R[1265]]],[[R[23],["error"]],[R[1309],[R[23]]]]]],[10,R[1387],E,R[1388],90,[[[R[1380]],["self"],[R[1265]]],[[R[23],["error"]],[R[1309],[R[23]]]]]],[10,R[1389],E,R[1390],90,[[[R[1380]],["self"],[R[1265]]],[[R[23],["error"]],[R[1309],[R[23]]]]]],[10,R[1391],E,R[1392],90,[[[R[1380]],["self"],[R[1265]]],[[R[23],["error"]],[R[1309],[R[23]]]]]],[10,R[1393],E,R[1394],90,[[[R[1380]],["self"],[R[1265]]],[[R[23],["error"]],[R[1309],[R[23]]]]]],[10,R[1395],E,R[1396],90,[[[R[1380]],["self"],[R[1265]]],[[R[23],["error"]],[R[1309],[R[23]]]]]],[10,R[1397],E,R[1398],90,[[[R[1380]],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],[R[1381],"error"]]]]],[10,R[1626],E,R[1399],90,[[["u32"],[R[1380]],["self"],[R[1265]]],[[R[23],[R[1400],"error"]],[R[1309],[R[23]]]]]],[10,R[1401],E,R[1402],90,[[["u32"],[R[1380]],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],[R[1382],"error"]]]]],[10,R[1403],E,R[1404],90,[[[R[1380]],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["u64","error"]]]]],[10,R[1405],E,R[1406],90,[[[R[1380]],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["u64","error"]]]]],[10,R[1407],E,R[1408],90,[[[R[1380]],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],[R[1383],"error"]]]]],[10,R[1409],E,R[1410],90,[[["self"],[R[1265]]],[[R[23],[R[1384],"error"]],[R[1309],[R[23]]]]]],[11,R[1314],E,R[1315],90,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,"IStorage",E,R[1411],N,N],[10,"read",E,R[1412],91,[[["self"],["u64"],[R[1265]]],[["error"],[R[23],["error"]]]]],[10,"write",E,R[1413],91,[[["self"],["u64"],[R[1265]]],[["error"],[R[23],["error"]]]]],[10,"flush",E,R[1414],91,[[["self"],[R[1265]]],[["error"],[R[23],["error"]]]]],[10,R[1780],E,R[1415],91,[[["self"],["u64"],[R[1265]]],[["error"],[R[23],["error"]]]]],[10,R[1781],E,R[1416],91,[[["self"],[R[1265]]],[["error"],["u64"],[R[23],["u64","error"]]]]],[11,R[1314],E,R[1315],91,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,R[1591],E,R[1411],N,N],[10,"read",E,R[1412],92,[[[R[1265]],["u64"],["self"]],[[R[23],["error"]],[R[1309],[R[23]]]]]],[10,"write",E,R[1413],92,[[[R[1265]],["u64"],["self"]],[[R[23],["error"]],[R[1309],[R[23]]]]]],[10,"flush",E,R[1414],92,[[["self"],[R[1265]]],[[R[23],["error"]],[R[1309],[R[23]]]]]],[10,R[1780],E,R[1415],92,[[["u64"],["self"],[R[1265]]],[[R[23],["error"]],[R[1309],[R[23]]]]]],[10,R[1781],E,R[1416],92,[[["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["u64","error"]]]]],[11,R[1314],E,R[1315],92,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,R[1592],E,R[1417],N,N],[10,R[1421],E,R[1422],93,[[["self"],[R[1420]],["diskid"],[R[1265]]],[["error"],[R[1418]],[R[23],[R[1418],"error"]]]]],[10,R[1423],E,R[1424],93,[[["self"],["diskid"],[R[1265]]],[[R[1419]],["error"],[R[23],[R[1419],"error"]]]]],[10,R[1425],E,R[1426],93,[[["self"],[R[1420]],["diskid"],[R[1384]],[R[1265]]],[["error"],[R[23],["error"]]]]],[10,R[1427],E,R[1428],93,[[["self"],["diskid"],[R[1265]]],[["error"],[R[23],["error"]]]]],[11,R[1314],E,R[1315],93,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,R[1593],E,R[1417],N,N],[10,R[1421],E,R[1422],94,[[[R[1420]],["diskid"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],[R[1418],"error"]]]]],[10,R[1423],E,R[1424],94,[[["diskid"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],[R[1419],"error"]]]]],[10,R[1425],E,R[1426],94,[[[R[1420]],["diskid"],[R[1384]],["self"],[R[1265]]],[[R[23],["error"]],[R[1309],[R[23]]]]]],[10,R[1427],E,R[1428],94,[[["diskid"],["self"],[R[1265]]],[[R[23],["error"]],[R[1309],[R[23]]]]]],[11,R[1314],E,R[1315],94,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,"IDirectory",E,R[1429],N,N],[10,"read",E,R[1430],95,[[["self"],[R[1265]]],[["error"],["u64"],[R[23],["u64","error"]]]]],[10,R[1431],E,R[1432],95,[[["self"],[R[1265]]],[["error"],["u64"],[R[23],["u64","error"]]]]],[11,R[1314],E,R[1315],95,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,R[1594],E,R[1429],N,N],[10,"read",E,R[1430],96,[[["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["u64","error"]]]]],[10,R[1431],E,R[1432],96,[[["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["u64","error"]]]]],[11,R[1314],E,R[1315],96,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,"IFile",E,R[1433],N,N],[10,"read",E,R[1434],97,[[["self"],["u32"],["u64"],[R[1265]]],[["error"],["u64"],[R[23],["u64","error"]]]]],[10,"write",E,R[1413],97,[[["self"],["u32"],["u64"],[R[1265]]],[["error"],[R[23],["error"]]]]],[10,"flush",E,R[1435],97,[[["self"],[R[1265]]],[["error"],[R[23],["error"]]]]],[10,R[1780],E,R[1436],97,[[["self"],["u64"],[R[1265]]],[["error"],[R[23],["error"]]]]],[10,R[1781],E,R[1437],97,[[["self"],[R[1265]]],[["error"],["u64"],[R[23],["u64","error"]]]]],[11,R[1314],E,R[1315],97,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,"IFileAsync",E,R[1433],N,N],[10,"read",E,R[1434],98,[[["u64"],["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["u64","error"]]]]],[10,"write",E,R[1413],98,[[["u64"],["u32"],["self"],[R[1265]]],[[R[23],["error"]],[R[1309],[R[23]]]]]],[10,"flush",E,R[1435],98,[[["self"],[R[1265]]],[[R[23],["error"]],[R[1309],[R[23]]]]]],[10,R[1780],E,R[1436],98,[[["u64"],["self"],[R[1265]]],[[R[23],["error"]],[R[1309],[R[23]]]]]],[10,R[1781],E,R[1437],98,[[["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["u64","error"]]]]],[11,R[1314],E,R[1315],98,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[18,"Directory",E,"The entry is a file.",80,N],[18,"File",E,"The entry is a directory.",80,N],[18,"FAT12",E,"Represent a FAT12 fileystem.",83,N],[18,"FAT16",E,"Represent a FAT16 fileystem.",83,N],[18,"FAT32",E,"Represent a FAT32 fileystem.",83,N],[18,"PackageFileSubmission",E,"Represent a PFS0.",83,N],[11,R[1385],E,R[1386],84,[[["self"],["u32"],[R[1380]],["u64"]],[["error"],[R[23],["error"]]]]],[11,R[1387],E,R[1388],84,[[["self"],[R[1380]]],[["error"],[R[23],["error"]]]]],[11,R[1389],E,R[1390],84,[[["self"],[R[1380]]],[["error"],[R[23],["error"]]]]],[11,R[1391],E,R[1392],84,[[["self"],[R[1380]]],[["error"],[R[23],["error"]]]]],[11,R[1393],E,R[1394],84,[[["self"],[R[1380]]],[["error"],[R[23],["error"]]]]],[11,R[1395],E,R[1396],84,[[["self"],[R[1380]]],[["error"],[R[23],["error"]]]]],[11,R[1397],E,R[1398],84,[[["self"],[R[1380]]],[[R[23],[R[1381],"error"]],["error"],[R[1381]]]]],[11,R[1626],E,R[1399],84,[[["self"],["u32"],[R[1380]]],[[R[23],[R[1400],"error"]],["error"],[R[1400]]]]],[11,R[1401],E,R[1402],84,[[["self"],["u32"],[R[1380]]],[[R[23],[R[1382],"error"]],[R[1382]],["error"]]]],[11,R[1403],E,R[1404],84,[[["self"],[R[1380]]],[["error"],["u64"],[R[23],["u64","error"]]]]],[11,R[1405],E,R[1406],84,[[["self"],[R[1380]]],[["error"],["u64"],[R[23],["u64","error"]]]]],[11,R[1407],E,R[1408],84,[[["self"],[R[1380]]],[["error"],[R[1383]],[R[23],[R[1383],"error"]]]]],[11,R[1409],E,R[1410],84,[[["self"]],[[R[23],[R[1384],"error"]],[R[1384]],["error"]]]],[11,"read",E,R[1412],85,[[["self"],["u64"]],[["error"],[R[23],["error"]]]]],[11,"write",E,R[1413],85,[[["self"],["u64"]],[["error"],[R[23],["error"]]]]],[11,"flush",E,R[1414],85,[[["self"]],[["error"],[R[23],["error"]]]]],[11,R[1780],E,R[1415],85,[[["self"],["u64"]],[["error"],[R[23],["error"]]]]],[11,R[1781],E,R[1416],85,[[["self"]],[["error"],["u64"],[R[23],["u64","error"]]]]],[11,"raw_new",E,"Creates a new [IFileSystemServiceProxy] by connecting to…",86,[[],[[R[23],[R[1438],"error"]],[R[1438]],["error"]]]],[11,"new",E,"Acquires the shared handle to the `fsp-srv` service -…",86,[[],[["error"],[R[1438]],[R[23],[R[1438],"error"]]]]],[11,R[1421],E,R[1422],86,[[["self"],["diskid"],[R[1420]]],[["error"],[R[1418]],[R[23],[R[1418],"error"]]]]],[11,R[1423],E,R[1424],86,[[["self"],["diskid"]],[[R[1419]],["error"],[R[23],[R[1419],"error"]]]]],[11,R[1425],E,R[1426],86,[[["self"],["diskid"],[R[1384]],[R[1420]]],[["error"],[R[23],["error"]]]]],[11,R[1427],E,R[1428],86,[[["self"],["diskid"]],[["error"],[R[23],["error"]]]]],[11,"read",E,R[1430],87,[[["self"]],[["error"],["u64"],[R[23],["u64","error"]]]]],[11,R[1431],E,R[1432],87,[[["self"]],[["error"],["u64"],[R[23],["u64","error"]]]]],[11,"read",E,R[1434],88,[[["self"],["u32"],["u64"]],[["error"],["u64"],[R[23],["u64","error"]]]]],[11,"write",E,R[1413],88,[[["self"],["u32"],["u64"]],[["error"],[R[23],["error"]]]]],[11,"flush",E,R[1435],88,[[["self"]],[["error"],[R[23],["error"]]]]],[11,R[1780],E,R[1436],88,[[["self"],["u64"]],[["error"],[R[23],["error"]]]]],[11,R[1781],E,R[1437],88,[[["self"]],[["error"],["u64"],[R[23],["u64","error"]]]]],[0,"keyboard",R[1045],R[1317],N,N],[3,R[1595],R[1498],"Define the type of the data contained in HidKeyboardState.",N,N],[12,"0",E,E,99,N],[3,R[1596],E,"Autogenerated enum representing the HID keyboard scancode.",N,N],[12,"0",E,E,100,N],[3,R[1597],E,"Define the state returned by read_keyboard_state.",N,N],[12,"data",E,"A key or a scancode",101,N],[12,"additional_data",E,"Additional data used for upper key when…",101,N],[12,"state_type",E,"The type of the data before.",101,N],[12,"modifiers",E,"Keyboard modifiers",101,N],[3,R[1439],E,R[1441],N,N],[12,"0",E,E,102,N],[8,R[1440],E,R[1441],N,N],[10,R[1443],E,R[1444],103,[[["self"],[R[1265]]],[[R[1257]],[R[23],[R[1257],"error"]],["error"]]]],[10,R[1445],E,R[1446],103,[[["self"],[R[1265]]],[["error"],["u64"],[R[23],["u64","error"]]]]],[11,R[1314],E,R[1315],103,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,R[1442],E,R[1441],N,N],[10,R[1443],E,R[1444],104,[[["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],[R[1257],"error"]]]]],[10,R[1445],E,R[1446],104,[[["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["u64","error"]]]]],[11,R[1314],E,R[1315],104,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[18,"Scancode",E,"This entry is a scancode, the field data contains a…",99,N],[18,"Ascii",E,"This entry is an ascii char, the field data contains an…",99,N],[18,"Control",E,"This entry is an old PS2 control key that cannot be mapped…",99,N],[18,"Unknown",E,"This entry is unknown.",99,N],[18,"None",E,"The None key (scancode: 0x00)",100,N],[18,"ErrOvf",E,"The ErrOvf key (scancode: 0x01)",100,N],[18,"A",E,"The A key (scancode: 0x04)",100,N],[18,"B",E,"The B key (scancode: 0x05)",100,N],[18,"C",E,"The C key (scancode: 0x06)",100,N],[18,"D",E,"The D key (scancode: 0x07)",100,N],[18,"E",E,"The E key (scancode: 0x08)",100,N],[18,"F",E,"The F key (scancode: 0x09)",100,N],[18,"G",E,"The G key (scancode: 0x0a)",100,N],[18,"H",E,"The H key (scancode: 0x0b)",100,N],[18,"I",E,"The I key (scancode: 0x0c)",100,N],[18,"J",E,"The J key (scancode: 0x0d)",100,N],[18,"K",E,"The K key (scancode: 0x0e)",100,N],[18,"L",E,"The L key (scancode: 0x0f)",100,N],[18,"M",E,"The M key (scancode: 0x10)",100,N],[18,"N",E,"The N key (scancode: 0x11)",100,N],[18,"O",E,"The O key (scancode: 0x12)",100,N],[18,"P",E,"The P key (scancode: 0x13)",100,N],[18,"Q",E,"The Q key (scancode: 0x14)",100,N],[18,"R",E,"The R key (scancode: 0x15)",100,N],[18,"S",E,"The S key (scancode: 0x16)",100,N],[18,"T",E,"The T key (scancode: 0x17)",100,N],[18,"U",E,"The U key (scancode: 0x18)",100,N],[18,"V",E,"The V key (scancode: 0x19)",100,N],[18,"W",E,"The W key (scancode: 0x1a)",100,N],[18,"X",E,"The X key (scancode: 0x1b)",100,N],[18,"Y",E,"The Y key (scancode: 0x1c)",100,N],[18,"Z",E,"The Z key (scancode: 0x1d)",100,N],[18,"Number1",E,"The Number1 key (scancode: 0x1e)",100,N],[18,"Number2",E,"The Number2 key (scancode: 0x1f)",100,N],[18,"Number3",E,"The Number3 key (scancode: 0x20)",100,N],[18,"Number4",E,"The Number4 key (scancode: 0x21)",100,N],[18,"Number5",E,"The Number5 key (scancode: 0x22)",100,N],[18,"Number6",E,"The Number6 key (scancode: 0x23)",100,N],[18,"Number7",E,"The Number7 key (scancode: 0x24)",100,N],[18,"Number8",E,"The Number8 key (scancode: 0x25)",100,N],[18,"Number9",E,"The Number9 key (scancode: 0x26)",100,N],[18,"Number0",E,"The Number0 key (scancode: 0x27)",100,N],[18,"Enter",E,"The Enter key (scancode: 0x28)",100,N],[18,"Esc",E,"The Esc key (scancode: 0x29)",100,N],[18,"Backspace",E,"The Backspace key (scancode: 0x2a)",100,N],[18,"Tab",E,"The Tab key (scancode: 0x2b)",100,N],[18,"Space",E,"The Space key (scancode: 0x2c)",100,N],[18,"Minus",E,"The Minus key (scancode: 0x2d)",100,N],[18,"Equal",E,"The Equal key (scancode: 0x2e)",100,N],[18,"Leftbrace",E,"The Leftbrace key (scancode: 0x2f)",100,N],[18,"Rightbrace",E,"The Rightbrace key (scancode: 0x30)",100,N],[18,"Backslash",E,"The Backslash key (scancode: 0x31)",100,N],[18,"Hashtilde",E,"The Hashtilde key (scancode: 0x32)",100,N],[18,"Semicolon",E,"The Semicolon key (scancode: 0x33)",100,N],[18,"Apostrophe",E,"The Apostrophe key (scancode: 0x34)",100,N],[18,"Grave",E,"The Grave key (scancode: 0x35)",100,N],[18,"Comma",E,"The Comma key (scancode: 0x36)",100,N],[18,"Dot",E,"The Dot key (scancode: 0x37)",100,N],[18,"Slash",E,"The Slash key (scancode: 0x38)",100,N],[18,"CapsLock",E,"The CapsLock key (scancode: 0x39)",100,N],[18,"F1",E,"The F1 key (scancode: 0x3a)",100,N],[18,"F2",E,"The F2 key (scancode: 0x3b)",100,N],[18,"F3",E,"The F3 key (scancode: 0x3c)",100,N],[18,"F4",E,"The F4 key (scancode: 0x3d)",100,N],[18,"F5",E,"The F5 key (scancode: 0x3e)",100,N],[18,"F6",E,"The F6 key (scancode: 0x3f)",100,N],[18,"F7",E,"The F7 key (scancode: 0x40)",100,N],[18,"F8",E,"The F8 key (scancode: 0x41)",100,N],[18,"F9",E,"The F9 key (scancode: 0x42)",100,N],[18,"F10",E,"The F10 key (scancode: 0x43)",100,N],[18,"F11",E,"The F11 key (scancode: 0x44)",100,N],[18,"F12",E,"The F12 key (scancode: 0x45)",100,N],[18,"SysRQ",E,"The SysRQ key (scancode: 0x46)",100,N],[18,"ScrollLock",E,"The ScrollLock key (scancode: 0x47)",100,N],[18,"Pause",E,"The Pause key (scancode: 0x48)",100,N],[18,"Insert",E,"The Insert key (scancode: 0x49)",100,N],[18,"Home",E,"The Home key (scancode: 0x4a)",100,N],[18,"PageUp",E,"The PageUp key (scancode: 0x4b)",100,N],[18,"Delete",E,"The Delete key (scancode: 0x4c)",100,N],[18,"End",E,"The End key (scancode: 0x4d)",100,N],[18,"PageDown",E,"The PageDown key (scancode: 0x4e)",100,N],[18,"Right",E,"The Right key (scancode: 0x4f)",100,N],[18,"Left",E,"The Left key (scancode: 0x50)",100,N],[18,"Down",E,"The Down key (scancode: 0x51)",100,N],[18,"Up",E,"The Up key (scancode: 0x52)",100,N],[18,"NumLock",E,"The Numlock key (scancode: 0x53)",100,N],[18,"Kpslash",E,"The Kpslash key (scancode: 0x54)",100,N],[18,"Kpasterisk",E,"The Kpasterisk key (scancode: 0x55)",100,N],[18,"Kpminus",E,"The Kpminus key (scancode: 0x56)",100,N],[18,"Kpplus",E,"The Kpplus key (scancode: 0x57)",100,N],[18,"Kpenter",E,"The Kpenter key (scancode: 0x58)",100,N],[18,"Kp1",E,"The Kp1 key (scancode: 0x59)",100,N],[18,"Kp2",E,"The Kp2 key (scancode: 0x5a)",100,N],[18,"Kp3",E,"The Kp3 key (scancode: 0x5b)",100,N],[18,"Kp4",E,"The Kp4 key (scancode: 0x5c)",100,N],[18,"Kp5",E,"The Kp5 key (scancode: 0x5d)",100,N],[18,"Kp6",E,"The Kp6 key (scancode: 0x5e)",100,N],[18,"Kp7",E,"The Kp7 key (scancode: 0x5f)",100,N],[18,"Kp8",E,"The Kp8 key (scancode: 0x60)",100,N],[18,"Kp9",E,"The Kp9 key (scancode: 0x61)",100,N],[18,"Kp0",E,"The Kp0 key (scancode: 0x62)",100,N],[18,"Kpdot",E,"The Kpdot key (scancode: 0x63)",100,N],[18,"Key102nd",E,"The 102nd key (scancode: 0x64)",100,N],[18,"Compose",E,"The Compose key (scancode: 0x65)",100,N],[18,"Power",E,"The Power key (scancode: 0x66)",100,N],[18,"Kpequal",E,"The Kpequal key (scancode: 0x67)",100,N],[18,"F13",E,"The F13 key (scancode: 0x68)",100,N],[18,"F14",E,"The F14 key (scancode: 0x69)",100,N],[18,"F15",E,"The F15 key (scancode: 0x6a)",100,N],[18,"F16",E,"The F16 key (scancode: 0x6b)",100,N],[18,"F17",E,"The F17 key (scancode: 0x6c)",100,N],[18,"F18",E,"The F18 key (scancode: 0x6d)",100,N],[18,"F19",E,"The F19 key (scancode: 0x6e)",100,N],[18,"F20",E,"The F20 key (scancode: 0x6f)",100,N],[18,"F21",E,"The F21 key (scancode: 0x70)",100,N],[18,"F22",E,"The F22 key (scancode: 0x71)",100,N],[18,"F23",E,"The F23 key (scancode: 0x72)",100,N],[18,"F24",E,"The F24 key (scancode: 0x73)",100,N],[18,"Open",E,"The Open key (scancode: 0x74)",100,N],[18,"Help",E,"The Help key (scancode: 0x75)",100,N],[18,"Props",E,"The Props key (scancode: 0x76)",100,N],[18,"Front",E,"The Front key (scancode: 0x77)",100,N],[18,"Stop",E,"The Stop key (scancode: 0x78)",100,N],[18,"Again",E,"The Again key (scancode: 0x79)",100,N],[18,"Undo",E,"The Undo key (scancode: 0x7a)",100,N],[18,"Cut",E,"The Cut key (scancode: 0x7b)",100,N],[18,"Copy",E,"The Copy key (scancode: 0x7c)",100,N],[18,"Paste",E,"The Paste key (scancode: 0x7d)",100,N],[18,"Find",E,"The Find key (scancode: 0x7e)",100,N],[18,"Mute",E,"The Mute key (scancode: 0x7f)",100,N],[18,"VolumeUp",E,"The Volumeup key (scancode: 0x80)",100,N],[18,"VolumeDown",E,"The Volumedown key (scancode: 0x81)",100,N],[18,"CapsLockActive",E,"The CapsLockActive key (scancode: 0x82 )",100,N],[18,"NumLockActive",E,"The NumLockActive key (scancode: 0x83 )",100,N],[18,"ScrollLockActive",E,"The ScrollLockActive key (scancode: 0x84 )",100,N],[18,"KPcomma",E,"The Kpcomma key (scancode: 0x85)",100,N],[18,"KPleftParen",E,"The Kpleftparen key (scancode: 0xb6)",100,N],[18,"KPrightParen",E,"The Kprightparen key (scancode: 0xb7)",100,N],[18,"LeftCtrl",E,"The LeftCtrl key (scancode: 0xe0)",100,N],[18,"LeftShift",E,"The LeftShift key (scancode: 0xe1)",100,N],[18,"LeftAlt",E,"The LeftQlt key (scancode: 0xe2)",100,N],[18,"LeftMeta",E,"The LeftMeta key (scancode: 0xe3)",100,N],[18,"RightCtrl",E,"The RightCtrl key (scancode: 0xe4)",100,N],[18,"RightShift",E,"The RightShift key (scancode: 0xe5)",100,N],[18,"RightAlt",E,"The RightAlt key (scancode: 0xe6)",100,N],[18,"RightMeta",E,"The RightMeta key (scancode: 0xe7)",100,N],[18,"MediaPlayPause",E,"The MediaPlayPause key (scancode: 0xe8)",100,N],[18,"MediaStopCd",E,"The MediaStopCd key (scancode: 0xe9)",100,N],[18,"MediaPreviousSong",E,"The MediaPreviousSong key (scancode: 0xea)",100,N],[18,"MediaNextSong",E,"The MediaNextSong key (scancode: 0xeb)",100,N],[18,"MediaEjectCd",E,"The MediaEjectCd key (scancode: 0xec)",100,N],[18,"MediaVolumeUp",E,"The MediaVolumeUp key (scancode: 0xed)",100,N],[18,"MediaVolumeDown",E,"The MediaVolumeDown key (scancode: 0xee)",100,N],[18,"MediaMute",E,"The MediaMute key (scancode: 0xef)",100,N],[18,"MediaWWW",E,"The MediaWWW key (scancode: 0xf0)",100,N],[18,"MediaBack",E,"The MediaBack key (scancode: 0xf1)",100,N],[18,"MediaForward",E,"The MediaForward key (scancode: 0xf2)",100,N],[18,"MediaStop",E,"The MediaStop key (scancode: 0xf3)",100,N],[18,"MediaFind",E,"The MediaFind key (scancode: 0xf4)",100,N],[18,"MediaScrollUp",E,"The MediaScrollUp key (scancode: 0xf5)",100,N],[18,"MediaScrollDown",E,"The MediaScrollDown key (scancode: 0xf6)",100,N],[18,"MediaEdit",E,"The MediaEdit key (scancode: 0xf7)",100,N],[18,"MediaSleep",E,"The MediaSleep key (scancode: 0xf8)",100,N],[18,"MediaCoffee",E,"The MediaCoffee key (scancode: 0xf9)",100,N],[18,"MediaRefresh",E,"The MediaRefresh key (scancode: 0xfa)",100,N],[18,"MediaCalc",E,"The MediaCalc key (scancode: 0xfb)",100,N],[11,"raw_new",E,R[1378],102,[[],[[R[23],[R[1377],"error"]],["error"],[R[1377]]]]],[11,"new",E,"Acquires the shared handle to the `kbrd:u` service -…",102,[[],[[R[23],[R[1377],"error"]],["error"],[R[1377]]]]],[11,R[1443],E,R[1444],102,[[["self"]],[[R[23],["handle","error"]],["handle"],["error"]]]],[11,R[1445],E,R[1446],102,[[["self"]],[["error"],["u64"],[R[23],["u64","error"]]]]],[0,"ldr",R[1045],R[1317],N,N],[3,R[1598],R[1499],R[1447],N,N],[12,"0",E,E,105,N],[8,R[1599],E,R[1447],N,N],[10,R[1448],E,R[1449],106,[[["self"],[R[1265]]],[["error"],["u64"],[R[23],["u64","error"]]]]],[10,"wait",E,R[1450],106,[[["self"],["u64"],[R[1265]]],[["u32"],[R[23],["u32","error"]],["error"]]]],[11,R[1314],E,R[1315],106,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,R[1600],E,R[1447],N,N],[10,R[1448],E,R[1449],107,[[["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["u64","error"]]]]],[10,"wait",E,R[1450],107,[[["u64"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["u32","error"]]]]],[11,R[1314],E,R[1315],107,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[11,"raw_new",E,"Creates a new [ILoaderInterfaceProxy] by connecting to the…",105,[[],[[R[1451]],[R[23],[R[1451],"error"]],["error"]]]],[11,"new",E,"Acquires the shared handle to the `ldr:shel` service -…",105,[[],[[R[1451]],[R[23],[R[1451],"error"]],["error"]]]],[11,R[1448],E,R[1449],105,[[["self"]],[["error"],["u64"],[R[23],["u64","error"]]]]],[11,"wait",E,R[1450],105,[[["self"],["u64"]],[["u32"],[R[23],["u32","error"]],["error"]]]],[0,"twili",R[1045],R[1317],N,N],[3,"IPipeProxy",R[1500],R[1452],N,N],[12,"0",E,E,108,N],[3,R[1601],E,R[1455],N,N],[12,"0",E,E,109,N],[3,R[1602],E,R[1458],N,N],[12,"0",E,E,110,N],[8,"IPipe",E,R[1452],N,N],[10,"read",E,R[1453],111,[[["self"],[R[1265]]],[["error"],["u64"],[R[23],["u64","error"]]]]],[10,"write",E,R[1454],111,[[["self"],[R[1265]]],[["error"],[R[23],["error"]]]]],[11,R[1314],E,R[1315],111,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,"IPipeAsync",E,R[1452],N,N],[10,"read",E,R[1453],112,[[["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["u64","error"]]]]],[10,"write",E,R[1454],112,[[["self"],[R[1265]]],[[R[23],["error"]],[R[1309],[R[23]]]]]],[11,R[1314],E,R[1315],112,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,R[1603],E,R[1455],N,N],[10,R[1456],E,R[1457],113,[[["self"],[R[1328]],["pid"],[R[1265]]],[["error"],[R[23],["error"]]]]],[11,R[1314],E,R[1315],113,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,R[1604],E,R[1455],N,N],[10,R[1456],E,R[1457],114,[[[R[1328]],["pid"],["self"],[R[1265]]],[[R[23],["error"]],[R[1309],[R[23]]]]]],[11,R[1314],E,R[1315],114,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,R[1605],E,R[1458],N,N],[10,R[1462],E,R[1459],115,[[["self"],["pid"],[R[1265]]],[["error"],[R[23],["error"]]]]],[11,R[1314],E,R[1315],115,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,R[1606],E,R[1458],N,N],[10,R[1462],E,R[1459],116,[[["pid"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[11,R[1314],E,R[1315],116,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[11,"read",E,R[1453],108,[[["self"]],[["error"],["u64"],[R[23],["u64","error"]]]]],[11,"write",E,R[1454],108,[[["self"]],[["error"],[R[23],["error"]]]]],[11,"raw_new",E,"Creates a new [ITwiliManagerServiceProxy] by connecting to…",109,[[],[[R[1460]],["error"],[R[23],[R[1460],"error"]]]]],[11,"new",E,"Acquires the shared handle to the `twili:m` service -…",109,[[],[[R[1460]],["error"],[R[23],[R[1460],"error"]]]]],[11,R[1456],E,R[1457],109,[[["self"],[R[1328]]],[["error"],[R[23],["error"]]]]],[11,"raw_new",E,"Creates a new [ITwiliServiceProxy] by connecting to the…",110,[[],[[R[1461]],[R[23],[R[1461],"error"]],["error"]]]],[11,"new",E,"Acquires the shared handle to the `twili` service -…",110,[[],[["error"],[R[23],[R[1461],"error"]],[R[1461]]]]],[11,R[1462],E,R[1459],110,[[["self"]],[["error"],[R[23],["error"]]]]],[0,"example",R[1045],R[1317],N,N],[3,R[1607],R[1501],R[1463],N,N],[12,"0",E,E,117,N],[3,R[1608],E,R[1464],N,N],[12,"0",E,E,118,N],[3,R[1609],E,R[1467],N,N],[12,"0",E,E,119,N],[3,R[1610],E,R[1470],N,N],[12,"0",E,E,120,N],[3,R[1611],E,R[1472],N,N],[12,"0",E,E,121,N],[8,R[1612],E,R[1463],N,N],[11,R[1314],E,R[1315],122,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,R[1613],E,R[1463],N,N],[11,R[1314],E,R[1315],123,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,"IExample2",E,R[1464],N,N],[10,R[1474],E,R[1465],124,[[["self"],[R[1265]]],[["error"],[R[23],["error"]]]]],[10,"function2",E,R[1466],124,[[["self"],["u32"],[R[1265]]],[[R[23],["error"]],["error"]]]],[11,R[1314],E,R[1315],124,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,R[1614],E,R[1464],N,N],[10,R[1474],E,R[1465],125,[[["self"],[R[1265]]],[[R[23],["error"]],[R[1309],[R[23]]]]]],[10,"function2",E,R[1466],125,[[["u32"],["self"],[R[1265]]],[[R[23],["error"]],[R[1309],[R[23]]]]]],[11,R[1314],E,R[1315],125,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,"IExample3",E,R[1467],N,N],[10,R[1474],E,R[1469],126,[[["self"],[R[1265]]],[[R[23],[R[1468],"error"]],[R[1468]],["error"]]]],[11,R[1314],E,R[1315],126,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,R[1615],E,R[1467],N,N],[10,R[1474],E,R[1469],127,[[["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],[R[1468],"error"]]]]],[11,R[1314],E,R[1315],127,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,"IExample4",E,R[1470],N,N],[10,R[1474],E,R[1471],128,[[["self"],["u8"],[R[1265]]],[[R[1221]],["error"],[R[23],[R[1221],"error"]]]]],[11,R[1314],E,R[1315],128,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,R[1616],E,R[1470],N,N],[10,R[1474],E,R[1471],129,[[["u8"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],[R[1221],"error"]]]]],[11,R[1314],E,R[1315],129,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,"IExample1",E,R[1472],N,N],[11,R[1314],E,R[1315],130,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[8,R[1617],E,R[1472],N,N],[11,R[1314],E,R[1315],131,[[["u32"],["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[11,"raw_new",E,"Creates a new [IExample2Proxy] by connecting to the…",118,[[],[[R[23],[R[1473],"error"]],[R[1473]],["error"]]]],[11,"new",E,"Acquires the shared handle to the `hello:2` service -…",118,[[],[[R[23],[R[1473],"error"]],[R[1473]],["error"]]]],[11,R[1474],E,R[1465],118,[[["self"]],[["error"],[R[23],["error"]]]]],[11,"function2",E,R[1466],118,[[["self"],["u32"]],[[R[23],["error"]],["error"]]]],[11,"raw_new",E,"Creates a new [IExample3Proxy] by connecting to the…",119,[[],[[R[23],[R[1475],"error"]],[R[1475]],["error"]]]],[11,"new",E,"Acquires the shared handle to the `hello:3` service -…",119,[[],[[R[23],[R[1475],"error"]],[R[1475]],["error"]]]],[11,R[1474],E,R[1469],119,[[["self"]],[[R[23],[R[1468],"error"]],[R[1468]],["error"]]]],[11,"raw_new",E,"Creates a new [IExample4Proxy] by connecting to the…",120,[[],[["error"],[R[23],[R[1476],"error"]],[R[1476]]]]],[11,"new",E,"Acquires the shared handle to the `hello:4` service -…",120,[[],[[R[23],[R[1476],"error"]],["error"],[R[1476]]]]],[11,R[1474],E,R[1471],120,[[["self"],["u8"]],[[R[1221]],["error"],[R[23],[R[1221],"error"]]]]],[11,"raw_new",E,"Creates a new [IExample1Proxy] by connecting to the…",121,[[],[["error"],[R[23],[R[1477],"error"]],[R[1477]]]]],[11,"new",E,"Acquires the shared handle to the `hello:1` service -…",121,[[],[["error"],[R[23],[R[1477],"error"]],[R[1477]]]]],[0,"error",R[1045],"Error handling",N,N],[3,R[320],R[1502],R[933],N,N],[12,"0",E,E,132,N],[3,"Module",E,E,N,N],[12,"0",E,E,133,N],[3,R[1618],E,"FileSystem driver errors.",N,N],[12,"0",E,E,134,N],[3,R[1619],E,"Internal libuser errors.",N,N],[12,"0",E,E,135,N],[3,"SmError",E,"Service Manager errors.",N,N],[12,"0",E,E,136,N],[3,"AhciError",E,"AHCI driver errors.",N,N],[12,"0",E,E,137,N],[3,"TimeError",E,"Time errors.",N,N],[12,"0",E,E,138,N],[3,R[1620],E,"Loader errors.",N,N],[12,"0",E,E,139,N],[3,"PmError",E,"PM Errors.",N,N],[12,"0",E,E,140,N],[3,"HidError",E,"HID driver errors.",N,N],[12,"0",E,E,141,N],[3,"ViError",E,"Vi driver errors.",N,N],[12,"0",E,E,142,N],[4,"Error",E,"The global error type. Every error defined here can be…",N,N],[13,"Kernel",E,"A Kernel Error. Usually returned by syscalls.",143,N],[13,"Loader",E,"Loader error.",143,N],[13,"Pm",E,"Process Manager error.",143,N],[13,"Sm",E,"Service Manager error.",143,N],[13,"Vi",E,"Vi Error",143,N],[13,"Libuser",E,"Internal Libuser error.",143,N],[13,"Ahci",E,"Ahci driver error.",143,N],[13,"Time",E,"Time errors",143,N],[13,R[1782],E,"Filesystem driver error",143,N],[13,"Hid",E,"HID errors",143,N],[13,"Unknown",E,"An unknown error type. Either someone returned a custom…",143,N],[11,"from_code",E,"Create an Error from a packed error code, creating a…",143,[[["u32"]],["error"]]],[11,"as_code",E,"Pack this error into an error code. Note that the returned…",143,[[["self"]],["u32"]]],[18,"Kernel",E,E,133,N],[18,R[1782],E,E,133,N],[18,"Loader",E,E,133,N],[18,"Pm",E,E,133,N],[18,"Sm",E,E,133,N],[18,"Vi",E,E,133,N],[18,"Time",E,E,133,N],[18,"Hid",E,E,133,N],[18,"Libuser",E,E,133,N],[18,"Ahci",E,E,133,N],[18,"Unknown",E,"Unknown error.",134,N],[18,"PathNotFound",E,"The given resource couldn't be found.",134,N],[18,"PathExists",E,"A resource at the given path already exist.",134,N],[18,"InUse",E,"Resource already in use.",134,N],[18,"NoSpaceLeft",E,"There isn't enough space for a resource to be stored.",134,N],[18,"InvalidPartition",E,"The partition wasn't used as it's invalid.",134,N],[18,R[1481],E,"Specified value is out of range.",134,N],[18,"WriteFailed",E,"A writing operation failed on the attached storage device.",134,N],[18,"ReadFailed",E,"A read operation failed on the attached storage device.",134,N],[18,"PartitionNotFound",E,"The given partition cannot be found.",134,N],[18,"InvalidInput",E,"The given input wasn't valid.",134,N],[18,"PathTooLong",E,"The given path is too long to be resolved.",134,N],[18,"ReadOnlyFileSystem",E,"Attempted to modify a read-only filesystem.",134,N],[18,"AccessDenied",E,"The access to a given resource has been denied.",134,N],[18,"FileNotFound",E,"The requested file wasn't found.",134,N],[18,"UnsupportedOperation",E,"The requested operation isn't supported by the detail.",134,N],[18,"DirectoryNotFound",E,"The requested directory wasn't found.",134,N],[18,"NotAFile",E,"The given resource cannot be represented as a file.",134,N],[18,"NotADirectory",E,"The given resource cannot be represented as a directory.",134,N],[18,"DiskNotFound",E,"The given disk id doesn't correspond to a any known disk.",134,N],[18,"AddressSpaceExhausted",E,"An attempt to find available space failed.",135,N],[18,"InvalidMoveHandleCount",E,"Too many move handles were passed to an IPC message.",135,N],[18,"InvalidCopyHandleCount",E,"Too many copy handles were passed to an IPC message.",135,N],[18,"PidMissing",E,"Attempted to read PID from an IPC message containing none.",135,N],[18,"InvalidIpcBufferCount",E,"Not enough IPC buffers were passed to an IPC message.",135,N],[18,"InvalidIpcBuffer",E,"Invalid IPCBuffer",135,N],[18,"InvalidIpcRequest",E,"Invalid IPC request",135,N],[18,"OutOfProcesses",E,"Too many processes spawned.",136,N],[18,"NotInitialized",E,"Attempted to use the service manager without initializing…",136,N],[18,"MaxSessions",E,"This service already reached the maximum amount of…",136,N],[18,"ServiceAlreadyRegistered",E,"Attempted to register a service that already exists.",136,N],[18,"OutOfServices",E,"Too many services have been created.",136,N],[18,"InvalidName",E,"The name is too long. Make sure it's only 7 characters and…",136,N],[18,"ServiceNotRegistered",E,"Attempted to unregister a service that was not previously…",136,N],[18,"PermissionDenied",E,"Process SACs do not allow accessing or hosting this service.",136,N],[18,"ServiceAccessControlTooBig",E,"The provided SACs are too big.",136,N],[18,"InvalidArg",E,"Passed argument were found to be illegal.",137,N],[18,"BufferTooScattered",E,"Passed buffer for DMA is too physically scattered. This…",137,N],[18,"IoError",E,"The hardware reported an error.",137,N],[18,R[1478],E,R[1479],138,N],[18,"Overflow",E,R[1480],138,N],[18,R[1481],E,"The given input value was out of the timezone rule range.",138,N],[18,"TimeZoneConversionFailed",E,"Something when wrong during timezone conversion.",138,N],[18,"TimeZoneNotFound",E,"The requested timezone wasn't found",138,N],[18,"InvalidKacs",E,"KACs are invalid.",139,N],[18,"InvalidPath",E,"Invalid path read.",139,N],[18,"ProgramNotFound",E,"Tried to launch a title that does not exist.",139,N],[18,"InvalidElf",E,"The ELF is corrupted.",139,N],[18,"PidNotFound",E,"Pid not found",140,N],[18,"NoKeyboardStateUpdate",E,"The keyboard was idle and no new data can be provided.",141,N],[18,"InvalidUtf8",E,"The given string is not UTF-8.",142,N],[0,"allocator",R[1045],"Heap allocator.",N,N],[3,R[875],R[1503],"The libuser heap allocator.",N,N],[12,"0",E,E,144,N],[11,"expand",E,R[1482],144,[[[R[661]],[R[4]]],[[R[23],[R[268]]],[R[268]]]]],[11,"new",E,"Creates an empty heap.",144,[[],["allocator"]]],[0,R[1623],R[1045],R[1825],N,N],[3,"Terminal",R[1504],"A struct for logging text to the window.",N,N],[12,"buffer",E,"Internal write buffer.",145,N],[12,"pipe",E,"The vi pipe backing this terminal.",145,N],[4,"WindowSize",E,"Window creation requested size.",N,N],[13,"Fullscreen",E,"Takes the full screen.",146,N],[13,"FontLines",E,"Takes a given amount of lines.",146,N],[13,"Manual",E,"Manually position the window at the given x/y, with a…",146,N],[11,"new",E,R[1826],145,[[["windowsize"]],[["error"],[R[23],[R[1623],"error"]],[R[1623]]]]],[11,"draw",E,"Flush the write buffer and draw the text.",145,[[["self"]],[["error"],[R[23],["error"]]]]],[11,"read",E,"Read a line of text. Note that it might return without…",145,[[["self"]],[["error"],["u64"],[R[23],["u64","error"]]]]],[0,"ps2",R[1045],"PS2 Keyboard APIs",N,N],[3,R[1621],R[1505],"Inner state of a managed keyboard.",N,N],[12,"ipc_session",E,"The session to kbrd:u",147,N],[12,"keys_queue",E,"The queue containing the keyboard state received from IPC.",147,N],[3,"Keyboard",E,"A managed keyboard.",N,N],[12,"inner",E,"Inner state",148,N],[12,R[1651],E,"An event triggered on keyboard update.",148,N],[11,"new",E,"Creates a keyboard by connecting to the ipc service.",148,[[],[[R[23],["error"]],["error"]]]],[11,"read_key",E,R[1647],148,[[["self"]],["char"]]],[11,"read_key_async",E,"Asynchronously waits for a single key press, and return…",148,[[[R[1265]],["self"]]]],[11,R[1483],E,R[1484],148,[[["self"]],[[R[5],["char"]],["char"]]]],[11,"update_keys",E,"Update keys from the keyboard service.",147,[[["self"]]]],[11,"try_read_cached_key",E,"Try to read a key from the internal cache queue.",147,[[["self"]],[[R[5],["char"]],["char"]]]],[11,R[1483],E,R[1484],147,[[["self"]],[[R[5],["char"]],["char"]]]],[0,"window",R[1045],"Window creation and drawing APIs",N,N],[3,"Color",R[1506],R[1818],N,N],[12,"b",E,"Blue component",149,N],[12,"g",E,"Green component",149,N],[12,"r",E,"Red component",149,N],[12,"a",E,"Alpha component",149,N],[3,"Window",E,"A managed window.",N,N],[12,"buf",E,"The framebuffer memory shared with Vi. Drawing to this…",150,N],[12,"handle",E,"Vi handle for this window.",150,N],[12,"width",E,"Width of the window.",150,N],[12,"height",E,"Height of the window.",150,N],[12,"bpp",E,"Bits per pixel for the framebuffer.",150,N],[11,"rgb",E,"Creates a color from the r/g/b components. Alpha will be…",149,[[["u8"]],["color"]]],[11,"new",E,"Creates a window in the vi compositor.",150,[[["u32"],["i32"]],[["window"],["error"],[R[23],["window","error"]]]]],[11,"draw",E,R[1827],150,[[["self"]],[["error"],[R[23],["error"]]]]],[11,"width",E,"window width in pixels. Does not account for bpp",150,[[["self"]],[R[4]]]],[11,"height",E,"window height in pixels. Does not account for bpp",150,[[["self"]],[R[4]]]],[11,"bpp",E,R[1820],150,[[["self"]],[R[4]]]],[11,R[1821],E,R[1822],150,[[["self"],[R[4]]],[R[4]]]],[11,"write_px",E,"Writes a pixel in the window respecting the bgr pattern",150,[[["self"],["color"],[R[4]]]]],[11,R[1823],E,"Writes a pixel in the window respecting the bgr pattern…",150,[[["self"],["color"],[R[4]]]]],[11,"get_buffer",E,R[1824],150,[[["self"]]]],[11,"clear",E,"Clears the whole window, making it black.",150,[[["self"]]]],[0,"zero_box",R[1045],"A module that allocates zeroed types on the heap without…",N,N],[3,"ZeroBox",R[1507],"A wrapper around a Box that can initialize itself directly…",N,N],[12,"owned_box",E,"The box we secretely wrap.",151,N],[8,"ZeroInitialized",E,"A marker trait indicating that zero values is a valid…",N,N],[11,"new",E,"Regular Box initialisation.",151,[[[T]],["zerobox"]]],[11,"new_zeroed",E,"Allocate a ZeroBox directly on the heap, and zero it.",151,[[],["zerobox"]]],[0,"log_impl",R[1045],"Implementation for the log crate",N,N],[3,"Logger",R[1508],"Log implementation structure.",N,N],[5,"init",E,"Initializes the global logger with the svc logger.",N,[[]]],[17,"_",R[1045],R[1485],N,N],[17,"_",E,R[1485],N,N],[17,"_",E,R[1485],N,N],[17,"_",E,R[1485],N,N],[17,"_",E,R[1485],N,N],[17,"_",E,R[1485],N,N],[17,"_",E,R[1485],N,N],[17,"_",E,R[1485],N,N],[17,"_",E,R[1485],N,N],[14,R[669],E,"Define the capabilities array in the .kernel_caps section.…",N,N],[14,"kip_header",E,"Define the kernel built-ins in the .kip_header section.…",N,N],[11,"size",R[1486],E,0,[[["self"]],[R[4]]]],[11,"is_cool",E,E,0,[[[R[4]]],["bool"]]],[11,R[1272],E,E,0,[[[R[4]]],[T]]],[11,R[1273],E,E,0,[[[R[4]]],[T]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[20],E,E,0,[[[U]],[R[23]]]],[11,"into",E,E,0,[[],[U]]],[11,R[21],E,E,0,[[],[R[23]]]],[11,R[25],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],[T]]],[11,R[24],E,E,0,[[["self"]],[R[26]]]],[11,"size",E,E,1,[[["self"]],[R[4]]]],[11,"is_cool",E,E,1,[[[R[4]]],["bool"]]],[11,R[1272],E,E,1,[[[R[4]]],[T]]],[11,R[1273],E,E,1,[[[R[4]]],[T]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[20],E,E,1,[[[U]],[R[23]]]],[11,"into",E,E,1,[[],[U]]],[11,R[21],E,E,1,[[],[R[23]]]],[11,R[25],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"]],[T]]],[11,R[24],E,E,1,[[["self"]],[R[26]]]],[11,"try_poll",E,E,1,[[["pin"],["f"],["context"]],["poll"]]],[11,"size",E,E,2,[[["self"]],[R[4]]]],[11,"is_cool",E,E,2,[[[R[4]]],["bool"]]],[11,R[1272],E,E,2,[[[R[4]]],[T]]],[11,R[1273],E,E,2,[[[R[4]]],[T]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[20],E,E,2,[[[U]],[R[23]]]],[11,"into",E,E,2,[[],[U]]],[11,R[21],E,E,2,[[],[R[23]]]],[11,R[25],E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"]],[T]]],[11,R[24],E,E,2,[[["self"]],[R[26]]]],[11,R[189],E,E,2,[[["self"]],[T]]],[11,R[187],E,E,2,[[["self"],[T]]]],[11,"size",R[1487],E,4,[[["self"]],[R[4]]]],[11,"is_cool",E,E,4,[[[R[4]]],["bool"]]],[11,R[1272],E,E,4,[[[R[4]]],[T]]],[11,R[1273],E,E,4,[[[R[4]]],[T]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[20],E,E,4,[[[U]],[R[23]]]],[11,"into",E,E,4,[[],[U]]],[11,R[21],E,E,4,[[],[R[23]]]],[11,R[25],E,E,4,[[["self"]],[T]]],[11,R[22],E,E,4,[[["self"]],[T]]],[11,R[24],E,E,4,[[["self"]],[R[26]]]],[11,"size",E,E,5,[[["self"]],[R[4]]]],[11,"is_cool",E,E,5,[[[R[4]]],["bool"]]],[11,R[1272],E,E,5,[[[R[4]]],[T]]],[11,R[1273],E,E,5,[[[R[4]]],[T]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[20],E,E,5,[[[U]],[R[23]]]],[11,"into",E,E,5,[[],[U]]],[11,R[21],E,E,5,[[],[R[23]]]],[11,R[25],E,E,5,[[["self"]],[T]]],[11,R[22],E,E,5,[[["self"]],[T]]],[11,R[24],E,E,5,[[["self"]],[R[26]]]],[11,"size",E,E,6,[[["self"]],[R[4]]]],[11,"is_cool",E,E,6,[[[R[4]]],["bool"]]],[11,R[1272],E,E,6,[[[R[4]]],[T]]],[11,R[1273],E,E,6,[[[R[4]]],[T]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[20],E,E,6,[[[U]],[R[23]]]],[11,"into",E,E,6,[[],[U]]],[11,R[21],E,E,6,[[],[R[23]]]],[11,R[25],E,E,6,[[["self"]],[T]]],[11,R[22],E,E,6,[[["self"]],[T]]],[11,R[24],E,E,6,[[["self"]],[R[26]]]],[11,R[189],E,E,6,[[["self"]],[T]]],[11,R[187],E,E,6,[[["self"],[T]]]],[11,"size",E,E,7,[[["self"]],[R[4]]]],[11,"is_cool",E,E,7,[[[R[4]]],["bool"]]],[11,R[1272],E,E,7,[[[R[4]]],[T]]],[11,R[1273],E,E,7,[[[R[4]]],[T]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[20],E,E,7,[[[U]],[R[23]]]],[11,"into",E,E,7,[[],[U]]],[11,R[21],E,E,7,[[],[R[23]]]],[11,R[25],E,E,7,[[["self"]],[T]]],[11,R[22],E,E,7,[[["self"]],[T]]],[11,R[24],E,E,7,[[["self"]],[R[26]]]],[11,"size",R[1173],E,8,[[["self"]],[R[4]]]],[11,"is_cool",E,E,8,[[[R[4]]],["bool"]]],[11,R[1272],E,E,8,[[[R[4]]],[T]]],[11,R[1273],E,E,8,[[[R[4]]],[T]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[20],E,E,8,[[[U]],[R[23]]]],[11,"into",E,E,8,[[],[U]]],[11,R[21],E,E,8,[[],[R[23]]]],[11,R[25],E,E,8,[[["self"]],[T]]],[11,R[22],E,E,8,[[["self"]],[T]]],[11,R[24],E,E,8,[[["self"]],[R[26]]]],[11,R[189],E,E,8,[[["self"]],[T]]],[11,R[187],E,E,8,[[["self"],[T]]]],[11,"size",E,E,9,[[["self"]],[R[4]]]],[11,"is_cool",E,E,9,[[[R[4]]],["bool"]]],[11,R[1272],E,E,9,[[[R[4]]],[T]]],[11,R[1273],E,E,9,[[[R[4]]],[T]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[20],E,E,9,[[[U]],[R[23]]]],[11,"into",E,E,9,[[],[U]]],[11,R[21],E,E,9,[[],[R[23]]]],[11,R[25],E,E,9,[[["self"]],[T]]],[11,R[22],E,E,9,[[["self"]],[T]]],[11,R[24],E,E,9,[[["self"]],[R[26]]]],[11,R[189],E,E,9,[[["self"]],[T]]],[11,R[187],E,E,9,[[["self"],[T]]]],[11,"size",E,E,10,[[["self"]],[R[4]]]],[11,"is_cool",E,E,10,[[[R[4]]],["bool"]]],[11,R[1272],E,E,10,[[[R[4]]],[T]]],[11,R[1273],E,E,10,[[[R[4]]],[T]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[20],E,E,10,[[[U]],[R[23]]]],[11,"into",E,E,10,[[],[U]]],[11,R[21],E,E,10,[[],[R[23]]]],[11,R[25],E,E,10,[[["self"]],[T]]],[11,R[22],E,E,10,[[["self"]],[T]]],[11,R[24],E,E,10,[[["self"]],[R[26]]]],[11,"size",E,E,11,[[["self"]],[R[4]]]],[11,"is_cool",E,E,11,[[[R[4]]],["bool"]]],[11,R[1272],E,E,11,[[[R[4]]],[T]]],[11,R[1273],E,E,11,[[[R[4]]],[T]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[20],E,E,11,[[[U]],[R[23]]]],[11,"into",E,E,11,[[],[U]]],[11,R[21],E,E,11,[[],[R[23]]]],[11,R[25],E,E,11,[[["self"]],[T]]],[11,R[22],E,E,11,[[["self"]],[T]]],[11,R[24],E,E,11,[[["self"]],[R[26]]]],[11,R[189],E,E,11,[[["self"]],[T]]],[11,R[187],E,E,11,[[["self"],[T]]]],[11,"size",E,E,12,[[["self"]],[R[4]]]],[11,"is_cool",E,E,12,[[[R[4]]],["bool"]]],[11,R[1272],E,E,12,[[[R[4]]],[T]]],[11,R[1273],E,E,12,[[[R[4]]],[T]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[20],E,E,12,[[[U]],[R[23]]]],[11,"into",E,E,12,[[],[U]]],[11,R[21],E,E,12,[[],[R[23]]]],[11,R[25],E,E,12,[[["self"]],[T]]],[11,R[22],E,E,12,[[["self"]],[T]]],[11,R[24],E,E,12,[[["self"]],[R[26]]]],[11,"size",E,E,13,[[["self"]],[R[4]]]],[11,"is_cool",E,E,13,[[[R[4]]],["bool"]]],[11,R[1272],E,E,13,[[[R[4]]],[T]]],[11,R[1273],E,E,13,[[[R[4]]],[T]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[20],E,E,13,[[[U]],[R[23]]]],[11,"into",E,E,13,[[],[U]]],[11,R[21],E,E,13,[[],[R[23]]]],[11,R[25],E,E,13,[[["self"]],[T]]],[11,R[22],E,E,13,[[["self"]],[T]]],[11,R[24],E,E,13,[[["self"]],[R[26]]]],[11,"size",E,E,14,[[["self"]],[R[4]]]],[11,"is_cool",E,E,14,[[[R[4]]],["bool"]]],[11,R[1272],E,E,14,[[[R[4]]],[T]]],[11,R[1273],E,E,14,[[[R[4]]],[T]]],[11,"from",E,E,14,[[[T]],[T]]],[11,R[20],E,E,14,[[[U]],[R[23]]]],[11,"into",E,E,14,[[],[U]]],[11,R[21],E,E,14,[[],[R[23]]]],[11,R[25],E,E,14,[[["self"]],[T]]],[11,R[22],E,E,14,[[["self"]],[T]]],[11,R[24],E,E,14,[[["self"]],[R[26]]]],[11,"bit",E,E,14,[[["self"],[R[4]]],["bool"]]],[11,R[752],E,E,14,[[["self"],[R[4]],["bool"]]]],[11,"size",E,E,15,[[["self"]],[R[4]]]],[11,"is_cool",E,E,15,[[[R[4]]],["bool"]]],[11,R[1272],E,E,15,[[[R[4]]],[T]]],[11,R[1273],E,E,15,[[[R[4]]],[T]]],[11,"from",E,E,15,[[[T]],[T]]],[11,R[20],E,E,15,[[[U]],[R[23]]]],[11,"into",E,E,15,[[],[U]]],[11,R[21],E,E,15,[[],[R[23]]]],[11,R[25],E,E,15,[[["self"]],[T]]],[11,R[22],E,E,15,[[["self"]],[T]]],[11,R[24],E,E,15,[[["self"]],[R[26]]]],[11,"size",E,E,16,[[["self"]],[R[4]]]],[11,"is_cool",E,E,16,[[[R[4]]],["bool"]]],[11,R[1272],E,E,16,[[[R[4]]],[T]]],[11,R[1273],E,E,16,[[[R[4]]],[T]]],[11,"from",E,E,16,[[[T]],[T]]],[11,R[20],E,E,16,[[[U]],[R[23]]]],[11,"into",E,E,16,[[],[U]]],[11,R[21],E,E,16,[[],[R[23]]]],[11,R[25],E,E,16,[[["self"]],[T]]],[11,R[22],E,E,16,[[["self"]],[T]]],[11,R[24],E,E,16,[[["self"]],[R[26]]]],[11,R[189],E,E,16,[[["self"]],[T]]],[11,R[187],E,E,16,[[["self"],[T]]]],[11,"size",E,E,17,[[["self"]],[R[4]]]],[11,"is_cool",E,E,17,[[[R[4]]],["bool"]]],[11,R[1272],E,E,17,[[[R[4]]],[T]]],[11,R[1273],E,E,17,[[[R[4]]],[T]]],[11,"from",E,E,17,[[[T]],[T]]],[11,R[20],E,E,17,[[[U]],[R[23]]]],[11,"into",E,E,17,[[],[U]]],[11,R[21],E,E,17,[[],[R[23]]]],[11,R[25],E,E,17,[[["self"]],[T]]],[11,R[22],E,E,17,[[["self"]],[T]]],[11,R[24],E,E,17,[[["self"]],[R[26]]]],[11,R[189],E,E,17,[[["self"]],[T]]],[11,R[187],E,E,17,[[["self"],[T]]]],[11,"size",E,E,18,[[["self"]],[R[4]]]],[11,"is_cool",E,E,18,[[[R[4]]],["bool"]]],[11,R[1272],E,E,18,[[[R[4]]],[T]]],[11,R[1273],E,E,18,[[[R[4]]],[T]]],[11,"from",E,E,18,[[[T]],[T]]],[11,R[20],E,E,18,[[[U]],[R[23]]]],[11,"into",E,E,18,[[],[U]]],[11,R[21],E,E,18,[[],[R[23]]]],[11,R[25],E,E,18,[[["self"]],[T]]],[11,R[22],E,E,18,[[["self"]],[T]]],[11,R[24],E,E,18,[[["self"]],[R[26]]]],[11,"size",R[1488],E,19,[[["self"]],[R[4]]]],[11,"is_cool",E,E,19,[[[R[4]]],["bool"]]],[11,R[1272],E,E,19,[[[R[4]]],[T]]],[11,R[1273],E,E,19,[[[R[4]]],[T]]],[11,"from",E,E,19,[[[T]],[T]]],[11,R[20],E,E,19,[[[U]],[R[23]]]],[11,"into",E,E,19,[[],[U]]],[11,R[21],E,E,19,[[],[R[23]]]],[11,R[25],E,E,19,[[["self"]],[T]]],[11,R[22],E,E,19,[[["self"]],[T]]],[11,R[24],E,E,19,[[["self"]],[R[26]]]],[11,"size",E,E,20,[[["self"]],[R[4]]]],[11,"is_cool",E,E,20,[[[R[4]]],["bool"]]],[11,R[1272],E,E,20,[[[R[4]]],[T]]],[11,R[1273],E,E,20,[[[R[4]]],[T]]],[11,"from",E,E,20,[[[T]],[T]]],[11,R[20],E,E,20,[[[U]],[R[23]]]],[11,"into",E,E,20,[[],[U]]],[11,R[21],E,E,20,[[],[R[23]]]],[11,R[25],E,E,20,[[["self"]],[T]]],[11,R[22],E,E,20,[[["self"]],[T]]],[11,R[24],E,E,20,[[["self"]],[R[26]]]],[11,R[189],E,E,20,[[["self"]],[T]]],[11,R[187],E,E,20,[[["self"],[T]]]],[11,"size",E,E,21,[[["self"]],[R[4]]]],[11,"is_cool",E,E,21,[[[R[4]]],["bool"]]],[11,R[1272],E,E,21,[[[R[4]]],[T]]],[11,R[1273],E,E,21,[[[R[4]]],[T]]],[11,"from",E,E,21,[[[T]],[T]]],[11,R[20],E,E,21,[[[U]],[R[23]]]],[11,"into",E,E,21,[[],[U]]],[11,R[21],E,E,21,[[],[R[23]]]],[11,R[25],E,E,21,[[["self"]],[T]]],[11,R[22],E,E,21,[[["self"]],[T]]],[11,R[24],E,E,21,[[["self"]],[R[26]]]],[11,"size",E,E,22,[[["self"]],[R[4]]]],[11,"is_cool",E,E,22,[[[R[4]]],["bool"]]],[11,R[1272],E,E,22,[[[R[4]]],[T]]],[11,R[1273],E,E,22,[[[R[4]]],[T]]],[11,"from",E,E,22,[[[T]],[T]]],[11,R[20],E,E,22,[[[U]],[R[23]]]],[11,"into",E,E,22,[[],[U]]],[11,R[21],E,E,22,[[],[R[23]]]],[11,R[25],E,E,22,[[["self"]],[T]]],[11,R[22],E,E,22,[[["self"]],[T]]],[11,R[24],E,E,22,[[["self"]],[R[26]]]],[11,"size",E,E,23,[[["self"]],[R[4]]]],[11,"is_cool",E,E,23,[[[R[4]]],["bool"]]],[11,R[1272],E,E,23,[[[R[4]]],[T]]],[11,R[1273],E,E,23,[[[R[4]]],[T]]],[11,"from",E,E,23,[[[T]],[T]]],[11,R[20],E,E,23,[[[U]],[R[23]]]],[11,"into",E,E,23,[[],[U]]],[11,R[21],E,E,23,[[],[R[23]]]],[11,R[25],E,E,23,[[["self"]],[T]]],[11,R[22],E,E,23,[[["self"]],[T]]],[11,R[24],E,E,23,[[["self"]],[R[26]]]],[11,"size",E,E,24,[[["self"]],[R[4]]]],[11,"is_cool",E,E,24,[[[R[4]]],["bool"]]],[11,R[1272],E,E,24,[[[R[4]]],[T]]],[11,R[1273],E,E,24,[[[R[4]]],[T]]],[11,"from",E,E,24,[[[T]],[T]]],[11,R[20],E,E,24,[[[U]],[R[23]]]],[11,"into",E,E,24,[[],[U]]],[11,R[21],E,E,24,[[],[R[23]]]],[11,R[25],E,E,24,[[["self"]],[T]]],[11,R[22],E,E,24,[[["self"]],[T]]],[11,R[24],E,E,24,[[["self"]],[R[26]]]],[11,"size",E,E,25,[[["self"]],[R[4]]]],[11,"is_cool",E,E,25,[[[R[4]]],["bool"]]],[11,R[1272],E,E,25,[[[R[4]]],[T]]],[11,R[1273],E,E,25,[[[R[4]]],[T]]],[11,"from",E,E,25,[[[T]],[T]]],[11,R[20],E,E,25,[[[U]],[R[23]]]],[11,"into",E,E,25,[[],[U]]],[11,R[21],E,E,25,[[],[R[23]]]],[11,R[25],E,E,25,[[["self"]],[T]]],[11,R[22],E,E,25,[[["self"]],[T]]],[11,R[24],E,E,25,[[["self"]],[R[26]]]],[11,"size",E,E,26,[[["self"]],[R[4]]]],[11,"is_cool",E,E,26,[[[R[4]]],["bool"]]],[11,R[1272],E,E,26,[[[R[4]]],[T]]],[11,R[1273],E,E,26,[[[R[4]]],[T]]],[11,"from",E,E,26,[[[T]],[T]]],[11,R[20],E,E,26,[[[U]],[R[23]]]],[11,"into",E,E,26,[[],[U]]],[11,R[21],E,E,26,[[],[R[23]]]],[11,R[25],E,E,26,[[["self"]],[T]]],[11,R[22],E,E,26,[[["self"]],[T]]],[11,R[24],E,E,26,[[["self"]],[R[26]]]],[11,"size",E,E,27,[[["self"]],[R[4]]]],[11,"is_cool",E,E,27,[[[R[4]]],["bool"]]],[11,R[1272],E,E,27,[[[R[4]]],[T]]],[11,R[1273],E,E,27,[[[R[4]]],[T]]],[11,"from",E,E,27,[[[T]],[T]]],[11,R[20],E,E,27,[[[U]],[R[23]]]],[11,"into",E,E,27,[[],[U]]],[11,R[21],E,E,27,[[],[R[23]]]],[11,R[25],E,E,27,[[["self"]],[T]]],[11,R[22],E,E,27,[[["self"]],[T]]],[11,R[24],E,E,27,[[["self"]],[R[26]]]],[11,"size",E,E,28,[[["self"]],[R[4]]]],[11,"is_cool",E,E,28,[[[R[4]]],["bool"]]],[11,R[1272],E,E,28,[[[R[4]]],[T]]],[11,R[1273],E,E,28,[[[R[4]]],[T]]],[11,"from",E,E,28,[[[T]],[T]]],[11,R[20],E,E,28,[[[U]],[R[23]]]],[11,"into",E,E,28,[[],[U]]],[11,R[21],E,E,28,[[],[R[23]]]],[11,R[25],E,E,28,[[["self"]],[T]]],[11,R[22],E,E,28,[[["self"]],[T]]],[11,R[24],E,E,28,[[["self"]],[R[26]]]],[11,"size",E,E,29,[[["self"]],[R[4]]]],[11,"is_cool",E,E,29,[[[R[4]]],["bool"]]],[11,R[1272],E,E,29,[[[R[4]]],[T]]],[11,R[1273],E,E,29,[[[R[4]]],[T]]],[11,"from",E,E,29,[[[T]],[T]]],[11,R[20],E,E,29,[[[U]],[R[23]]]],[11,"into",E,E,29,[[],[U]]],[11,R[21],E,E,29,[[],[R[23]]]],[11,R[25],E,E,29,[[["self"]],[T]]],[11,R[22],E,E,29,[[["self"]],[T]]],[11,R[24],E,E,29,[[["self"]],[R[26]]]],[11,"size",E,E,30,[[["self"]],[R[4]]]],[11,"is_cool",E,E,30,[[[R[4]]],["bool"]]],[11,R[1272],E,E,30,[[[R[4]]],[T]]],[11,R[1273],E,E,30,[[[R[4]]],[T]]],[11,"from",E,E,30,[[[T]],[T]]],[11,R[20],E,E,30,[[[U]],[R[23]]]],[11,"into",E,E,30,[[],[U]]],[11,R[21],E,E,30,[[],[R[23]]]],[11,R[25],E,E,30,[[["self"]],[T]]],[11,R[22],E,E,30,[[["self"]],[T]]],[11,R[24],E,E,30,[[["self"]],[R[26]]]],[11,"size",E,E,31,[[["self"]],[R[4]]]],[11,"is_cool",E,E,31,[[[R[4]]],["bool"]]],[11,R[1272],E,E,31,[[[R[4]]],[T]]],[11,R[1273],E,E,31,[[[R[4]]],[T]]],[11,"from",E,E,31,[[[T]],[T]]],[11,R[20],E,E,31,[[[U]],[R[23]]]],[11,"into",E,E,31,[[],[U]]],[11,R[21],E,E,31,[[],[R[23]]]],[11,R[25],E,E,31,[[["self"]],[T]]],[11,R[22],E,E,31,[[["self"]],[T]]],[11,R[24],E,E,31,[[["self"]],[R[26]]]],[11,"size",E,E,32,[[["self"]],[R[4]]]],[11,"is_cool",E,E,32,[[[R[4]]],["bool"]]],[11,R[1272],E,E,32,[[[R[4]]],[T]]],[11,R[1273],E,E,32,[[[R[4]]],[T]]],[11,"from",E,E,32,[[[T]],[T]]],[11,R[20],E,E,32,[[[U]],[R[23]]]],[11,"into",E,E,32,[[],[U]]],[11,R[21],E,E,32,[[],[R[23]]]],[11,R[25],E,E,32,[[["self"]],[T]]],[11,R[22],E,E,32,[[["self"]],[T]]],[11,R[24],E,E,32,[[["self"]],[R[26]]]],[11,R[189],E,E,32,[[["self"]],[T]]],[11,R[187],E,E,32,[[["self"],[T]]]],[11,"size",R[1269],E,33,[[["self"]],[R[4]]]],[11,"is_cool",E,E,33,[[[R[4]]],["bool"]]],[11,R[1272],E,E,33,[[[R[4]]],[T]]],[11,R[1273],E,E,33,[[[R[4]]],[T]]],[11,"from",E,E,33,[[[T]],[T]]],[11,R[20],E,E,33,[[[U]],[R[23]]]],[11,"into",E,E,33,[[],[U]]],[11,R[21],E,E,33,[[],[R[23]]]],[11,R[25],E,E,33,[[["self"]],[T]]],[11,R[22],E,E,33,[[["self"]],[T]]],[11,R[24],E,E,33,[[["self"]],[R[26]]]],[11,"bit",E,E,33,[[["self"],[R[4]]],["bool"]]],[11,R[752],E,E,33,[[["self"],[R[4]],["bool"]]]],[11,"size",E,E,34,[[["self"]],[R[4]]]],[11,"is_cool",E,E,34,[[[R[4]]],["bool"]]],[11,R[1272],E,E,34,[[[R[4]]],[T]]],[11,R[1273],E,E,34,[[[R[4]]],[T]]],[11,"from",E,E,34,[[[T]],[T]]],[11,R[20],E,E,34,[[[U]],[R[23]]]],[11,"into",E,E,34,[[],[U]]],[11,R[21],E,E,34,[[],[R[23]]]],[11,R[25],E,E,34,[[["self"]],[T]]],[11,R[22],E,E,34,[[["self"]],[T]]],[11,R[24],E,E,34,[[["self"]],[R[26]]]],[11,"bit",E,E,34,[[["self"],[R[4]]],["bool"]]],[11,R[752],E,E,34,[[["self"],[R[4]],["bool"]]]],[11,"size",E,E,35,[[["self"]],[R[4]]]],[11,"is_cool",E,E,35,[[[R[4]]],["bool"]]],[11,R[1272],E,E,35,[[[R[4]]],[T]]],[11,R[1273],E,E,35,[[[R[4]]],[T]]],[11,"from",E,E,35,[[[T]],[T]]],[11,R[20],E,E,35,[[[U]],[R[23]]]],[11,"into",E,E,35,[[],[U]]],[11,R[21],E,E,35,[[],[R[23]]]],[11,R[25],E,E,35,[[["self"]],[T]]],[11,R[22],E,E,35,[[["self"]],[T]]],[11,R[24],E,E,35,[[["self"]],[R[26]]]],[11,R[189],E,E,35,[[["self"]],[T]]],[11,R[187],E,E,35,[[["self"],[T]]]],[11,"size",E,E,36,[[["self"]],[R[4]]]],[11,"is_cool",E,E,36,[[[R[4]]],["bool"]]],[11,R[1272],E,E,36,[[[R[4]]],[T]]],[11,R[1273],E,E,36,[[[R[4]]],[T]]],[11,"from",E,E,36,[[[T]],[T]]],[11,R[20],E,E,36,[[[U]],[R[23]]]],[11,"into",E,E,36,[[],[U]]],[11,R[21],E,E,36,[[],[R[23]]]],[11,R[25],E,E,36,[[["self"]],[T]]],[11,R[22],E,E,36,[[["self"]],[T]]],[11,R[24],E,E,36,[[["self"]],[R[26]]]],[11,"size",E,E,37,[[["self"]],[R[4]]]],[11,"is_cool",E,E,37,[[[R[4]]],["bool"]]],[11,R[1272],E,E,37,[[[R[4]]],[T]]],[11,R[1273],E,E,37,[[[R[4]]],[T]]],[11,"from",E,E,37,[[[T]],[T]]],[11,R[20],E,E,37,[[[U]],[R[23]]]],[11,"into",E,E,37,[[],[U]]],[11,R[21],E,E,37,[[],[R[23]]]],[11,R[25],E,E,37,[[["self"]],[T]]],[11,R[22],E,E,37,[[["self"]],[T]]],[11,R[24],E,E,37,[[["self"]],[R[26]]]],[11,R[189],E,E,37,[[["self"]],[T]]],[11,R[187],E,E,37,[[["self"],[T]]]],[11,"size",E,E,38,[[["self"]],[R[4]]]],[11,"is_cool",E,E,38,[[[R[4]]],["bool"]]],[11,R[1272],E,E,38,[[[R[4]]],[T]]],[11,R[1273],E,E,38,[[[R[4]]],[T]]],[11,"from",E,E,38,[[[T]],[T]]],[11,R[20],E,E,38,[[[U]],[R[23]]]],[11,"into",E,E,38,[[],[U]]],[11,R[21],E,E,38,[[],[R[23]]]],[11,R[25],E,E,38,[[["self"]],[T]]],[11,R[22],E,E,38,[[["self"]],[T]]],[11,R[24],E,E,38,[[["self"]],[R[26]]]],[11,"size",R[1489],E,39,[[["self"]],[R[4]]]],[11,"is_cool",E,E,39,[[[R[4]]],["bool"]]],[11,R[1272],E,E,39,[[[R[4]]],[T]]],[11,R[1273],E,E,39,[[[R[4]]],[T]]],[11,"from",E,E,39,[[[T]],[T]]],[11,R[20],E,E,39,[[[U]],[R[23]]]],[11,"into",E,E,39,[[],[U]]],[11,R[21],E,E,39,[[],[R[23]]]],[11,R[25],E,E,39,[[["self"]],[T]]],[11,R[22],E,E,39,[[["self"]],[T]]],[11,R[24],E,E,39,[[["self"]],[R[26]]]],[11,"size",R[1490],E,42,[[["self"]],[R[4]]]],[11,"is_cool",E,E,42,[[[R[4]]],["bool"]]],[11,R[1272],E,E,42,[[[R[4]]],[T]]],[11,R[1273],E,E,42,[[[R[4]]],[T]]],[11,"from",E,E,42,[[[T]],[T]]],[11,R[20],E,E,42,[[[U]],[R[23]]]],[11,"into",E,E,42,[[],[U]]],[11,R[21],E,E,42,[[],[R[23]]]],[11,R[25],E,E,42,[[["self"]],[T]]],[11,R[22],E,E,42,[[["self"]],[T]]],[11,R[24],E,E,42,[[["self"]],[R[26]]]],[11,"size",E,E,43,[[["self"]],[R[4]]]],[11,"is_cool",E,E,43,[[[R[4]]],["bool"]]],[11,R[1272],E,E,43,[[[R[4]]],[T]]],[11,R[1273],E,E,43,[[[R[4]]],[T]]],[11,"from",E,E,43,[[[T]],[T]]],[11,R[20],E,E,43,[[[U]],[R[23]]]],[11,"into",E,E,43,[[],[U]]],[11,R[21],E,E,43,[[],[R[23]]]],[11,R[25],E,E,43,[[["self"]],[T]]],[11,R[22],E,E,43,[[["self"]],[T]]],[11,R[24],E,E,43,[[["self"]],[R[26]]]],[11,"size",E,E,44,[[["self"]],[R[4]]]],[11,"is_cool",E,E,44,[[[R[4]]],["bool"]]],[11,R[1272],E,E,44,[[[R[4]]],[T]]],[11,R[1273],E,E,44,[[[R[4]]],[T]]],[11,"from",E,E,44,[[[T]],[T]]],[11,R[20],E,E,44,[[[U]],[R[23]]]],[11,"into",E,E,44,[[],[U]]],[11,R[21],E,E,44,[[],[R[23]]]],[11,R[25],E,E,44,[[["self"]],[T]]],[11,R[22],E,E,44,[[["self"]],[T]]],[11,R[24],E,E,44,[[["self"]],[R[26]]]],[11,"size",R[1491],E,45,[[["self"]],[R[4]]]],[11,"is_cool",E,E,45,[[[R[4]]],["bool"]]],[11,R[1272],E,E,45,[[[R[4]]],[T]]],[11,R[1273],E,E,45,[[[R[4]]],[T]]],[11,"from",E,E,45,[[[T]],[T]]],[11,R[20],E,E,45,[[[U]],[R[23]]]],[11,"into",E,E,45,[[],[U]]],[11,R[21],E,E,45,[[],[R[23]]]],[11,R[25],E,E,45,[[["self"]],[T]]],[11,R[22],E,E,45,[[["self"]],[T]]],[11,R[24],E,E,45,[[["self"]],[R[26]]]],[11,"size",E,E,46,[[["self"]],[R[4]]]],[11,"is_cool",E,E,46,[[[R[4]]],["bool"]]],[11,R[1272],E,E,46,[[[R[4]]],[T]]],[11,R[1273],E,E,46,[[[R[4]]],[T]]],[11,"from",E,E,46,[[[T]],[T]]],[11,R[20],E,E,46,[[[U]],[R[23]]]],[11,"into",E,E,46,[[],[U]]],[11,R[21],E,E,46,[[],[R[23]]]],[11,R[25],E,E,46,[[["self"]],[T]]],[11,R[22],E,E,46,[[["self"]],[T]]],[11,R[24],E,E,46,[[["self"]],[R[26]]]],[11,"size",E,E,47,[[["self"]],[R[4]]]],[11,"is_cool",E,E,47,[[[R[4]]],["bool"]]],[11,R[1272],E,E,47,[[[R[4]]],[T]]],[11,R[1273],E,E,47,[[[R[4]]],[T]]],[11,"from",E,E,47,[[[T]],[T]]],[11,R[20],E,E,47,[[[U]],[R[23]]]],[11,"into",E,E,47,[[],[U]]],[11,R[21],E,E,47,[[],[R[23]]]],[11,R[25],E,E,47,[[["self"]],[T]]],[11,R[22],E,E,47,[[["self"]],[T]]],[11,R[24],E,E,47,[[["self"]],[R[26]]]],[11,"size",R[1492],E,48,[[["self"]],[R[4]]]],[11,"is_cool",E,E,48,[[[R[4]]],["bool"]]],[11,R[1272],E,E,48,[[[R[4]]],[T]]],[11,R[1273],E,E,48,[[[R[4]]],[T]]],[11,"from",E,E,48,[[[T]],[T]]],[11,R[20],E,E,48,[[[U]],[R[23]]]],[11,"into",E,E,48,[[],[U]]],[11,R[21],E,E,48,[[],[R[23]]]],[11,R[25],E,E,48,[[["self"]],[T]]],[11,R[22],E,E,48,[[["self"]],[T]]],[11,R[24],E,E,48,[[["self"]],[R[26]]]],[11,"size",E,E,49,[[["self"]],[R[4]]]],[11,"is_cool",E,E,49,[[[R[4]]],["bool"]]],[11,R[1272],E,E,49,[[[R[4]]],[T]]],[11,R[1273],E,E,49,[[[R[4]]],[T]]],[11,"from",E,E,49,[[[T]],[T]]],[11,R[20],E,E,49,[[[U]],[R[23]]]],[11,"into",E,E,49,[[],[U]]],[11,R[21],E,E,49,[[],[R[23]]]],[11,R[25],E,E,49,[[["self"]],[T]]],[11,R[22],E,E,49,[[["self"]],[T]]],[11,R[24],E,E,49,[[["self"]],[R[26]]]],[11,R[189],E,E,49,[[["self"]],[T]]],[11,R[187],E,E,49,[[["self"],[T]]]],[11,"size",E,E,50,[[["self"]],[R[4]]]],[11,"is_cool",E,E,50,[[[R[4]]],["bool"]]],[11,R[1272],E,E,50,[[[R[4]]],[T]]],[11,R[1273],E,E,50,[[[R[4]]],[T]]],[11,"from",E,E,50,[[[T]],[T]]],[11,R[20],E,E,50,[[[U]],[R[23]]]],[11,"into",E,E,50,[[],[U]]],[11,R[21],E,E,50,[[],[R[23]]]],[11,R[25],E,E,50,[[["self"]],[T]]],[11,R[22],E,E,50,[[["self"]],[T]]],[11,R[24],E,E,50,[[["self"]],[R[26]]]],[11,R[189],E,E,50,[[["self"]],[T]]],[11,R[187],E,E,50,[[["self"],[T]]]],[11,"size",E,E,51,[[["self"]],[R[4]]]],[11,"is_cool",E,E,51,[[[R[4]]],["bool"]]],[11,R[1272],E,E,51,[[[R[4]]],[T]]],[11,R[1273],E,E,51,[[[R[4]]],[T]]],[11,"from",E,E,51,[[[T]],[T]]],[11,R[20],E,E,51,[[[U]],[R[23]]]],[11,"into",E,E,51,[[],[U]]],[11,R[21],E,E,51,[[],[R[23]]]],[11,R[25],E,E,51,[[["self"]],[T]]],[11,R[22],E,E,51,[[["self"]],[T]]],[11,R[24],E,E,51,[[["self"]],[R[26]]]],[11,R[189],E,E,51,[[["self"]],[T]]],[11,R[187],E,E,51,[[["self"],[T]]]],[11,"size",E,E,52,[[["self"]],[R[4]]]],[11,"is_cool",E,E,52,[[[R[4]]],["bool"]]],[11,R[1272],E,E,52,[[[R[4]]],[T]]],[11,R[1273],E,E,52,[[[R[4]]],[T]]],[11,"from",E,E,52,[[[T]],[T]]],[11,R[20],E,E,52,[[[U]],[R[23]]]],[11,"into",E,E,52,[[],[U]]],[11,R[21],E,E,52,[[],[R[23]]]],[11,R[25],E,E,52,[[["self"]],[T]]],[11,R[22],E,E,52,[[["self"]],[T]]],[11,R[24],E,E,52,[[["self"]],[R[26]]]],[11,"size",E,E,53,[[["self"]],[R[4]]]],[11,"is_cool",E,E,53,[[[R[4]]],["bool"]]],[11,R[1272],E,E,53,[[[R[4]]],[T]]],[11,R[1273],E,E,53,[[[R[4]]],[T]]],[11,"from",E,E,53,[[[T]],[T]]],[11,R[20],E,E,53,[[[U]],[R[23]]]],[11,"into",E,E,53,[[],[U]]],[11,R[21],E,E,53,[[],[R[23]]]],[11,R[25],E,E,53,[[["self"]],[T]]],[11,R[22],E,E,53,[[["self"]],[T]]],[11,R[24],E,E,53,[[["self"]],[R[26]]]],[11,"size",R[1493],E,54,[[["self"]],[R[4]]]],[11,"is_cool",E,E,54,[[[R[4]]],["bool"]]],[11,R[1272],E,E,54,[[[R[4]]],[T]]],[11,R[1273],E,E,54,[[[R[4]]],[T]]],[11,"from",E,E,54,[[[T]],[T]]],[11,R[20],E,E,54,[[[U]],[R[23]]]],[11,"into",E,E,54,[[],[U]]],[11,R[21],E,E,54,[[],[R[23]]]],[11,R[25],E,E,54,[[["self"]],[T]]],[11,R[22],E,E,54,[[["self"]],[T]]],[11,R[24],E,E,54,[[["self"]],[R[26]]]],[11,"size",R[1494],E,57,[[["self"]],[R[4]]]],[11,"is_cool",E,E,57,[[[R[4]]],["bool"]]],[11,R[1272],E,E,57,[[[R[4]]],[T]]],[11,R[1273],E,E,57,[[[R[4]]],[T]]],[11,"from",E,E,57,[[[T]],[T]]],[11,R[20],E,E,57,[[[U]],[R[23]]]],[11,"into",E,E,57,[[],[U]]],[11,R[21],E,E,57,[[],[R[23]]]],[11,R[25],E,E,57,[[["self"]],[T]]],[11,R[22],E,E,57,[[["self"]],[T]]],[11,R[24],E,E,57,[[["self"]],[R[26]]]],[11,"size",E,E,58,[[["self"]],[R[4]]]],[11,"is_cool",E,E,58,[[[R[4]]],["bool"]]],[11,R[1272],E,E,58,[[[R[4]]],[T]]],[11,R[1273],E,E,58,[[[R[4]]],[T]]],[11,"from",E,E,58,[[[T]],[T]]],[11,R[20],E,E,58,[[[U]],[R[23]]]],[11,"into",E,E,58,[[],[U]]],[11,R[21],E,E,58,[[],[R[23]]]],[11,R[25],E,E,58,[[["self"]],[T]]],[11,R[22],E,E,58,[[["self"]],[T]]],[11,R[24],E,E,58,[[["self"]],[R[26]]]],[11,"size",R[1495],E,63,[[["self"]],[R[4]]]],[11,"is_cool",E,E,63,[[[R[4]]],["bool"]]],[11,R[1272],E,E,63,[[[R[4]]],[T]]],[11,R[1273],E,E,63,[[[R[4]]],[T]]],[11,"from",E,E,63,[[[T]],[T]]],[11,R[20],E,E,63,[[[U]],[R[23]]]],[11,"into",E,E,63,[[],[U]]],[11,R[21],E,E,63,[[],[R[23]]]],[11,R[25],E,E,63,[[["self"]],[T]]],[11,R[22],E,E,63,[[["self"]],[T]]],[11,R[24],E,E,63,[[["self"]],[R[26]]]],[11,"size",E,E,64,[[["self"]],[R[4]]]],[11,"is_cool",E,E,64,[[[R[4]]],["bool"]]],[11,R[1272],E,E,64,[[[R[4]]],[T]]],[11,R[1273],E,E,64,[[[R[4]]],[T]]],[11,"from",E,E,64,[[[T]],[T]]],[11,R[20],E,E,64,[[[U]],[R[23]]]],[11,"into",E,E,64,[[],[U]]],[11,R[21],E,E,64,[[],[R[23]]]],[11,R[25],E,E,64,[[["self"]],[T]]],[11,R[22],E,E,64,[[["self"]],[T]]],[11,R[24],E,E,64,[[["self"]],[R[26]]]],[11,"size",R[1496],E,69,[[["self"]],[R[4]]]],[11,"is_cool",E,E,69,[[[R[4]]],["bool"]]],[11,R[1272],E,E,69,[[[R[4]]],[T]]],[11,R[1273],E,E,69,[[[R[4]]],[T]]],[11,"from",E,E,69,[[[T]],[T]]],[11,R[20],E,E,69,[[[U]],[R[23]]]],[11,"into",E,E,69,[[],[U]]],[11,R[21],E,E,69,[[],[R[23]]]],[11,R[25],E,E,69,[[["self"]],[T]]],[11,R[22],E,E,69,[[["self"]],[T]]],[11,R[24],E,E,69,[[["self"]],[R[26]]]],[11,R[189],E,E,69,[[["self"]],[T]]],[11,R[187],E,E,69,[[["self"],[T]]]],[11,"size",E,E,70,[[["self"]],[R[4]]]],[11,"is_cool",E,E,70,[[[R[4]]],["bool"]]],[11,R[1272],E,E,70,[[[R[4]]],[T]]],[11,R[1273],E,E,70,[[[R[4]]],[T]]],[11,"from",E,E,70,[[[T]],[T]]],[11,R[20],E,E,70,[[[U]],[R[23]]]],[11,"into",E,E,70,[[],[U]]],[11,R[21],E,E,70,[[],[R[23]]]],[11,R[25],E,E,70,[[["self"]],[T]]],[11,R[22],E,E,70,[[["self"]],[T]]],[11,R[24],E,E,70,[[["self"]],[R[26]]]],[11,R[189],E,E,70,[[["self"]],[T]]],[11,R[187],E,E,70,[[["self"],[T]]]],[11,"size",E,E,71,[[["self"]],[R[4]]]],[11,"is_cool",E,E,71,[[[R[4]]],["bool"]]],[11,R[1272],E,E,71,[[[R[4]]],[T]]],[11,R[1273],E,E,71,[[[R[4]]],[T]]],[11,"from",E,E,71,[[[T]],[T]]],[11,R[20],E,E,71,[[[U]],[R[23]]]],[11,"into",E,E,71,[[],[U]]],[11,R[21],E,E,71,[[],[R[23]]]],[11,R[25],E,E,71,[[["self"]],[T]]],[11,R[22],E,E,71,[[["self"]],[T]]],[11,R[24],E,E,71,[[["self"]],[R[26]]]],[11,"size",E,E,72,[[["self"]],[R[4]]]],[11,"is_cool",E,E,72,[[[R[4]]],["bool"]]],[11,R[1272],E,E,72,[[[R[4]]],[T]]],[11,R[1273],E,E,72,[[[R[4]]],[T]]],[11,"from",E,E,72,[[[T]],[T]]],[11,R[20],E,E,72,[[[U]],[R[23]]]],[11,"into",E,E,72,[[],[U]]],[11,R[21],E,E,72,[[],[R[23]]]],[11,R[25],E,E,72,[[["self"]],[T]]],[11,R[22],E,E,72,[[["self"]],[T]]],[11,R[24],E,E,72,[[["self"]],[R[26]]]],[11,"size",E,E,73,[[["self"]],[R[4]]]],[11,"is_cool",E,E,73,[[[R[4]]],["bool"]]],[11,R[1272],E,E,73,[[[R[4]]],[T]]],[11,R[1273],E,E,73,[[[R[4]]],[T]]],[11,"from",E,E,73,[[[T]],[T]]],[11,R[20],E,E,73,[[[U]],[R[23]]]],[11,"into",E,E,73,[[],[U]]],[11,R[21],E,E,73,[[],[R[23]]]],[11,R[25],E,E,73,[[["self"]],[T]]],[11,R[22],E,E,73,[[["self"]],[T]]],[11,R[24],E,E,73,[[["self"]],[R[26]]]],[11,"size",R[1497],E,80,[[["self"]],[R[4]]]],[11,"is_cool",E,E,80,[[[R[4]]],["bool"]]],[11,R[1272],E,E,80,[[[R[4]]],[T]]],[11,R[1273],E,E,80,[[[R[4]]],[T]]],[11,"from",E,E,80,[[[T]],[T]]],[11,R[20],E,E,80,[[[U]],[R[23]]]],[11,"into",E,E,80,[[],[U]]],[11,R[21],E,E,80,[[],[R[23]]]],[11,R[25],E,E,80,[[["self"]],[T]]],[11,R[22],E,E,80,[[["self"]],[T]]],[11,R[24],E,E,80,[[["self"]],[R[26]]]],[11,R[189],E,E,80,[[["self"]],[T]]],[11,R[187],E,E,80,[[["self"],[T]]]],[11,"size",E,E,81,[[["self"]],[R[4]]]],[11,"is_cool",E,E,81,[[[R[4]]],["bool"]]],[11,R[1272],E,E,81,[[[R[4]]],[T]]],[11,R[1273],E,E,81,[[[R[4]]],[T]]],[11,"from",E,E,81,[[[T]],[T]]],[11,R[20],E,E,81,[[[U]],[R[23]]]],[11,"into",E,E,81,[[],[U]]],[11,R[21],E,E,81,[[],[R[23]]]],[11,R[25],E,E,81,[[["self"]],[T]]],[11,R[22],E,E,81,[[["self"]],[T]]],[11,R[24],E,E,81,[[["self"]],[R[26]]]],[11,R[189],E,E,81,[[["self"]],[T]]],[11,R[187],E,E,81,[[["self"],[T]]]],[11,"size",E,E,82,[[["self"]],[R[4]]]],[11,"is_cool",E,E,82,[[[R[4]]],["bool"]]],[11,R[1272],E,E,82,[[[R[4]]],[T]]],[11,R[1273],E,E,82,[[[R[4]]],[T]]],[11,"from",E,E,82,[[[T]],[T]]],[11,R[20],E,E,82,[[[U]],[R[23]]]],[11,"into",E,E,82,[[],[U]]],[11,R[21],E,E,82,[[],[R[23]]]],[11,R[25],E,E,82,[[["self"]],[T]]],[11,R[22],E,E,82,[[["self"]],[T]]],[11,R[24],E,E,82,[[["self"]],[R[26]]]],[11,R[189],E,E,82,[[["self"]],[T]]],[11,R[187],E,E,82,[[["self"],[T]]]],[11,"size",E,E,83,[[["self"]],[R[4]]]],[11,"is_cool",E,E,83,[[[R[4]]],["bool"]]],[11,R[1272],E,E,83,[[[R[4]]],[T]]],[11,R[1273],E,E,83,[[[R[4]]],[T]]],[11,"from",E,E,83,[[[T]],[T]]],[11,R[20],E,E,83,[[[U]],[R[23]]]],[11,"into",E,E,83,[[],[U]]],[11,R[21],E,E,83,[[],[R[23]]]],[11,R[25],E,E,83,[[["self"]],[T]]],[11,R[22],E,E,83,[[["self"]],[T]]],[11,R[24],E,E,83,[[["self"]],[R[26]]]],[11,R[189],E,E,83,[[["self"]],[T]]],[11,R[187],E,E,83,[[["self"],[T]]]],[11,"size",E,E,84,[[["self"]],[R[4]]]],[11,"is_cool",E,E,84,[[[R[4]]],["bool"]]],[11,R[1272],E,E,84,[[[R[4]]],[T]]],[11,R[1273],E,E,84,[[[R[4]]],[T]]],[11,"from",E,E,84,[[[T]],[T]]],[11,R[20],E,E,84,[[[U]],[R[23]]]],[11,"into",E,E,84,[[],[U]]],[11,R[21],E,E,84,[[],[R[23]]]],[11,R[25],E,E,84,[[["self"]],[T]]],[11,R[22],E,E,84,[[["self"]],[T]]],[11,R[24],E,E,84,[[["self"]],[R[26]]]],[11,"size",E,E,85,[[["self"]],[R[4]]]],[11,"is_cool",E,E,85,[[[R[4]]],["bool"]]],[11,R[1272],E,E,85,[[[R[4]]],[T]]],[11,R[1273],E,E,85,[[[R[4]]],[T]]],[11,"from",E,E,85,[[[T]],[T]]],[11,R[20],E,E,85,[[[U]],[R[23]]]],[11,"into",E,E,85,[[],[U]]],[11,R[21],E,E,85,[[],[R[23]]]],[11,R[25],E,E,85,[[["self"]],[T]]],[11,R[22],E,E,85,[[["self"]],[T]]],[11,R[24],E,E,85,[[["self"]],[R[26]]]],[11,"size",E,E,86,[[["self"]],[R[4]]]],[11,"is_cool",E,E,86,[[[R[4]]],["bool"]]],[11,R[1272],E,E,86,[[[R[4]]],[T]]],[11,R[1273],E,E,86,[[[R[4]]],[T]]],[11,"from",E,E,86,[[[T]],[T]]],[11,R[20],E,E,86,[[[U]],[R[23]]]],[11,"into",E,E,86,[[],[U]]],[11,R[21],E,E,86,[[],[R[23]]]],[11,R[25],E,E,86,[[["self"]],[T]]],[11,R[22],E,E,86,[[["self"]],[T]]],[11,R[24],E,E,86,[[["self"]],[R[26]]]],[11,"size",E,E,87,[[["self"]],[R[4]]]],[11,"is_cool",E,E,87,[[[R[4]]],["bool"]]],[11,R[1272],E,E,87,[[[R[4]]],[T]]],[11,R[1273],E,E,87,[[[R[4]]],[T]]],[11,"from",E,E,87,[[[T]],[T]]],[11,R[20],E,E,87,[[[U]],[R[23]]]],[11,"into",E,E,87,[[],[U]]],[11,R[21],E,E,87,[[],[R[23]]]],[11,R[25],E,E,87,[[["self"]],[T]]],[11,R[22],E,E,87,[[["self"]],[T]]],[11,R[24],E,E,87,[[["self"]],[R[26]]]],[11,"size",E,E,88,[[["self"]],[R[4]]]],[11,"is_cool",E,E,88,[[[R[4]]],["bool"]]],[11,R[1272],E,E,88,[[[R[4]]],[T]]],[11,R[1273],E,E,88,[[[R[4]]],[T]]],[11,"from",E,E,88,[[[T]],[T]]],[11,R[20],E,E,88,[[[U]],[R[23]]]],[11,"into",E,E,88,[[],[U]]],[11,R[21],E,E,88,[[],[R[23]]]],[11,R[25],E,E,88,[[["self"]],[T]]],[11,R[22],E,E,88,[[["self"]],[T]]],[11,R[24],E,E,88,[[["self"]],[R[26]]]],[11,"size",R[1498],E,99,[[["self"]],[R[4]]]],[11,"is_cool",E,E,99,[[[R[4]]],["bool"]]],[11,R[1272],E,E,99,[[[R[4]]],[T]]],[11,R[1273],E,E,99,[[[R[4]]],[T]]],[11,"from",E,E,99,[[[T]],[T]]],[11,R[20],E,E,99,[[[U]],[R[23]]]],[11,"into",E,E,99,[[],[U]]],[11,R[21],E,E,99,[[],[R[23]]]],[11,R[25],E,E,99,[[["self"]],[T]]],[11,R[22],E,E,99,[[["self"]],[T]]],[11,R[24],E,E,99,[[["self"]],[R[26]]]],[11,R[189],E,E,99,[[["self"]],[T]]],[11,R[187],E,E,99,[[["self"],[T]]]],[11,"size",E,E,100,[[["self"]],[R[4]]]],[11,"is_cool",E,E,100,[[[R[4]]],["bool"]]],[11,R[1272],E,E,100,[[[R[4]]],[T]]],[11,R[1273],E,E,100,[[[R[4]]],[T]]],[11,"from",E,E,100,[[[T]],[T]]],[11,R[20],E,E,100,[[[U]],[R[23]]]],[11,"into",E,E,100,[[],[U]]],[11,R[21],E,E,100,[[],[R[23]]]],[11,R[25],E,E,100,[[["self"]],[T]]],[11,R[22],E,E,100,[[["self"]],[T]]],[11,R[24],E,E,100,[[["self"]],[R[26]]]],[11,R[189],E,E,100,[[["self"]],[T]]],[11,R[187],E,E,100,[[["self"],[T]]]],[11,"size",E,E,101,[[["self"]],[R[4]]]],[11,"is_cool",E,E,101,[[[R[4]]],["bool"]]],[11,R[1272],E,E,101,[[[R[4]]],[T]]],[11,R[1273],E,E,101,[[[R[4]]],[T]]],[11,"from",E,E,101,[[[T]],[T]]],[11,R[20],E,E,101,[[[U]],[R[23]]]],[11,"into",E,E,101,[[],[U]]],[11,R[21],E,E,101,[[],[R[23]]]],[11,R[25],E,E,101,[[["self"]],[T]]],[11,R[22],E,E,101,[[["self"]],[T]]],[11,R[24],E,E,101,[[["self"]],[R[26]]]],[11,R[189],E,E,101,[[["self"]],[T]]],[11,R[187],E,E,101,[[["self"],[T]]]],[11,"size",E,E,102,[[["self"]],[R[4]]]],[11,"is_cool",E,E,102,[[[R[4]]],["bool"]]],[11,R[1272],E,E,102,[[[R[4]]],[T]]],[11,R[1273],E,E,102,[[[R[4]]],[T]]],[11,"from",E,E,102,[[[T]],[T]]],[11,R[20],E,E,102,[[[U]],[R[23]]]],[11,"into",E,E,102,[[],[U]]],[11,R[21],E,E,102,[[],[R[23]]]],[11,R[25],E,E,102,[[["self"]],[T]]],[11,R[22],E,E,102,[[["self"]],[T]]],[11,R[24],E,E,102,[[["self"]],[R[26]]]],[11,"size",R[1499],E,105,[[["self"]],[R[4]]]],[11,"is_cool",E,E,105,[[[R[4]]],["bool"]]],[11,R[1272],E,E,105,[[[R[4]]],[T]]],[11,R[1273],E,E,105,[[[R[4]]],[T]]],[11,"from",E,E,105,[[[T]],[T]]],[11,R[20],E,E,105,[[[U]],[R[23]]]],[11,"into",E,E,105,[[],[U]]],[11,R[21],E,E,105,[[],[R[23]]]],[11,R[25],E,E,105,[[["self"]],[T]]],[11,R[22],E,E,105,[[["self"]],[T]]],[11,R[24],E,E,105,[[["self"]],[R[26]]]],[11,"size",R[1500],E,108,[[["self"]],[R[4]]]],[11,"is_cool",E,E,108,[[[R[4]]],["bool"]]],[11,R[1272],E,E,108,[[[R[4]]],[T]]],[11,R[1273],E,E,108,[[[R[4]]],[T]]],[11,"from",E,E,108,[[[T]],[T]]],[11,R[20],E,E,108,[[[U]],[R[23]]]],[11,"into",E,E,108,[[],[U]]],[11,R[21],E,E,108,[[],[R[23]]]],[11,R[25],E,E,108,[[["self"]],[T]]],[11,R[22],E,E,108,[[["self"]],[T]]],[11,R[24],E,E,108,[[["self"]],[R[26]]]],[11,"size",E,E,109,[[["self"]],[R[4]]]],[11,"is_cool",E,E,109,[[[R[4]]],["bool"]]],[11,R[1272],E,E,109,[[[R[4]]],[T]]],[11,R[1273],E,E,109,[[[R[4]]],[T]]],[11,"from",E,E,109,[[[T]],[T]]],[11,R[20],E,E,109,[[[U]],[R[23]]]],[11,"into",E,E,109,[[],[U]]],[11,R[21],E,E,109,[[],[R[23]]]],[11,R[25],E,E,109,[[["self"]],[T]]],[11,R[22],E,E,109,[[["self"]],[T]]],[11,R[24],E,E,109,[[["self"]],[R[26]]]],[11,"size",E,E,110,[[["self"]],[R[4]]]],[11,"is_cool",E,E,110,[[[R[4]]],["bool"]]],[11,R[1272],E,E,110,[[[R[4]]],[T]]],[11,R[1273],E,E,110,[[[R[4]]],[T]]],[11,"from",E,E,110,[[[T]],[T]]],[11,R[20],E,E,110,[[[U]],[R[23]]]],[11,"into",E,E,110,[[],[U]]],[11,R[21],E,E,110,[[],[R[23]]]],[11,R[25],E,E,110,[[["self"]],[T]]],[11,R[22],E,E,110,[[["self"]],[T]]],[11,R[24],E,E,110,[[["self"]],[R[26]]]],[11,"size",R[1501],E,117,[[["self"]],[R[4]]]],[11,"is_cool",E,E,117,[[[R[4]]],["bool"]]],[11,R[1272],E,E,117,[[[R[4]]],[T]]],[11,R[1273],E,E,117,[[[R[4]]],[T]]],[11,"from",E,E,117,[[[T]],[T]]],[11,R[20],E,E,117,[[[U]],[R[23]]]],[11,"into",E,E,117,[[],[U]]],[11,R[21],E,E,117,[[],[R[23]]]],[11,R[25],E,E,117,[[["self"]],[T]]],[11,R[22],E,E,117,[[["self"]],[T]]],[11,R[24],E,E,117,[[["self"]],[R[26]]]],[11,"size",E,E,118,[[["self"]],[R[4]]]],[11,"is_cool",E,E,118,[[[R[4]]],["bool"]]],[11,R[1272],E,E,118,[[[R[4]]],[T]]],[11,R[1273],E,E,118,[[[R[4]]],[T]]],[11,"from",E,E,118,[[[T]],[T]]],[11,R[20],E,E,118,[[[U]],[R[23]]]],[11,"into",E,E,118,[[],[U]]],[11,R[21],E,E,118,[[],[R[23]]]],[11,R[25],E,E,118,[[["self"]],[T]]],[11,R[22],E,E,118,[[["self"]],[T]]],[11,R[24],E,E,118,[[["self"]],[R[26]]]],[11,"size",E,E,119,[[["self"]],[R[4]]]],[11,"is_cool",E,E,119,[[[R[4]]],["bool"]]],[11,R[1272],E,E,119,[[[R[4]]],[T]]],[11,R[1273],E,E,119,[[[R[4]]],[T]]],[11,"from",E,E,119,[[[T]],[T]]],[11,R[20],E,E,119,[[[U]],[R[23]]]],[11,"into",E,E,119,[[],[U]]],[11,R[21],E,E,119,[[],[R[23]]]],[11,R[25],E,E,119,[[["self"]],[T]]],[11,R[22],E,E,119,[[["self"]],[T]]],[11,R[24],E,E,119,[[["self"]],[R[26]]]],[11,"size",E,E,120,[[["self"]],[R[4]]]],[11,"is_cool",E,E,120,[[[R[4]]],["bool"]]],[11,R[1272],E,E,120,[[[R[4]]],[T]]],[11,R[1273],E,E,120,[[[R[4]]],[T]]],[11,"from",E,E,120,[[[T]],[T]]],[11,R[20],E,E,120,[[[U]],[R[23]]]],[11,"into",E,E,120,[[],[U]]],[11,R[21],E,E,120,[[],[R[23]]]],[11,R[25],E,E,120,[[["self"]],[T]]],[11,R[22],E,E,120,[[["self"]],[T]]],[11,R[24],E,E,120,[[["self"]],[R[26]]]],[11,"size",E,E,121,[[["self"]],[R[4]]]],[11,"is_cool",E,E,121,[[[R[4]]],["bool"]]],[11,R[1272],E,E,121,[[[R[4]]],[T]]],[11,R[1273],E,E,121,[[[R[4]]],[T]]],[11,"from",E,E,121,[[[T]],[T]]],[11,R[20],E,E,121,[[[U]],[R[23]]]],[11,"into",E,E,121,[[],[U]]],[11,R[21],E,E,121,[[],[R[23]]]],[11,R[25],E,E,121,[[["self"]],[T]]],[11,R[22],E,E,121,[[["self"]],[T]]],[11,R[24],E,E,121,[[["self"]],[R[26]]]],[11,"size",R[1502],E,132,[[["self"]],[R[4]]]],[11,"is_cool",E,E,132,[[[R[4]]],["bool"]]],[11,R[1272],E,E,132,[[[R[4]]],[T]]],[11,R[1273],E,E,132,[[[R[4]]],[T]]],[11,"from",E,E,132,[[[T]],[T]]],[11,R[20],E,E,132,[[[U]],[R[23]]]],[11,"into",E,E,132,[[],[U]]],[11,R[21],E,E,132,[[],[R[23]]]],[11,R[25],E,E,132,[[["self"]],[T]]],[11,R[22],E,E,132,[[["self"]],[T]]],[11,R[24],E,E,132,[[["self"]],[R[26]]]],[11,R[189],E,E,132,[[["self"]],[T]]],[11,R[187],E,E,132,[[["self"],[T]]]],[11,R[192],E,E,132,[[["self"]],["string"]]],[11,"size",E,E,133,[[["self"]],[R[4]]]],[11,"is_cool",E,E,133,[[[R[4]]],["bool"]]],[11,R[1272],E,E,133,[[[R[4]]],[T]]],[11,R[1273],E,E,133,[[[R[4]]],[T]]],[11,"from",E,E,133,[[[T]],[T]]],[11,R[20],E,E,133,[[[U]],[R[23]]]],[11,"into",E,E,133,[[],[U]]],[11,R[21],E,E,133,[[],[R[23]]]],[11,R[25],E,E,133,[[["self"]],[T]]],[11,R[22],E,E,133,[[["self"]],[T]]],[11,R[24],E,E,133,[[["self"]],[R[26]]]],[11,R[189],E,E,133,[[["self"]],[T]]],[11,R[187],E,E,133,[[["self"],[T]]]],[11,"size",E,E,134,[[["self"]],[R[4]]]],[11,"is_cool",E,E,134,[[[R[4]]],["bool"]]],[11,R[1272],E,E,134,[[[R[4]]],[T]]],[11,R[1273],E,E,134,[[[R[4]]],[T]]],[11,"from",E,E,134,[[[T]],[T]]],[11,R[20],E,E,134,[[[U]],[R[23]]]],[11,"into",E,E,134,[[],[U]]],[11,R[21],E,E,134,[[],[R[23]]]],[11,R[25],E,E,134,[[["self"]],[T]]],[11,R[22],E,E,134,[[["self"]],[T]]],[11,R[24],E,E,134,[[["self"]],[R[26]]]],[11,R[189],E,E,134,[[["self"]],[T]]],[11,R[187],E,E,134,[[["self"],[T]]]],[11,"size",E,E,135,[[["self"]],[R[4]]]],[11,"is_cool",E,E,135,[[[R[4]]],["bool"]]],[11,R[1272],E,E,135,[[[R[4]]],[T]]],[11,R[1273],E,E,135,[[[R[4]]],[T]]],[11,"from",E,E,135,[[[T]],[T]]],[11,R[20],E,E,135,[[[U]],[R[23]]]],[11,"into",E,E,135,[[],[U]]],[11,R[21],E,E,135,[[],[R[23]]]],[11,R[25],E,E,135,[[["self"]],[T]]],[11,R[22],E,E,135,[[["self"]],[T]]],[11,R[24],E,E,135,[[["self"]],[R[26]]]],[11,R[189],E,E,135,[[["self"]],[T]]],[11,R[187],E,E,135,[[["self"],[T]]]],[11,"size",E,E,136,[[["self"]],[R[4]]]],[11,"is_cool",E,E,136,[[[R[4]]],["bool"]]],[11,R[1272],E,E,136,[[[R[4]]],[T]]],[11,R[1273],E,E,136,[[[R[4]]],[T]]],[11,"from",E,E,136,[[[T]],[T]]],[11,R[20],E,E,136,[[[U]],[R[23]]]],[11,"into",E,E,136,[[],[U]]],[11,R[21],E,E,136,[[],[R[23]]]],[11,R[25],E,E,136,[[["self"]],[T]]],[11,R[22],E,E,136,[[["self"]],[T]]],[11,R[24],E,E,136,[[["self"]],[R[26]]]],[11,R[189],E,E,136,[[["self"]],[T]]],[11,R[187],E,E,136,[[["self"],[T]]]],[11,"size",E,E,137,[[["self"]],[R[4]]]],[11,"is_cool",E,E,137,[[[R[4]]],["bool"]]],[11,R[1272],E,E,137,[[[R[4]]],[T]]],[11,R[1273],E,E,137,[[[R[4]]],[T]]],[11,"from",E,E,137,[[[T]],[T]]],[11,R[20],E,E,137,[[[U]],[R[23]]]],[11,"into",E,E,137,[[],[U]]],[11,R[21],E,E,137,[[],[R[23]]]],[11,R[25],E,E,137,[[["self"]],[T]]],[11,R[22],E,E,137,[[["self"]],[T]]],[11,R[24],E,E,137,[[["self"]],[R[26]]]],[11,R[189],E,E,137,[[["self"]],[T]]],[11,R[187],E,E,137,[[["self"],[T]]]],[11,"size",E,E,138,[[["self"]],[R[4]]]],[11,"is_cool",E,E,138,[[[R[4]]],["bool"]]],[11,R[1272],E,E,138,[[[R[4]]],[T]]],[11,R[1273],E,E,138,[[[R[4]]],[T]]],[11,"from",E,E,138,[[[T]],[T]]],[11,R[20],E,E,138,[[[U]],[R[23]]]],[11,"into",E,E,138,[[],[U]]],[11,R[21],E,E,138,[[],[R[23]]]],[11,R[25],E,E,138,[[["self"]],[T]]],[11,R[22],E,E,138,[[["self"]],[T]]],[11,R[24],E,E,138,[[["self"]],[R[26]]]],[11,R[189],E,E,138,[[["self"]],[T]]],[11,R[187],E,E,138,[[["self"],[T]]]],[11,"size",E,E,139,[[["self"]],[R[4]]]],[11,"is_cool",E,E,139,[[[R[4]]],["bool"]]],[11,R[1272],E,E,139,[[[R[4]]],[T]]],[11,R[1273],E,E,139,[[[R[4]]],[T]]],[11,"from",E,E,139,[[[T]],[T]]],[11,R[20],E,E,139,[[[U]],[R[23]]]],[11,"into",E,E,139,[[],[U]]],[11,R[21],E,E,139,[[],[R[23]]]],[11,R[25],E,E,139,[[["self"]],[T]]],[11,R[22],E,E,139,[[["self"]],[T]]],[11,R[24],E,E,139,[[["self"]],[R[26]]]],[11,R[189],E,E,139,[[["self"]],[T]]],[11,R[187],E,E,139,[[["self"],[T]]]],[11,"size",E,E,140,[[["self"]],[R[4]]]],[11,"is_cool",E,E,140,[[[R[4]]],["bool"]]],[11,R[1272],E,E,140,[[[R[4]]],[T]]],[11,R[1273],E,E,140,[[[R[4]]],[T]]],[11,"from",E,E,140,[[[T]],[T]]],[11,R[20],E,E,140,[[[U]],[R[23]]]],[11,"into",E,E,140,[[],[U]]],[11,R[21],E,E,140,[[],[R[23]]]],[11,R[25],E,E,140,[[["self"]],[T]]],[11,R[22],E,E,140,[[["self"]],[T]]],[11,R[24],E,E,140,[[["self"]],[R[26]]]],[11,R[189],E,E,140,[[["self"]],[T]]],[11,R[187],E,E,140,[[["self"],[T]]]],[11,"size",E,E,141,[[["self"]],[R[4]]]],[11,"is_cool",E,E,141,[[[R[4]]],["bool"]]],[11,R[1272],E,E,141,[[[R[4]]],[T]]],[11,R[1273],E,E,141,[[[R[4]]],[T]]],[11,"from",E,E,141,[[[T]],[T]]],[11,R[20],E,E,141,[[[U]],[R[23]]]],[11,"into",E,E,141,[[],[U]]],[11,R[21],E,E,141,[[],[R[23]]]],[11,R[25],E,E,141,[[["self"]],[T]]],[11,R[22],E,E,141,[[["self"]],[T]]],[11,R[24],E,E,141,[[["self"]],[R[26]]]],[11,R[189],E,E,141,[[["self"]],[T]]],[11,R[187],E,E,141,[[["self"],[T]]]],[11,"size",E,E,142,[[["self"]],[R[4]]]],[11,"is_cool",E,E,142,[[[R[4]]],["bool"]]],[11,R[1272],E,E,142,[[[R[4]]],[T]]],[11,R[1273],E,E,142,[[[R[4]]],[T]]],[11,"from",E,E,142,[[[T]],[T]]],[11,R[20],E,E,142,[[[U]],[R[23]]]],[11,"into",E,E,142,[[],[U]]],[11,R[21],E,E,142,[[],[R[23]]]],[11,R[25],E,E,142,[[["self"]],[T]]],[11,R[22],E,E,142,[[["self"]],[T]]],[11,R[24],E,E,142,[[["self"]],[R[26]]]],[11,R[189],E,E,142,[[["self"]],[T]]],[11,R[187],E,E,142,[[["self"],[T]]]],[11,"size",E,E,143,[[["self"]],[R[4]]]],[11,"is_cool",E,E,143,[[[R[4]]],["bool"]]],[11,R[1272],E,E,143,[[[R[4]]],[T]]],[11,R[1273],E,E,143,[[[R[4]]],[T]]],[11,"from",E,E,143,[[[T]],[T]]],[11,R[20],E,E,143,[[[U]],[R[23]]]],[11,"into",E,E,143,[[],[U]]],[11,R[21],E,E,143,[[],[R[23]]]],[11,R[25],E,E,143,[[["self"]],[T]]],[11,R[22],E,E,143,[[["self"]],[T]]],[11,R[24],E,E,143,[[["self"]],[R[26]]]],[11,R[192],E,E,143,[[["self"]],["string"]]],[11,"size",R[1503],E,144,[[["self"]],[R[4]]]],[11,"is_cool",E,E,144,[[[R[4]]],["bool"]]],[11,R[1272],E,E,144,[[[R[4]]],[T]]],[11,R[1273],E,E,144,[[[R[4]]],[T]]],[11,"from",E,E,144,[[[T]],[T]]],[11,R[20],E,E,144,[[[U]],[R[23]]]],[11,"into",E,E,144,[[],[U]]],[11,R[21],E,E,144,[[],[R[23]]]],[11,R[25],E,E,144,[[["self"]],[T]]],[11,R[22],E,E,144,[[["self"]],[T]]],[11,R[24],E,E,144,[[["self"]],[R[26]]]],[11,"size",R[1504],E,145,[[["self"]],[R[4]]]],[11,"is_cool",E,E,145,[[[R[4]]],["bool"]]],[11,R[1272],E,E,145,[[[R[4]]],[T]]],[11,R[1273],E,E,145,[[[R[4]]],[T]]],[11,"from",E,E,145,[[[T]],[T]]],[11,R[20],E,E,145,[[[U]],[R[23]]]],[11,"into",E,E,145,[[],[U]]],[11,R[21],E,E,145,[[],[R[23]]]],[11,R[25],E,E,145,[[["self"]],[T]]],[11,R[22],E,E,145,[[["self"]],[T]]],[11,R[24],E,E,145,[[["self"]],[R[26]]]],[11,"size",E,E,146,[[["self"]],[R[4]]]],[11,"is_cool",E,E,146,[[[R[4]]],["bool"]]],[11,R[1272],E,E,146,[[[R[4]]],[T]]],[11,R[1273],E,E,146,[[[R[4]]],[T]]],[11,"from",E,E,146,[[[T]],[T]]],[11,R[20],E,E,146,[[[U]],[R[23]]]],[11,"into",E,E,146,[[],[U]]],[11,R[21],E,E,146,[[],[R[23]]]],[11,R[25],E,E,146,[[["self"]],[T]]],[11,R[22],E,E,146,[[["self"]],[T]]],[11,R[24],E,E,146,[[["self"]],[R[26]]]],[11,R[189],E,E,146,[[["self"]],[T]]],[11,R[187],E,E,146,[[["self"],[T]]]],[11,"size",R[1505],E,147,[[["self"]],[R[4]]]],[11,"is_cool",E,E,147,[[[R[4]]],["bool"]]],[11,R[1272],E,E,147,[[[R[4]]],[T]]],[11,R[1273],E,E,147,[[[R[4]]],[T]]],[11,"from",E,E,147,[[[T]],[T]]],[11,R[20],E,E,147,[[[U]],[R[23]]]],[11,"into",E,E,147,[[],[U]]],[11,R[21],E,E,147,[[],[R[23]]]],[11,R[25],E,E,147,[[["self"]],[T]]],[11,R[22],E,E,147,[[["self"]],[T]]],[11,R[24],E,E,147,[[["self"]],[R[26]]]],[11,"size",E,E,148,[[["self"]],[R[4]]]],[11,"is_cool",E,E,148,[[[R[4]]],["bool"]]],[11,R[1272],E,E,148,[[[R[4]]],[T]]],[11,R[1273],E,E,148,[[[R[4]]],[T]]],[11,"from",E,E,148,[[[T]],[T]]],[11,R[20],E,E,148,[[[U]],[R[23]]]],[11,"into",E,E,148,[[],[U]]],[11,R[21],E,E,148,[[],[R[23]]]],[11,R[25],E,E,148,[[["self"]],[T]]],[11,R[22],E,E,148,[[["self"]],[T]]],[11,R[24],E,E,148,[[["self"]],[R[26]]]],[11,"size",R[1506],E,149,[[["self"]],[R[4]]]],[11,"is_cool",E,E,149,[[[R[4]]],["bool"]]],[11,R[1272],E,E,149,[[[R[4]]],[T]]],[11,R[1273],E,E,149,[[[R[4]]],[T]]],[11,"from",E,E,149,[[[T]],[T]]],[11,R[20],E,E,149,[[[U]],[R[23]]]],[11,"into",E,E,149,[[],[U]]],[11,R[21],E,E,149,[[],[R[23]]]],[11,R[25],E,E,149,[[["self"]],[T]]],[11,R[22],E,E,149,[[["self"]],[T]]],[11,R[24],E,E,149,[[["self"]],[R[26]]]],[11,R[189],E,E,149,[[["self"]],[T]]],[11,R[187],E,E,149,[[["self"],[T]]]],[11,"size",E,E,150,[[["self"]],[R[4]]]],[11,"is_cool",E,E,150,[[[R[4]]],["bool"]]],[11,R[1272],E,E,150,[[[R[4]]],[T]]],[11,R[1273],E,E,150,[[[R[4]]],[T]]],[11,"from",E,E,150,[[[T]],[T]]],[11,R[20],E,E,150,[[[U]],[R[23]]]],[11,"into",E,E,150,[[],[U]]],[11,R[21],E,E,150,[[],[R[23]]]],[11,R[25],E,E,150,[[["self"]],[T]]],[11,R[22],E,E,150,[[["self"]],[T]]],[11,R[24],E,E,150,[[["self"]],[R[26]]]],[11,"size",R[1507],E,151,[[["self"]],[R[4]]]],[11,"is_cool",E,E,151,[[[R[4]]],["bool"]]],[11,R[1272],E,E,151,[[[R[4]]],[T]]],[11,R[1273],E,E,151,[[[R[4]]],[T]]],[11,"from",E,E,151,[[[T]],[T]]],[11,R[20],E,E,151,[[[U]],[R[23]]]],[11,"into",E,E,151,[[],[U]]],[11,R[21],E,E,151,[[],[R[23]]]],[11,R[25],E,E,151,[[["self"]],[T]]],[11,R[22],E,E,151,[[["self"]],[T]]],[11,R[24],E,E,151,[[["self"]],[R[26]]]],[11,"size",R[1508],E,152,[[["self"]],[R[4]]]],[11,"is_cool",E,E,152,[[[R[4]]],["bool"]]],[11,R[1272],E,E,152,[[[R[4]]],[T]]],[11,R[1273],E,E,152,[[[R[4]]],[T]]],[11,"from",E,E,152,[[[T]],[T]]],[11,R[20],E,E,152,[[[U]],[R[23]]]],[11,"into",E,E,152,[[],[U]]],[11,R[21],E,E,152,[[],[R[23]]]],[11,R[25],E,E,152,[[["self"]],[T]]],[11,R[22],E,E,152,[[["self"]],[T]]],[11,R[24],E,E,152,[[["self"]],[R[26]]]],[11,"hash",R[1486],E,2,[[["self"],["__ht"]]]],[11,R[212],E,E,2,[[["self"],["poll"]],[[R[5],[R[47]]],[R[47]]]]],[11,"lt",E,E,2,[[["self"],["poll"]],["bool"]]],[11,"le",E,E,2,[[["self"],["poll"]],["bool"]]],[11,"gt",E,E,2,[[["self"],["poll"]],["bool"]]],[11,"ge",E,E,2,[[["self"],["poll"]],["bool"]]],[11,"fmt",E,E,2,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,R[211],E,E,2,[[["self"]]]],[11,"clone",E,E,2,[[["self"]],["poll"]]],[11,R[765],E,E,2,[[],[R[23]]]],[11,R[766],E,E,2,[[],[["poll",[R[5]]],[R[5],[R[23]]]]]],[11,"from_ok",E,E,2,[[],[["poll",[R[5]]],[R[5],[R[23]]]]]],[11,R[765],E,E,2,[[],[R[23]]]],[11,R[766],E,E,2,[[],[["poll",[R[23]]],[R[23]]]]],[11,"from_ok",E,E,2,[[],[["poll",[R[23]]],[R[23]]]]],[11,"cmp",E,E,2,[[["self"],["poll"]],[R[47]]]],[11,"eq",E,E,2,[[["self"],["poll"]],["bool"]]],[11,"ne",E,E,2,[[["self"],["poll"]],["bool"]]],[11,"from",E,E,2,[[[T]],["poll"]]],[11,"read",R[1487],"Read",6,[[["self"]],["u8"]]],[11,"write",E,"Write",6,[[["self"],["u8"]]]],[11,"read",E,"Read",6,[[["self"]],["u16"]]],[11,"write",E,"Write",6,[[["self"],["u16"]]]],[11,"read",E,R[1038],7,[[["self"]],[T]]],[11,"write",E,R[1039],7,[[["self"],[T]]]],[11,"read",E,"Read",6,[[["self"]],["u32"]]],[11,"write",E,"Write",6,[[["self"],["u32"]]]],[11,"clone",E,E,6,[[["self"]],["pio"]]],[11,"poll",R[1486],E,1,[[["loopfn"],["pin",["loopfn"]],["context"]],["poll"]]],[11,"fmt",R[1487],E,6,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",R[1486],E,0,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",R[1487],R[1041],5,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",R[1486],E,1,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",R[1487],R[1040],7,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,4,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,R[225],R[1173],R[226],11,[[["self"],[R[285]]]]],[11,"from",E,E,12,[[["u32"]],[R[278]]]],[11,"from",E,E,13,[[["u32"]],[R[273]]]],[11,R[221],E,R[222],11,[[["self"],[R[285]]]]],[11,"fmt",R[1502],E,132,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",R[1173],E,16,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,15,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,10,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,11,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,14,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,8,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,17,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",R[1502],E,132,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",R[1173],E,12,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,9,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,13,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,R[211],E,E,17,[[["self"]]]],[11,R[211],E,E,9,[[["self"]]]],[11,R[211],E,E,11,[[["self"]]]],[11,R[211],E,E,16,[[["self"]]]],[11,R[211],R[1502],E,132,[[["self"]]]],[11,"extend",R[1173],E,11,[[["self"],[T]]]],[11,"fmt",E,E,11,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,R[229],E,E,11,[[[T]],[R[285]]]],[11,R[3],E,R[218],11,[[[R[285]]],[R[285]]]],[11,"clone",E,E,9,[[["self"]],[R[310]]]],[11,"clone",E,E,11,[[["self"]],[R[285]]]],[11,"clone",E,E,8,[[["self"]],[R[314]]]],[11,"clone",E,E,16,[[["self"]],[R[311]]]],[11,"clone",R[1502],E,132,[[["self"]],[R[268]]]],[11,"clone",R[1173],E,17,[[["self"]],[R[312]]]],[11,"hash",E,E,11,[[["self"],["__h"]]]],[11,R[212],E,E,11,[[["self"],[R[285]]],[[R[5],[R[47]]],[R[47]]]]],[11,"lt",E,E,11,[[["self"],[R[285]]],["bool"]]],[11,"le",E,E,11,[[["self"],[R[285]]],["bool"]]],[11,"gt",E,E,11,[[["self"],[R[285]]],["bool"]]],[11,"ge",E,E,11,[[["self"],[R[285]]],["bool"]]],[11,R[215],E,R[216],11,[[["self"],[R[285]]]]],[11,R[223],E,R[224],11,[[["self"],[R[285]]]]],[11,"bitxor",E,R[220],11,[[[R[285]]],[R[285]]]],[11,"fmt",E,E,11,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,11,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,11,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,R[830],E,E,14,[[["self"],[R[4]]],[T]]],[11,R[831],E,E,14,[[["self"],[R[4]],[T]]]],[11,"eq",E,E,11,[[["self"],[R[285]]],["bool"]]],[11,"ne",E,E,11,[[["self"],[R[285]]],["bool"]]],[11,"eq",E,E,9,[[["self"],[R[310]]],["bool"]]],[11,"ne",E,E,9,[[["self"],[R[310]]],["bool"]]],[11,"eq",R[1502],E,132,[[["self"],[R[268]]],["bool"]]],[11,"ne",E,E,132,[[["self"],[R[268]]],["bool"]]],[11,"eq",R[1173],E,17,[[["self"],[R[312]]],["bool"]]],[11,"ne",E,E,17,[[["self"],[R[312]]],["bool"]]],[11,"eq",E,E,16,[[["self"],[R[311]]],["bool"]]],[11,"ne",E,E,16,[[["self"],[R[311]]],["bool"]]],[11,"cmp",E,E,11,[[["self"],[R[285]]],[R[47]]]],[11,"bitor",E,R[219],11,[[[R[285]]],[R[285]]]],[11,R[49],E,E,9,[[],[R[310]]]],[11,R[49],E,E,8,[[],[R[314]]]],[11,R[49],E,E,17,[[],[R[312]]]],[11,R[49],E,E,16,[[],[R[311]]]],[11,R[49],E,E,11,[[],[R[285]]]],[11,R[49],E,E,10,[[],[R[564]]]],[11,"sub",E,R[210],11,[[[R[285]]],[R[285]]]],[11,"not",E,R[217],11,[[],[R[285]]]],[11,"drop",R[1488],E,19,[[["self"]]]],[11,"drop",E,E,24,[[["self"]]]],[11,"drop",E,E,31,[[["self"]]]],[11,"drop",R[1490],E,42,[[["self"]]]],[11,"drop",E,E,44,[[["self"]]]],[11,"drop",R[1491],"Dropping a ThreadLocalStaticRegion deallocates it.",47,[[["self"]]]],[11,"fmt",R[1502],E,143,[[["self"],[R[28]]],[R[23]]]],[11,R[207],R[1489],E,39,[[["self"]],[T]]],[11,R[207],R[1507],E,151,[[["self"]]]],[11,"deref",R[1489],E,39,[[["self"]],[T]]],[11,"deref",R[1507],E,151,[[["self"]]]],[11,"from",R[1488],E,24,[[[R[1316]]],[R[682]]]],[11,"from",R[1493],E,54,[[[R[682]]],[R[1316]]]],[11,"from",R[1488],E,24,[[[R[1331]]],[R[682]]]],[11,"from",R[1494],E,57,[[[R[682]]],[R[1331]]]],[11,"from",R[1488],E,24,[[[R[1319]]],[R[682]]]],[11,"from",R[1494],E,58,[[[R[682]]],[R[1319]]]],[11,"from",R[1488],E,24,[[[R[1342]]],[R[682]]]],[11,"from",R[1495],E,63,[[[R[682]]],[R[1342]]]],[11,"from",R[1488],E,24,[[[R[1336]]],[R[682]]]],[11,"from",R[1495],E,64,[[[R[682]]],[R[1336]]]],[11,"from",R[1488],E,24,[[[R[1373]]],[R[682]]]],[11,"from",R[1496],E,71,[[[R[682]]],[R[1373]]]],[11,"from",R[1488],E,24,[[[R[1376]]],[R[682]]]],[11,"from",R[1496],E,72,[[[R[682]]],[R[1376]]]],[11,"from",R[1488],E,24,[[[R[1377]]],[R[682]]]],[11,"from",R[1496],E,73,[[[R[682]]],[R[1377]]]],[11,"from",R[1488],E,24,[[[R[1418]]],[R[682]]]],[11,"from",R[1497],E,84,[[[R[682]]],[R[1418]]]],[11,"from",R[1488],E,24,[[[R[1419]]],[R[682]]]],[11,"from",R[1497],E,85,[[[R[682]]],[R[1419]]]],[11,"from",R[1488],E,24,[[[R[1438]]],[R[682]]]],[11,"from",R[1497],E,86,[[[R[682]]],[R[1438]]]],[11,"from",R[1488],E,24,[[[R[1382]]],[R[682]]]],[11,"from",R[1497],E,87,[[[R[682]]],[R[1382]]]],[11,"from",R[1488],E,24,[[[R[1400]]],[R[682]]]],[11,"from",R[1497],E,88,[[[R[682]]],[R[1400]]]],[11,"from",R[1488],E,24,[[[R[1377]]],[R[682]]]],[11,"from",R[1498],E,102,[[[R[682]]],[R[1377]]]],[11,"from",R[1488],E,24,[[[R[1451]]],[R[682]]]],[11,"from",R[1499],E,105,[[[R[682]]],[R[1451]]]],[11,"from",R[1488],E,24,[[[R[1328]]],[R[682]]]],[11,"from",R[1500],E,108,[[[R[682]]],[R[1328]]]],[11,"from",R[1488],E,24,[[[R[1460]]],[R[682]]]],[11,"from",R[1500],E,109,[[[R[682]]],[R[1460]]]],[11,"from",R[1488],E,24,[[[R[1461]]],[R[682]]]],[11,"from",R[1500],E,110,[[[R[682]]],[R[1461]]]],[11,"from",R[1488],E,24,[[[R[1468]]],[R[682]]]],[11,"from",R[1501],E,117,[[[R[682]]],[R[1468]]]],[11,"from",R[1488],E,24,[[[R[1473]]],[R[682]]]],[11,"from",R[1501],E,118,[[[R[682]]],[R[1473]]]],[11,"from",R[1488],E,24,[[[R[1475]]],[R[682]]]],[11,"from",R[1501],E,119,[[[R[682]]],[R[1475]]]],[11,"from",R[1488],E,24,[[[R[1476]]],[R[682]]]],[11,"from",R[1501],E,120,[[[R[682]]],[R[1476]]]],[11,"from",R[1488],E,24,[[[R[1477]]],[R[682]]]],[11,"from",R[1501],E,121,[[[R[682]]],[R[1477]]]],[11,"from",R[1502],E,143,[[[R[268]]],["self"]]],[11,"from",E,E,143,[[[R[1511]]],["self"]]],[11,"from",E,E,143,[[[R[1512]]],["self"]]],[11,"from",E,E,143,[[["smerror"]],["self"]]],[11,"from",E,E,143,[[[R[1517]]],["self"]]],[11,"from",E,E,143,[[[R[1518]]],["self"]]],[11,"from",E,E,143,[[[R[1513]]],["self"]]],[11,"from",E,E,143,[[["pmerror"]],["self"]]],[11,"from",E,E,143,[[["hiderror"]],["self"]]],[11,"from",E,E,143,[[["vierror"]],["self"]]],[11,"eq",R[1488],E,19,[[["self"],["handle"]],["bool"]]],[11,"ne",E,E,19,[[["self"],["handle"]],["bool"]]],[11,"eq",E,E,20,[[["self"],[R[1257]]],["bool"]]],[11,"ne",E,E,20,[[["self"],[R[1257]]],["bool"]]],[11,"eq",E,E,32,[[["self"],["pid"]],["bool"]]],[11,"ne",E,E,32,[[["self"],["pid"]],["bool"]]],[11,"eq",R[1497],E,80,[[["self"],[R[1381]]],["bool"]]],[11,"ne",E,E,80,[[["self"],[R[1381]]],["bool"]]],[11,"eq",E,E,83,[[["self"],[R[1384]]],["bool"]]],[11,"ne",E,E,83,[[["self"],[R[1384]]],["bool"]]],[11,"eq",R[1498],E,99,[[["self"],[R[1509]]],["bool"]]],[11,"ne",E,E,99,[[["self"],[R[1509]]],["bool"]]],[11,"eq",E,E,100,[[["self"],[R[1510]]],["bool"]]],[11,"ne",E,E,100,[[["self"],[R[1510]]],["bool"]]],[11,"eq",R[1502],E,133,[[["self"],["module"]],["bool"]]],[11,"ne",E,E,133,[[["self"],["module"]],["bool"]]],[11,"eq",E,E,134,[[["self"],[R[1511]]],["bool"]]],[11,"ne",E,E,134,[[["self"],[R[1511]]],["bool"]]],[11,"eq",E,E,135,[[["self"],[R[1512]]],["bool"]]],[11,"ne",E,E,135,[[["self"],[R[1512]]],["bool"]]],[11,"eq",E,E,136,[[["self"],["smerror"]],["bool"]]],[11,"ne",E,E,136,[[["self"],["smerror"]],["bool"]]],[11,"eq",E,E,137,[[["self"],[R[1517]]],["bool"]]],[11,"ne",E,E,137,[[["self"],[R[1517]]],["bool"]]],[11,"eq",E,E,138,[[["self"],[R[1518]]],["bool"]]],[11,"ne",E,E,138,[[["self"],[R[1518]]],["bool"]]],[11,"eq",E,E,139,[[["self"],[R[1513]]],["bool"]]],[11,"ne",E,E,139,[[["self"],[R[1513]]],["bool"]]],[11,"eq",E,E,140,[[["self"],["pmerror"]],["bool"]]],[11,"ne",E,E,140,[[["self"],["pmerror"]],["bool"]]],[11,"eq",E,E,141,[[["self"],["hiderror"]],["bool"]]],[11,"ne",E,E,141,[[["self"],["hiderror"]],["bool"]]],[11,"eq",E,E,142,[[["self"],["vierror"]],["bool"]]],[11,"ne",E,E,142,[[["self"],["vierror"]],["bool"]]],[11,R[211],R[1488],E,19,[[["self"]]]],[11,R[211],E,E,20,[[["self"]]]],[11,R[211],E,E,32,[[["self"]]]],[11,R[211],R[1497],E,80,[[["self"]]]],[11,R[211],E,E,83,[[["self"]]]],[11,R[211],R[1498],E,99,[[["self"]]]],[11,R[211],E,E,100,[[["self"]]]],[11,R[211],R[1502],E,133,[[["self"]]]],[11,R[211],E,E,134,[[["self"]]]],[11,R[211],E,E,135,[[["self"]]]],[11,R[211],E,E,136,[[["self"]]]],[11,R[211],E,E,137,[[["self"]]]],[11,R[211],E,E,138,[[["self"]]]],[11,R[211],E,E,139,[[["self"]]]],[11,R[211],E,E,140,[[["self"]]]],[11,R[211],E,E,141,[[["self"]]]],[11,R[211],E,E,142,[[["self"]]]],[11,"cmp",R[1488],E,32,[[["self"],["pid"]],[R[47]]]],[11,R[212],E,E,32,[[["self"],["pid"]],[[R[47]],[R[5],[R[47]]]]]],[11,"lt",E,E,32,[[["self"],["pid"]],["bool"]]],[11,"le",E,E,32,[[["self"],["pid"]],["bool"]]],[11,"gt",E,E,32,[[["self"],["pid"]],["bool"]]],[11,"ge",E,E,32,[[["self"],["pid"]],["bool"]]],[11,"index",R[1489],E,39,[[["self"],["idx"]]]],[11,"clone",R[1488],E,20,[[["self"]],[R[1257]]]],[11,"clone",E,E,32,[[["self"]],["pid"]]],[11,"clone",R[1269],E,37,[[["self"]],[R[1514]]]],[11,"clone",E,E,35,[[["self"]],[R[1293]]]],[11,"clone",R[1492],E,49,[[["self"]],[R[1265]]]],[11,"clone",E,E,50,[[["self"]],[R[1515]]]],[11,"clone",E,E,51,[[["self"]],["queuewaker"]]],[11,"clone",R[1496],E,69,[[["self"]],[R[34]]]],[11,"clone",E,E,70,[[["self"]],[R[1516]]]],[11,"clone",R[1497],E,80,[[["self"]],[R[1381]]]],[11,"clone",E,E,81,[[["self"]],[R[1383]]]],[11,"clone",E,E,82,[[["self"]],[R[1665]]]],[11,"clone",E,E,83,[[["self"]],[R[1384]]]],[11,"clone",R[1498],E,99,[[["self"]],[R[1509]]]],[11,"clone",E,E,100,[[["self"]],[R[1510]]]],[11,"clone",E,E,101,[[["self"]],[R[1641]]]],[11,"clone",R[1502],E,133,[[["self"]],["module"]]],[11,"clone",E,E,134,[[["self"]],[R[1511]]]],[11,"clone",E,E,135,[[["self"]],[R[1512]]]],[11,"clone",E,E,136,[[["self"]],["smerror"]]],[11,"clone",E,E,137,[[["self"]],[R[1517]]]],[11,"clone",E,E,138,[[["self"]],[R[1518]]]],[11,"clone",E,E,139,[[["self"]],[R[1513]]]],[11,"clone",E,E,140,[[["self"]],["pmerror"]]],[11,"clone",E,E,141,[[["self"]],["hiderror"]]],[11,"clone",E,E,142,[[["self"]],["vierror"]]],[11,"clone",R[1504],E,146,[[["self"]],["windowsize"]]],[11,"clone",R[1506],E,149,[[["self"]],["color"]]],[11,"fmt",R[1488],E,19,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,20,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,21,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,22,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,23,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,24,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,25,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,26,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,27,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,28,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,29,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,30,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,31,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,32,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1489],E,39,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1269],E,33,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,34,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,37,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,35,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,38,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,36,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1490],E,42,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,43,[[["self"],[R[28]]],[["error"],[R[23],["error"]]]]],[11,"fmt",E,E,44,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1491],E,45,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,46,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,47,[[["self"],[R[28]]],[["error"],[R[23],["error"]]]]],[11,"fmt",R[1492],E,48,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,49,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,50,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,53,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,51,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,52,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1493],E,54,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1494],E,57,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,58,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1495],E,63,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,64,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1496],E,69,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,70,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,71,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,72,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,73,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1497],E,80,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,81,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,82,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,83,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,84,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,85,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,86,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,87,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,88,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1498],E,99,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,100,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,101,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,102,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1499],E,105,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1500],E,108,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,109,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,110,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1501],E,117,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,118,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,119,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,120,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,121,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1502],E,143,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,133,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,134,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,135,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,136,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,137,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,138,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,139,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,140,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,141,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,142,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1504],E,146,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,145,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1505],E,147,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,148,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1506],E,149,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,150,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1507],E,151,[[["self"],[R[28]]],[R[23]]]],[11,R[823],R[1504],E,145,[[["self"],["str"]],[["error"],[R[23],["error"]]]]],[11,"as_ref",R[1507],E,151,[[["self"]],[T]]],[11,"as_mut",E,E,151,[[["self"]],[T]]],[11,R[49],R[1492],E,49,[[],[R[1265]]]],[11,R[49],E,E,50,[[],[R[1515]]]],[11,R[49],E,E,52,[[],["self"]]],[11,"alloc",R[1503],E,144,[[["self"],["layout"]]]],[11,"dealloc",E,E,144,[[["self"],["layout"]]]],[11,R[830],R[1269],E,33,[[["self"],[R[4]]],[T]]],[11,R[831],E,E,33,[[["self"],[R[4]],[T]]]],[11,R[830],E,E,34,[[["self"],[R[4]]],[T]]],[11,R[831],E,E,34,[[["self"],[R[4]],[T]]]],[11,"enabled",R[1508],E,152,[[["self"],["metadata"]],["bool"]]],[11,"log",E,E,152,[[["self"],["record"]]]],[11,"flush",E,E,152,[[["self"]]]],[11,"wake_by_ref",R[1492],E,51,[[["arc"]]]],[11,"map",R[1486],R[1519],2,[[["f"]],["poll"]]],[11,"is_ready",E,R[1520],2,[[["self"]],["bool"]]],[11,"is_pending",E,R[1521],2,[[["self"]],["bool"]]],[11,"map_ok",E,R[1522],2,[[["f"]],[[R[23]],["poll",[R[23]]]]]],[11,"map_err",E,R[1523],2,[[["f"]],[["poll",[R[23]]],[R[23]]]]],[11,"new",R[1487],R[1005],4,[[["i"]],["readonly"]]],[11,"read",E,R[12],4,[[["self"]]]],[11,"readf",E,R[13],4,[[["self"]],["bool"]]],[11,"new",E,R[1006],5,[[["i"]],["writeonly"]]],[11,"write",E,R[14],5,[[["self"]]]],[11,"new",E,R[1000],6,[[["u16"]],["pio"]]],[11,"new",E,R[1001],7,[[],["mmio"]]],[18,R[1524],R[1173],R[1525],9,N],[18,R[1526],E,R[1527],9,N],[11,"check",E,R[1528],11,[[],[[R[268]],[R[23],[R[268]]]]]],[18,R[975],E,R[1529],11,N],[18,R[99],E,R[1530],11,N],[18,R[309],E,R[1531],11,N],[18,"RO",E,R[1532],11,N],[18,"RW",E,R[1533],11,N],[18,"RX",E,R[1534],11,N],[11,"empty",E,R[106],11,[[],[R[285]]]],[11,"all",E,R[107],11,[[],[R[285]]]],[11,"bits",E,R[108],11,[[["self"]],["u32"]]],[11,R[109],E,R[110],11,[[["u32"]],[[R[5],[R[285]]],[R[285]]]]],[11,R[111],E,R[112],11,[[["u32"]],[R[285]]]],[11,R[147],E,R[113],11,[[["self"]],["bool"]]],[11,"is_all",E,R[114],11,[[["self"]],["bool"]]],[11,R[115],E,R[116],11,[[["self"],[R[285]]],["bool"]]],[11,R[148],E,R[117],11,[[["self"],[R[285]]],["bool"]]],[11,"insert",E,R[118],11,[[["self"],[R[285]]]]],[11,"remove",E,R[119],11,[[["self"],[R[285]]]]],[11,"toggle",E,R[120],11,[[["self"],[R[285]]]]],[11,"set",E,R[121],11,[[["self"],["bool"],[R[285]]]]],[11,"check",E,R[1535],14,[[["self"]],[[R[268]],[R[23],[R[268]]]]]],[11,"is_64bit",E,R[271],14,[[["self"]],["bool"]]],[11,"set_64bit",E,R[271],14,[[["self"],["bool"]]]],[11,R[1536],E,R[272],14,[[["self"]],[R[273]]]],[11,R[1537],E,R[272],14,[[["self"],[R[273]]]]],[11,"is_debug",E,R[274],14,[[["self"]],["bool"]]],[11,"set_debug",E,R[274],14,[[["self"],["bool"]]]],[11,"is_aslr",E,R[275],14,[[["self"]],["bool"]]],[11,"set_aslr",E,R[275],14,[[["self"],["bool"]]]],[11,R[1538],E,R[276],14,[[["self"]],["bool"]]],[11,R[1539],E,R[276],14,[[["self"],["bool"]]]],[11,R[1540],E,"unknown.",14,[[["self"]],["bool"]]],[11,R[1541],E,R[277],14,[[["self"]],[R[278]]]],[11,R[1542],E,R[277],14,[[["self"],[R[278]]]]],[11,R[1543],E,"unknown",14,[[["self"]],["bool"]]],[18,"Created",E,R[1544],16,N],[18,R[1545],E,R[1546],16,N],[18,"Started",E,R[1547],16,N],[18,"Crashed",E,R[1548],16,N],[18,R[1549],E,R[1550],16,N],[18,"Exiting",E,R[1551],16,N],[18,"Exited",E,R[1552],16,N],[18,R[1553],E,R[1554],16,N],[18,R[279],E,R[1555],17,N],[11,"make_ret",R[1502],R[967],132,[[],["u32"]]],[11,R[968],E,R[969],132,[[["u32"]],[R[268]]]],[11,R[970],E,R[971],132,[[["u32"]],[R[268]]]],[11,R[972],E,R[973],132,[[],["u32"]]],[18,R[833],E,R[934],132,N],[18,R[834],E,R[935],132,N],[18,R[327],E,R[936],132,N],[18,R[835],E,R[937],132,N],[18,R[938],E,R[939],132,N],[18,R[940],E,R[941],132,N],[18,R[836],E,R[942],132,N],[18,R[943],E,R[944],132,N],[18,R[945],E,R[946],132,N],[18,R[947],E,R[948],132,N],[18,R[949],E,R[950],132,N],[18,R[951],E,R[952],132,N],[18,R[953],E,R[954],132,N],[18,R[837],E,R[955],132,N],[18,"Timeout",E,R[956],132,N],[18,"Canceled",E,R[957],132,N],[18,R[838],E,R[958],132,N],[18,R[959],E,R[960],132,N],[18,R[961],E,R[962],132,N],[18,R[963],E,R[964],132,N],[18,R[839],E,R[965],132,N],[18,R[840],E,R[966],132,N]],"p":[[4,"Loop"],[3,"LoopFn"],[4,"Poll"],[8,"Io"],[3,R[29]],[3,R[30]],[3,"Pio"],[3,"Mmio"],[3,R[323]],[3,R[322]],[3,R[318]],[3,R[317]],[4,R[325]],[4,R[326]],[3,R[321]],[3,"ProcInfo"],[3,R[279]],[3,R[324]],[3,"Registers"],[3,"Handle"],[3,"HandleRef"],[3,"IRQEvent"],[3,R[665]],[3,R[666]],[3,R[702]],[3,R[703]],[3,R[709]],[3,R[710]],[3,"Thread"],[3,"Process"],[3,R[329]],[3,R[1556]],[3,"Pid"],[3,R[920]],[3,R[921]],[3,"IPCBuffer"],[3,"Message"],[4,R[1557]],[4,"MessageTy"],[3,"Align16"],[8,R[1558]],[8,R[1559]],[3,R[1560]],[3,R[1561]],[3,"Thread"],[3,"TlsElf"],[3,R[926]],[3,R[1562]],[3,"Task"],[3,"WorkQueue"],[3,R[1563]],[3,"QueueWaker"],[3,R[1564]],[4,"WorkItem"],[3,R[1565]],[8,R[1566]],[8,R[1567]],[3,R[1568]],[3,R[1569]],[8,R[1570]],[8,R[1571]],[8,"IBuffer"],[8,R[1572]],[3,R[1573]],[3,"IDiskProxy"],[8,R[1574]],[8,R[1575]],[8,"IDisk"],[8,"IDiskAsync"],[3,R[54]],[3,R[53]],[3,R[1576]],[3,R[1577]],[3,R[1439]],[8,R[1578]],[8,R[1579]],[8,R[1625]],[8,R[1580]],[8,R[1440]],[8,R[1442]],[3,R[1581]],[3,R[1582]],[3,R[1583]],[3,R[1584]],[3,R[1585]],[3,R[1586]],[3,R[1587]],[3,R[1588]],[3,"IFileProxy"],[8,R[1589]],[8,R[1590]],[8,"IStorage"],[8,R[1591]],[8,R[1592]],[8,R[1593]],[8,"IDirectory"],[8,R[1594]],[8,"IFile"],[8,"IFileAsync"],[3,R[1595]],[3,R[1596]],[3,R[1597]],[3,R[1439]],[8,R[1440]],[8,R[1442]],[3,R[1598]],[8,R[1599]],[8,R[1600]],[3,"IPipeProxy"],[3,R[1601]],[3,R[1602]],[8,"IPipe"],[8,"IPipeAsync"],[8,R[1603]],[8,R[1604]],[8,R[1605]],[8,R[1606]],[3,R[1607]],[3,R[1608]],[3,R[1609]],[3,R[1610]],[3,R[1611]],[8,R[1612]],[8,R[1613]],[8,"IExample2"],[8,R[1614]],[8,"IExample3"],[8,R[1615]],[8,"IExample4"],[8,R[1616]],[8,"IExample1"],[8,R[1617]],[3,R[320]],[3,"Module"],[3,R[1618]],[3,R[1619]],[3,"SmError"],[3,"AhciError"],[3,"TimeError"],[3,R[1620]],[3,"PmError"],[3,"HidError"],[3,"ViError"],[4,"Error"],[3,R[875]],[3,"Terminal"],[4,"WindowSize"],[3,R[1621]],[3,"Keyboard"],[3,"Color"],[3,"Window"],[3,"ZeroBox"],[3,"Logger"]]};
searchIndex["sunrise_libutils"]={"doc":"A messy crate with various utilities shared between the…","i":[[3,R[16],R[15],R[0],N,N],[12,"data",E,R[1],0,N],[12,"pos",E,R[2],0,N],[3,R[17],E,R[0],N,N],[12,"data",E,R[1],1,N],[12,"pos",E,R[2],1,N],[5,"align_up",E,R[976],N,[[["copy"],["num"],["not"],[R[3]]],[["copy"],["num"],["not"],[R[3]]]]],[5,R[977],E,R[978],N,[[["copy"],["num"],["not"],[R[3]]],[["copy"],["num"],["not"],[R[3]]]]],[5,R[979],E,R[980],N,[[[R[4]]],[[R[4]],[R[5],[R[4]]]]]],[5,"div_ceil",E,R[981],N,[[["copy"],["num"]],[["copy"],["num"]]]],[5,R[982],E,R[983],N,[[[T]]]],[5,R[984],E,R[985],N,[[[R[4]],[T]]]],[5,R[986],E,R[987],N,[[],[[R[4]],[R[5],[R[4]]]]]],[5,R[988],E,R[989],N,[[],[[R[4]],[R[5],[R[4]]]]]],[5,R[990],E,R[991],N,[[[R[4]]],[[R[4]],[R[5],[R[4]]]]]],[5,R[992],E,R[993],N,[[[R[4]]],[R[4]]]],[5,R[994],E,R[995],N,[[[R[4]]],[R[4]]]],[5,"cast_mut",E,R[996],N,[[]]],[0,"io",E,R[997],N,N],[3,"Pio",R[9],R[6],N,N],[12,"port",E,R[7],2,N],[12,"value",E,R[8],2,N],[3,"Mmio",E,R[10],N,N],[12,"value",E,R[11],3,N],[3,R[29],E,R[998],N,N],[12,"inner",E,E,4,N],[3,R[30],E,R[999],N,N],[12,"inner",E,E,5,N],[0,"pio",E,"Port Io",N,N],[3,"Pio","sunrise_libutils::io::pio",R[6],N,N],[12,"port",E,R[7],2,N],[12,"value",E,R[8],2,N],[11,"new",R[9],R[1000],2,[[["u16"]],["self"]]],[0,"mmio",E,"Wrapper around a mmio value",N,N],[3,"Mmio","sunrise_libutils::io::mmio",R[10],N,N],[12,"value",E,R[11],3,N],[11,"new",R[9],R[1001],3,[[],["self"]]],[8,"Io",E,R[1002],N,N],[16,"Value",E,R[1003],6,N],[10,"read",E,R[12],6,[[["self"]]]],[10,"write",E,R[14],6,[[["self"]]]],[11,"readf",E,R[13],6,[[["self"]],["bool"]]],[11,"writef",E,R[1004],6,[[["self"],["bool"]]]],[11,"new",E,R[1005],4,[[["i"]],["readonly"]]],[11,"read",E,R[12],4,[[["self"]]]],[11,"readf",E,R[13],4,[[["self"]],["bool"]]],[11,"new",E,R[1006],5,[[["i"]],["writeonly"]]],[11,"write",E,R[14],5,[[["self"]]]],[0,"cursor",R[15],"Simple cursor",N,N],[3,R[16],"sunrise_libutils::cursor",R[0],N,N],[12,"data",E,R[1],0,N],[12,"pos",E,R[2],0,N],[3,R[17],E,R[0],N,N],[12,"data",E,R[1],1,N],[12,"pos",E,R[2],1,N],[11,"new",R[15],R[18],0,[[],[R[1007]]]],[11,"pos",E,R[19],0,[[["self"]],[R[4]]]],[11,"skip_write",E,R[1008],0,[[["self"],[R[4]]]]],[11,"write_u8",E,R[1009],0,[[["self"],["u8"]]]],[11,"write_u16",E,R[1010],0,[[["self"],["u16"]]]],[11,"write_u32",E,R[1011],0,[[["self"],["u32"]]]],[11,"write_u64",E,R[1012],0,[[["self"],["u64"]]]],[11,"write",E,R[1013],0,[[["self"]]]],[11,R[846],E,R[1014],0,[[["self"],["copy"]]]],[11,"new",E,R[18],1,[[],["cursorread"]]],[11,"pos",E,R[19],1,[[["self"]],[R[4]]]],[11,"read_u8",E,R[1015],1,[[["self"]],["u8"]]],[11,"read_u16",E,R[1016],1,[[["self"]],["u16"]]],[11,"read_u32",E,R[1017],1,[[["self"]],["u32"]]],[11,"read_u64",E,R[1018],1,[[["self"]],["u64"]]],[11,"assert",E,R[1019],1,[[["self"]]]],[11,"skip_read",E,R[1020],1,[[["self"],[R[4]]]]],[11,"read_raw",E,R[1021],1,[[["self"]],["copy"]]],[0,R[1022],E,R[1023],N,N],[3,"LoopFn",R[27],R[1024],N,N],[12,"future",E,R[1025],7,N],[12,"func",E,R[1026],7,N],[4,"Loop",E,R[1027],N,N],[13,"Break",E,R[1028],8,N],[13,"Continue",E,R[1029],8,N],[5,"loop_fn",E,R[1030],N,[[["s"],["f"]],["loopfn"]]],[8,R[31],R[15],R[1031],N,N],[11,R[1032],E,R[1033],9,[[["self"],[R[4]],["range",[R[4]]],["bool"]]]],[14,R[1034],E,R[1035],N,N],[14,R[1036],E,R[1037],N,N],[11,R[20],E,E,0,[[[U]],[R[23]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[21],E,E,0,[[],[R[23]]]],[11,R[25],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],[T]]],[11,R[24],E,E,0,[[["self"]],[R[26]]]],[11,R[20],E,E,1,[[[U]],[R[23]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[21],E,E,1,[[],[R[23]]]],[11,R[25],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"]],[T]]],[11,R[24],E,E,1,[[["self"]],[R[26]]]],[11,R[20],R[9],E,2,[[[U]],[R[23]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[21],E,E,2,[[],[R[23]]]],[11,R[25],E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"]],[T]]],[11,R[24],E,E,2,[[["self"]],[R[26]]]],[11,R[20],E,E,3,[[[U]],[R[23]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[21],E,E,3,[[],[R[23]]]],[11,R[25],E,E,3,[[["self"]],[T]]],[11,R[22],E,E,3,[[["self"]],[T]]],[11,R[24],E,E,3,[[["self"]],[R[26]]]],[11,R[20],E,E,4,[[[U]],[R[23]]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[21],E,E,4,[[],[R[23]]]],[11,R[25],E,E,4,[[["self"]],[T]]],[11,R[22],E,E,4,[[["self"]],[T]]],[11,R[24],E,E,4,[[["self"]],[R[26]]]],[11,R[20],E,E,5,[[[U]],[R[23]]]],[11,"into",E,E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[21],E,E,5,[[],[R[23]]]],[11,R[25],E,E,5,[[["self"]],[T]]],[11,R[22],E,E,5,[[["self"]],[T]]],[11,R[24],E,E,5,[[["self"]],[R[26]]]],[11,R[20],R[27],E,7,[[[U]],[R[23]]]],[11,"into",E,E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[21],E,E,7,[[],[R[23]]]],[11,R[25],E,E,7,[[["self"]],[T]]],[11,R[22],E,E,7,[[["self"]],[T]]],[11,R[24],E,E,7,[[["self"]],[R[26]]]],[11,R[20],E,E,8,[[[U]],[R[23]]]],[11,"into",E,E,8,[[],[U]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[21],E,E,8,[[],[R[23]]]],[11,R[25],E,E,8,[[["self"]],[T]]],[11,R[22],E,E,8,[[["self"]],[T]]],[11,R[24],E,E,8,[[["self"]],[R[26]]]],[11,"read",R[9],"Read",2,[[["self"]],["u8"]]],[11,"write",E,"Write",2,[[["self"],["u8"]]]],[11,"read",E,"Read",2,[[["self"]],["u16"]]],[11,"write",E,"Write",2,[[["self"],["u16"]]]],[11,"read",E,"Read",2,[[["self"]],["u32"]]],[11,"write",E,"Write",2,[[["self"],["u32"]]]],[11,"read",E,R[1038],3,[[["self"]],[T]]],[11,"write",E,R[1039],3,[[["self"],[T]]]],[11,"fmt",E,E,2,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,R[1040],3,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",E,E,4,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,R[1041],5,[[["self"],[R[28]]],[[R[23],["error"]],["error"]]]],[11,"fmt",R[15],E,0,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,1,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[27],E,8,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,7,[[["self"],[R[28]]],[R[23]]]],[11,"clone",R[9],E,2,[[["self"]],["pio"]]],[11,"poll",R[27],E,7,[[["pin"],["self"],["context"]],["poll"]]]],"p":[[3,R[16]],[3,R[17]],[3,"Pio"],[3,"Mmio"],[3,R[29]],[3,R[30]],[8,"Io"],[3,"LoopFn"],[4,"Loop"],[8,R[31]]]};
searchIndex["sunrise_loader"]={"doc":"Userspace Loader","i":[[3,"PROCESSES",R[1784],E,N,N],[12,R[60],E,E,0,N],[3,R[1785],E,"The filesystem to boot titles from.",N,N],[12,R[60],E,E,1,N],[3,R[1787],E,"Struct implementing the ldr:shel service.",N,N],[5,"boot",E,"Start the given titleid by loading its content from the…",N,[[[R[1418]],["str"]],[["error"],["pid"],[R[23],["pid","error"]]]]],[5,"main",E,E,N,[[]]],[0,R[714],E,"Loads Elfs.",N,N],[5,"from_data","sunrise_loader::elf_loader","Turn a byte array into an ELF file.",N,[[],[[R[23],["elffile","error"]],["elffile"],["error"]]]],[5,R[1781],E,"Gets the size of the allocation necessary to load all the…",N,[[["elffile"]],[["error"],[R[4]],[R[23],[R[4],"error"]]]]],[5,"get_kacs",E,R[1783],N,[[["elffile"]],[R[5]]]],[5,"load_file",E,"Loads the given executable into the given process/address…",N,[[["elffile"],["process"],[R[4]]],[[R[23],["error"]],["error"]]]],[5,R[716],E,R[717],N,[[["elffile"],[R[4]],[R[718]],["process"]],[[R[23],["error"]],["error"]]]],[7,"PROCESSES",R[1784],E,N,N],[7,R[1785],E,E,N,N],[7,"HEADER",E,E,N,N],[7,R[1630],E,E,N,N],[17,"MAX_ELF_SIZE",E,"Max size of an ELF before we issue a warning. Loader needs…",N,N],[11,"from",E,E,0,[[[T]],[T]]],[11,R[20],E,E,0,[[[U]],[R[23]]]],[11,"into",E,E,0,[[],[U]]],[11,R[21],E,E,0,[[],[R[23]]]],[11,R[25],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],[T]]],[11,R[24],E,E,0,[[["self"]],[R[26]]]],[11,"size",E,E,0,[[["self"]],[R[4]]]],[11,"is_cool",E,E,0,[[[R[4]]],["bool"]]],[11,R[1272],E,E,0,[[[R[4]]],[T]]],[11,R[1273],E,E,0,[[[R[4]]],[T]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[20],E,E,1,[[[U]],[R[23]]]],[11,"into",E,E,1,[[],[U]]],[11,R[21],E,E,1,[[],[R[23]]]],[11,R[25],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"]],[T]]],[11,R[24],E,E,1,[[["self"]],[R[26]]]],[11,"size",E,E,1,[[["self"]],[R[4]]]],[11,"is_cool",E,E,1,[[[R[4]]],["bool"]]],[11,R[1272],E,E,1,[[[R[4]]],[T]]],[11,R[1273],E,E,1,[[[R[4]]],[T]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[20],E,E,2,[[[U]],[R[23]]]],[11,"into",E,E,2,[[],[U]]],[11,R[21],E,E,2,[[],[R[23]]]],[11,R[25],E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"]],[T]]],[11,R[24],E,E,2,[[["self"]],[R[26]]]],[11,R[189],E,E,2,[[["self"]],[T]]],[11,R[187],E,E,2,[[["self"],[T]]]],[11,"size",E,E,2,[[["self"]],[R[4]]]],[11,"is_cool",E,E,2,[[[R[4]]],["bool"]]],[11,R[1272],E,E,2,[[[R[4]]],[T]]],[11,R[1273],E,E,2,[[[R[4]]],[T]]],[11,"deref",E,E,0,[[["self"]],["mutex"]]],[11,"deref",E,E,1,[[["self"]],[R[1418]]]],[11,"clone",E,E,2,[[["self"]],[R[1786]]]],[11,"fmt",E,E,2,[[["self"],[R[28]]],[R[23]]]],[11,R[49],E,E,2,[[],[R[1786]]]],[11,R[1448],E,E,2,[[["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["u64","error"]]]]],[11,"wait",E,E,2,[[["self"],[R[1265]],["u64"]],[[R[1309],[R[23]]],[R[23],["u32","error"]]]]],[11,R[231],E,E,0,[[["self"]]]],[11,R[231],E,E,1,[[["self"]]]]],"p":[[3,"PROCESSES"],[3,R[1785]],[3,R[1787]]]};
searchIndex["sunrise_shell"]={"doc":"Shell","i":[[3,R[1624],"sunrise_shell","Represent the current work directory.",N,N],[12,R[60],E,E,0,N],[5,"login",E,"Asks the user to login repeatedly. Returns with an error…",N,[[["keyboard"],[R[1623]],[R[1418]]],[["error"],[R[23],["error"]]]]],[5,"user_add",E,"Adds a new user to /etc/passwd with the specified username.",N,[[["keyboard"],[R[1623]],[R[1418]],["str"]],[["error"],[R[23],["error"]]]]],[5,"get_next_line_no_echo",E,R[1622],N,[[["keyboard"]],["string"]]],[5,"get_next_line",E,R[1622],N,[[[R[1623]]],["string"]]],[5,"main",E,E,N,[[]]],[5,"split_path",E,"Splits a path at the first `/` it encounters.",N,[[["str"]]]],[5,"get_absolute_path",E,"Get an absolute path from an user path",N,[[["str"]],["string"]]],[5,"get_path_relative_to_current_directory",E,"Get a path relative to the current directory",N,[[["str"]],["string"]]],[5,"cd",E,"Change the current working directory",N,[[[R[1418]],["str"]],[["error"],[R[23],["error"]]]]],[5,"cat",E,"Print a file on the standard output.",N,[[["w"],[R[1418]],["str"]],[["error"],[R[23],["error"]]]]],[5,"ls",E,"List files and folders at the given path, or in the…",N,[[["str"],[R[1623]],[R[1418]],[R[5],["str"]]],[["error"],[R[23],["error"]]]]],[5,"show_gif",E,"Shows a GIF in a new window, blocking the caller. When a…",N,[[["keyboard"]]]],[5,"test_threads",E,"Test function ensuring threads are working properly.",N,[[[R[1623]]],[R[1623]]]],[5,"test_divide_by_zero",E,"Test function ensuring divide by zero interruption kills…",N,[[]]],[5,"test_page_fault",E,"Test function ensuring pagefaults kills only the current…",N,[[]]],[7,R[1624],E,E,N,N],[7,"LOUIS1",E,"Meme for KFS1",N,N],[7,"LOUIS2",E,"Meme for KFS2",N,N],[7,"LOUIS3",E,"Meme for KFS3",N,N],[7,"LOUIS4",E,"Meme for KFS4",N,N],[7,"LOUIS5",E,"Meme for KFS5",N,N],[7,"LOUIS6",E,"Meme for KFS6",N,N],[7,"LOUIS7",E,"Meme for KFS7",N,N],[7,"HEADER",E,E,N,N],[7,R[1630],E,E,N,N],[11,R[20],E,E,0,[[[U]],[R[23]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[21],E,E,0,[[],[R[23]]]],[11,R[25],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],[T]]],[11,R[24],E,E,0,[[["self"]],[R[26]]]],[11,"size",E,E,0,[[["self"]],[R[4]]]],[11,"is_cool",E,E,0,[[[R[4]]],["bool"]]],[11,R[1272],E,E,0,[[[R[4]]],[T]]],[11,R[1273],E,E,0,[[[R[4]]],[T]]],[11,"deref",E,E,0,[[["self"]],["mutex"]]],[11,R[231],E,E,0,[[["self"]]]]],"p":[[3,R[1624]]]};
searchIndex["sunrise_sm"]={"doc":R[1305],"i":[[3,R[1656],"sunrise_sm","`sm:` service interface. The main interface to the Service…",N,N],[3,"SERVICES",E,"Global mapping of Service Name -> ClientPort.",N,N],[12,R[60],E,E,0,N],[3,R[1652],E,"Event signaled whenever a new service is registered.…",N,N],[12,R[60],E,E,1,N],[3,R[1655],E,"Helper type that makes a ServiceName displayable.",N,N],[12,"0",E,E,2,N],[5,"get_service_length",E,"Get the length of a service encoded as an u64.",N,[[["u64"]],[R[4]]]],[5,"get_service_str",E,"Casts an &u64 into an &str.",N,[[["u64"]],[["utf8error"],[R[23],["str","utf8error"]],["str"]]]],[5,"main",E,E,N,[[]]],[7,"SERVICES",E,E,N,N],[7,R[1652],E,E,N,N],[7,"HEADER",E,E,N,N],[7,R[1630],E,E,N,N],[11,R[20],E,E,3,[[[U]],[R[23]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[21],E,E,3,[[],[R[23]]]],[11,R[25],E,E,3,[[["self"]],[T]]],[11,R[22],E,E,3,[[["self"]],[T]]],[11,R[24],E,E,3,[[["self"]],[R[26]]]],[11,"size",E,E,3,[[["self"]],[R[4]]]],[11,"is_cool",E,E,3,[[[R[4]]],["bool"]]],[11,R[1272],E,E,3,[[[R[4]]],[T]]],[11,R[1273],E,E,3,[[[R[4]]],[T]]],[11,R[189],E,E,3,[[["self"]],[T]]],[11,R[187],E,E,3,[[["self"],[T]]]],[11,R[20],E,E,0,[[[U]],[R[23]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[21],E,E,0,[[],[R[23]]]],[11,R[25],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],[T]]],[11,R[24],E,E,0,[[["self"]],[R[26]]]],[11,"size",E,E,0,[[["self"]],[R[4]]]],[11,"is_cool",E,E,0,[[[R[4]]],["bool"]]],[11,R[1272],E,E,0,[[[R[4]]],[T]]],[11,R[1273],E,E,0,[[[R[4]]],[T]]],[11,R[20],E,E,1,[[[U]],[R[23]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[21],E,E,1,[[],[R[23]]]],[11,R[25],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"]],[T]]],[11,R[24],E,E,1,[[["self"]],[R[26]]]],[11,"size",E,E,1,[[["self"]],[R[4]]]],[11,"is_cool",E,E,1,[[[R[4]]],["bool"]]],[11,R[1272],E,E,1,[[[R[4]]],[T]]],[11,R[1273],E,E,1,[[[R[4]]],[T]]],[11,R[20],E,E,2,[[[U]],[R[23]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[21],E,E,2,[[],[R[23]]]],[11,R[25],E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"]],[T]]],[11,R[24],E,E,2,[[["self"]],[R[26]]]],[11,"size",E,E,2,[[["self"]],[R[4]]]],[11,"is_cool",E,E,2,[[[R[4]]],["bool"]]],[11,R[1272],E,E,2,[[[R[4]]],[T]]],[11,R[1273],E,E,2,[[[R[4]]],[T]]],[11,R[192],E,E,2,[[["self"]],["string"]]],[11,R[189],E,E,2,[[["self"]],[T]]],[11,R[187],E,E,2,[[["self"],[T]]]],[11,"deref",E,E,0,[[["self"]],["mutex"]]],[11,"deref",E,E,1,[[["self"]]]],[11,"fmt",E,E,2,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,3,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,2,[[["self"],[R[28]]],[R[23]]]],[11,"eq",E,E,2,[[["self"],[R[1653]]],["bool"]]],[11,"ne",E,E,2,[[["self"],[R[1653]]],["bool"]]],[11,R[211],E,E,2,[[["self"]]]],[11,"cmp",E,E,2,[[["self"],[R[1653]]],[R[47]]]],[11,R[212],E,E,2,[[["self"],[R[1653]]],[[R[5],[R[47]]],[R[47]]]]],[11,"lt",E,E,2,[[["self"],[R[1653]]],["bool"]]],[11,"le",E,E,2,[[["self"],[R[1653]]],["bool"]]],[11,"gt",E,E,2,[[["self"],[R[1653]]],["bool"]]],[11,"ge",E,E,2,[[["self"],[R[1653]]],["bool"]]],[11,"hash",E,E,2,[[["self"],["__h"]]]],[11,"clone",E,E,3,[[["self"]],[R[1654]]]],[11,"clone",E,E,2,[[["self"]],[R[1653]]]],[11,R[49],E,E,3,[[],[R[1654]]]],[11,R[231],E,R[1306],3,[[["self"],["pid"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[11,R[1307],E,"Get a ClientSession to this service.",3,[[["self"],[R[1265]],["u64"]],[[R[23],[R[682],"error"]],[R[1309],[R[23]]]]]],[11,R[1310],E,"Register a new service, returning a ServerPort to the…",3,[[["self"],["bool"],["u32"],[R[1265]],["u64"]],[[R[1309],[R[23]]],[R[23],[R[700],"error"]]]]],[11,R[1312],E,"Unregister a service.",3,[[["self"],[R[1265]],["u64"]],[[R[1309],[R[23]]],[R[23],["error"]]]]],[11,R[231],E,E,0,[[["self"]]]],[11,R[231],E,E,1,[[["self"]]]]],"p":[[3,"SERVICES"],[3,R[1652]],[3,R[1655]],[3,R[1656]]]};
searchIndex["sunrise_time"]={"doc":"Time Service","i":[[3,R[1440],R[1629],R[1318],N,N],[3,"Rtc",E,"IBM Real Time Clock provides access to the current date…",N,N],[12,"registers",E,"Command and Data Register.",0,N],[12,"timestamp",E,"Last RTC time value.",0,N],[12,"irq_event",E,"The RTC event.",0,N],[3,R[1625],E,"RTC interface.",N,N],[5,"update_rtc",E,"Task responsible for updating the RTC_INSTANCE's current…",N,[[[R[1265]]]]],[5,"main",E,E,N,[[]]],[0,"timezone",E,"TimeZone module",N,N],[3,R[1637],R[1631],"Represent the file I/O interface with tzdata.",N,N],[3,R[1635],E,"Represent a file inside a TimeZoneFileSystem.",N,N],[12,"data",E,"The content of the file.",1,N],[3,R[1636],E,"Global instance handling I/O and storage of the device…",N,N],[12,"location",E,"The location name of this device.",2,N],[12,"my_rules",E,"Rules of this device.",2,N],[12,"temp_rules",E,"Temporary rules storage used during timezone conversion.",2,N],[3,R[1578],E,"TimeZone service object.",N,N],[12,"dummy",E,"A dummy field present to just avoid having a zero sized…",3,N],[5,"calendar_to_tzlib",E,"Convert a IPC CalendarTime type to a libtimezone…",N,[[[R[34]]],[R[46]]]],[5,"calendar_to_ipc",E,"Convert a libtimezone CalendarInfo to a IPC CalendarTime…",N,[[[R[34]]]]],[5,"to_timezone_to_time_error",E,"Convert a libtimezone TimeZoneError to a IPC Error type.",N,[[["timezoneerror"]],["error"]]],[6,"IpcResult",E,"A IPC result.",N,N],[7,"TIMEZONE_ARCHIVE",E,"The internal timezone filesystem content.",N,N],[7,"TZ_MANAGER",E,"Global instance of TimeZoneManager",N,N],[7,"ZEROED_TIME_ZONE_RULE",E,"Global clear instance of TimeZoneRule used to avoid…",N,N],[11,"from_raw",E,"Create a TimeZoneFile instance from a raw slice.",1,[[],["self"]]],[11,"read_full",E,"Read the whole file.",1,[[["self"]]]],[11,R[1626],E,"Open a file at the given path in the TimeZone virtual…",4,[[],[[R[1627]],[R[5],[R[1627]]]]]],[11,"file_exist",E,"Check for a file existance at the given path in the…",4,[[],["bool"]]],[11,"file_count",E,"Return the total amount of files in the TimeZone virtual…",4,[[],["u32"]]],[11,R[1351],E,"Get the time zone name used on this devie.",2,[[["self"]],[R[1348]]]],[11,R[1353],E,R[1628],2,[[["self"],[R[1348]]],[[R[23],["error"]],["error"]]]],[11,"set_device_location_name_unchecked",E,R[1628],2,[[["self"],[R[1348]]]]],[11,R[1355],E,R[1356],2,[[["self"]],[["u32"],[R[23],["u32","error"]],["error"]]]],[11,R[1359],E,"Load a time zone rule.",2,[[["self"],[R[5],[R[40]]],[R[1348]],[R[40]]],[[R[23],["error"]],["error"]]]],[11,"get_my_rules",E,"Get the device timezone rule.",2,[[["self"]],[R[40]]]],[7,"HEADER",R[1629],E,N,N],[7,R[1630],E,E,N,N],[7,"RTC_INSTANCE",E,"Global instance of Rtc.",N,N],[11,"new",E,"Create a new RTC with the default IBM PC values.",0,[[],["rtc"]]],[11,"get_time",E,"Get the last timestamp of the RTC.",0,[[["self"]],["i64"]]],[11,"get_irq_event_handle",E,"Get the update event of the RTC. TODO: Implement…",0,[[["self"]],[R[1257]]]],[11,"read_reg",E,"Read from a CMOS register.",0,[[["self"],["u8"]],["u8"]]],[11,"write_reg",E,"Write to the CMOS register.",0,[[["self"],["u8"]]]],[11,"enable_update_ended_int",E,"Enable the Update Ended RTC interrupt. This will enable an…",0,[[["self"]]]],[11,"read_interrupt_kind",E,"Acknowledges an interrupt from the RTC. Necessary to…",0,[[["self"]],["u8"]]],[11,"is_12hr_clock",E,"Checks if the RTC is in 12 hours or 24 hours mode.…",0,[[["self"]],["bool"]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[20],E,E,5,[[[U]],[R[23]]]],[11,"into",E,E,5,[[],[U]]],[11,R[21],E,E,5,[[],[R[23]]]],[11,R[25],E,E,5,[[["self"]],[T]]],[11,R[22],E,E,5,[[["self"]],[T]]],[11,R[24],E,E,5,[[["self"]],[R[26]]]],[11,"size",E,E,5,[[["self"]],[R[4]]]],[11,"is_cool",E,E,5,[[[R[4]]],["bool"]]],[11,R[1272],E,E,5,[[[R[4]]],[T]]],[11,R[1273],E,E,5,[[[R[4]]],[T]]],[11,R[189],E,E,5,[[["self"]],[T]]],[11,R[187],E,E,5,[[["self"],[T]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[20],E,E,0,[[[U]],[R[23]]]],[11,"into",E,E,0,[[],[U]]],[11,R[21],E,E,0,[[],[R[23]]]],[11,R[25],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],[T]]],[11,R[24],E,E,0,[[["self"]],[R[26]]]],[11,"size",E,E,0,[[["self"]],[R[4]]]],[11,"is_cool",E,E,0,[[[R[4]]],["bool"]]],[11,R[1272],E,E,0,[[[R[4]]],[T]]],[11,R[1273],E,E,0,[[[R[4]]],[T]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[20],E,E,6,[[[U]],[R[23]]]],[11,"into",E,E,6,[[],[U]]],[11,R[21],E,E,6,[[],[R[23]]]],[11,R[25],E,E,6,[[["self"]],[T]]],[11,R[22],E,E,6,[[["self"]],[T]]],[11,R[24],E,E,6,[[["self"]],[R[26]]]],[11,"size",E,E,6,[[["self"]],[R[4]]]],[11,"is_cool",E,E,6,[[[R[4]]],["bool"]]],[11,R[1272],E,E,6,[[[R[4]]],[T]]],[11,R[1273],E,E,6,[[[R[4]]],[T]]],[11,R[189],E,E,6,[[["self"]],[T]]],[11,R[187],E,E,6,[[["self"],[T]]]],[11,"from",R[1631],E,4,[[[T]],[T]]],[11,R[20],E,E,4,[[[U]],[R[23]]]],[11,"into",E,E,4,[[],[U]]],[11,R[21],E,E,4,[[],[R[23]]]],[11,R[25],E,E,4,[[["self"]],[T]]],[11,R[22],E,E,4,[[["self"]],[T]]],[11,R[24],E,E,4,[[["self"]],[R[26]]]],[11,"size",E,E,4,[[["self"]],[R[4]]]],[11,"is_cool",E,E,4,[[[R[4]]],["bool"]]],[11,R[1272],E,E,4,[[[R[4]]],[T]]],[11,R[1273],E,E,4,[[[R[4]]],[T]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[20],E,E,1,[[[U]],[R[23]]]],[11,"into",E,E,1,[[],[U]]],[11,R[21],E,E,1,[[],[R[23]]]],[11,R[25],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"]],[T]]],[11,R[24],E,E,1,[[["self"]],[R[26]]]],[11,"size",E,E,1,[[["self"]],[R[4]]]],[11,"is_cool",E,E,1,[[[R[4]]],["bool"]]],[11,R[1272],E,E,1,[[[R[4]]],[T]]],[11,R[1273],E,E,1,[[[R[4]]],[T]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[20],E,E,2,[[[U]],[R[23]]]],[11,"into",E,E,2,[[],[U]]],[11,R[21],E,E,2,[[],[R[23]]]],[11,R[25],E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"]],[T]]],[11,R[24],E,E,2,[[["self"]],[R[26]]]],[11,"size",E,E,2,[[["self"]],[R[4]]]],[11,"is_cool",E,E,2,[[[R[4]]],["bool"]]],[11,R[1272],E,E,2,[[[R[4]]],[T]]],[11,R[1273],E,E,2,[[[R[4]]],[T]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[20],E,E,3,[[[U]],[R[23]]]],[11,"into",E,E,3,[[],[U]]],[11,R[21],E,E,3,[[],[R[23]]]],[11,R[25],E,E,3,[[["self"]],[T]]],[11,R[22],E,E,3,[[["self"]],[T]]],[11,R[24],E,E,3,[[["self"]],[R[26]]]],[11,"size",E,E,3,[[["self"]],[R[4]]]],[11,"is_cool",E,E,3,[[[R[4]]],["bool"]]],[11,R[1272],E,E,3,[[[R[4]]],[T]]],[11,R[1273],E,E,3,[[[R[4]]],[T]]],[11,R[189],E,E,3,[[["self"]],[T]]],[11,R[187],E,E,3,[[["self"],[T]]]],[11,"clone",E,E,3,[[["self"]],[R[1632]]]],[11,"clone",R[1629],E,5,[[["self"]],[R[1633]]]],[11,"clone",E,E,6,[[["self"]],["rtcmanager"]]],[11,"fmt",R[1631],E,3,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1629],E,5,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,0,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,6,[[["self"],[R[28]]],[R[23]]]],[11,R[49],R[1631],E,3,[[],[R[1632]]]],[11,R[49],R[1629],E,5,[[],[R[1633]]]],[11,R[49],E,E,0,[[],["self"]]],[11,R[49],E,E,6,[[],["rtcmanager"]]],[11,R[1351],R[1631],E,3,[[["self"],[R[1265]]],[[R[23],[R[1348],"error"]],[R[1348]],["error"]]]],[11,R[1353],E,E,3,[[["self"],[R[1265]],[R[1348]]],[[R[23],["error"]],["error"]]]],[11,R[1355],E,E,3,[[["self"],[R[1265]]],[["u32"],[R[23],["u32","error"]],["error"]]]],[11,R[1357],E,E,3,[[["self"],["u32"],[R[1265]]],[["u32"],[R[23],["u32","error"]],["error"]]]],[11,R[1359],E,E,3,[[["self"],[R[1348]],[R[1265]],[R[1634]]],[[R[23],["error"]],["error"]]]],[11,R[1349],E,E,3,[[["self"],[R[1634]],[R[44]],[R[1265]]],[[R[23],["error"]],["error"]]]],[11,R[1362],E,E,3,[[["self"],[R[44]],[R[1265]]],[[R[23],["error"]],["error"]]]],[11,R[1350],E,E,3,[[["self"],[R[34]],[R[1634]],[R[1265]]],[[R[23],[R[44],"error"]],[R[44]],["error"]]]],[11,R[1365],E,E,3,[[["self"],[R[34]],[R[1265]]],[[R[23],[R[44],"error"]],[R[44]],["error"]]]],[11,R[1368],R[1629],E,6,[[["self"],[R[1265]]],[["i64"],["error"],[R[23],["i64","error"]]]]],[11,R[1370],E,E,6,[[["self"],[R[1265]]],[["error"],[R[23],[R[1257],"error"]],[R[1257]]]]],[11,R[1374],E,E,5,[[["self"],[R[1265]]],[[R[23],[R[1373],"error"]],["error"],[R[1373]]]]]],"p":[[3,"Rtc"],[3,R[1635]],[3,R[1636]],[3,R[1578]],[3,R[1637]],[3,R[1440]],[3,R[1625]]]};
searchIndex["sunrise_vi"]={"doc":"Visual Compositor","i":[[3,R[1570],R[1828],R[1318],N,N],[3,"Buffer",E,"Internal representation of a window.",N,N],[12,"top",E,E,0,N],[12,"left",E,E,0,N],[12,"width",E,E,0,N],[12,"height",E,E,0,N],[12,"mem",E,E,0,N],[3,"IBuffer",E,R[1329],N,N],[12,"buffer",E,"The Buffer linked with this window object instance.",1,N],[5,"get_intersect",E,"Gets the intersection between two rectangles.",N,[[],[R[5]]]],[5,"draw",E,"Draw a portion of a buffer onto the framebuffer.",N,[[["buffer"],["u32"],[R[1817]]]]],[5,R[1829],E,"See [Buffer::get_real_bounds].",N,[[["u32"]]]],[5,"main",E,E,N,[[]]],[0,"vbe",E,"VESA Bios Extensions Framebuffer",N,N],[3,"VBEColor",R[1830],R[1818],N,N],[12,"b",E,E,2,N],[12,"g",E,E,2,N],[12,"r",E,E,2,N],[12,"a",E,E,2,N],[3,R[1834],E,"A wrapper around a linear framebuffer. The framebuffer is…",N,N],[12,"buf",E,E,3,N],[12,"width",E,E,3,N],[12,"height",E,E,3,N],[12,"bpp",E,"Bits-per-pixel. Usually 8.",3,N],[3,R[1819],E,E,N,N],[12,R[60],E,E,4,N],[7,R[1819],E,E,N,N],[11,"rgb",E,"Creates a VBEColor from the given red/green/blue…",2,[[["u8"]],["vbecolor"]]],[11,"new",E,"Creates an instance of the linear framebuffer.",3,[[],[[R[23],[R[1817],"error"]],["error"],[R[1817]]]]],[11,"new_buffer",E,"Creates a backbuffer backed by an in-memory array.",3,[[[R[4]]],[R[1817]]]],[11,"width",E,"framebuffer width in pixels. Does not account for bpp",3,[[["self"]],[R[4]]]],[11,"height",E,"framebuffer height in pixels. Does not account for bpp",3,[[["self"]],[R[4]]]],[11,"bpp",E,R[1820],3,[[["self"]],[R[4]]]],[11,R[1821],E,R[1822],3,[[["self"],[R[4]]],[R[4]]]],[11,"write_px",E,"Writes a pixel in the framebuffer respecting the bgr pattern",3,[[["self"],["vbecolor"],[R[4]]]]],[11,R[1823],E,"Writes a pixel in the framebuffer respecting the bgr…",3,[[["self"],["vbecolor"],[R[4]]]]],[11,"get_fb",E,R[1824],3,[[["self"]]]],[11,"clear",E,"Clears the whole screen",3,[[["self"]]]],[11,"clear_at",E,"Clears a segment of the screen.",3,[[["self"],[R[4]]]]],[0,R[1623],R[1828],R[1825],N,N],[3,"Pos",R[1831],"Just an x and a y",N,N],[12,"x",E,E,5,N],[12,"y",E,E,5,N],[3,"Terminal",E,"A struct for logging text to the window. Renders…",N,N],[12,R[1817],E,"Rendering target for this terminal.",6,N],[12,"cursor_pos",E,"Cursor pos, in pixels. Does not account for bpp.…",6,N],[12,"font",E,"The font in use for this terminal.",6,N],[12,"cached_glyphs",E,"We cache ascii glyphs to avoid rendering them every time.",6,N],[12,"advance_width",E,"Expected to be the same for every glyph since it should be…",6,N],[12,"linespace",E,"The distance between two baselines.",6,N],[12,"ascent",E,"The maximum ascent in the font.",6,N],[12,"descent",E,"The maximum descent in the font.",6,N],[3,R[1835],E,"Twili IPipe implementation on a Vi Terminal.",N,N],[12,R[1623],E,"Inner terminal.",7,N],[5,"font_height",E,"Get the height of the built-in monospaced font.",N,[[],[R[4]]]],[7,"FONT",E,"The font we choose to render in",N,N],[17,"FONT_SIZE",E,"The size we choose to render in",N,N],[11,"new",E,R[1826],6,[[["u32"],["i32"],[R[1221]]],[["error"],[R[23],["error"]]]]],[11,"draw",E,R[1827],6,[[["self"]]]],[11,"carriage_return",E,"Move the cursor to the beginning of the current line.",6,[[["self"]]]],[11,"line_feed",E,"Move the cursor to the beginning of the next line,…",6,[[["self"]]]],[11,"advance_pos",E,"Move the cursor to the next position for drawing a…",6,[[["self"]]]],[11,"move_pos_back",E,"Move the cursor back to the previous position. If we are…",6,[[["self"]]]],[11,"scroll_screen",E,"scrolls the whole screen by one line. self.pos must be on…",6,[[["self"]]]],[11,"clear",E,"Clears the whole screen and reset cursor",6,[[["self"]]]],[11,"print_attr",E,"Prints a string to the screen with attributes",6,[[["self"],["color"],["str"]]]],[11,"display_glyph_in_box",E,"Copies a rendered character to the screen, displaying it…",6,[[["glyphbitmap"],["buffer"],[R[4]],["color"],["pos"]]]],[11,"new",E,"Create a new TerminalPipe from an existing Terminal.",7,[[[R[1623]]],[R[1832]]]],[7,"BUFFERS",R[1828],"A list of the buffers currently alive.",N,N],[7,"BACKBUFFER_ARR",E,"The backbuffer to draw into.",N,N],[7,"HEADER",E,E,N,N],[7,R[1630],E,E,N,N],[11,R[1829],E,"Returns the buffer's bounds within the given width/height,…",0,[[["self"],["u32"]]]],[11,"width",E,"Get the width of this buffer.",0,[[["self"]],["u32"]]],[11,"height",E,"Get the height of this buffer.",0,[[["self"]],["u32"]]],[11,"get_buffer",E,R[1824],0,[[["self"]]]],[11,R[1821],E,R[1822],0,[[["self"],[R[4]]],[R[4]]]],[11,"draw",E,R[1330],0,[[["self"]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[20],E,E,8,[[[U]],[R[23]]]],[11,"into",E,E,8,[[],[U]]],[11,R[21],E,E,8,[[],[R[23]]]],[11,R[25],E,E,8,[[["self"]],[T]]],[11,R[22],E,E,8,[[["self"]],[T]]],[11,R[24],E,E,8,[[["self"]],[R[26]]]],[11,"size",E,E,8,[[["self"]],[R[4]]]],[11,"is_cool",E,E,8,[[[R[4]]],["bool"]]],[11,R[1272],E,E,8,[[[R[4]]],[T]]],[11,R[1273],E,E,8,[[[R[4]]],[T]]],[11,R[189],E,E,8,[[["self"]],[T]]],[11,R[187],E,E,8,[[["self"],[T]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[20],E,E,0,[[[U]],[R[23]]]],[11,"into",E,E,0,[[],[U]]],[11,R[21],E,E,0,[[],[R[23]]]],[11,R[25],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],[T]]],[11,R[24],E,E,0,[[["self"]],[R[26]]]],[11,"size",E,E,0,[[["self"]],[R[4]]]],[11,"is_cool",E,E,0,[[[R[4]]],["bool"]]],[11,R[1272],E,E,0,[[[R[4]]],[T]]],[11,R[1273],E,E,0,[[[R[4]]],[T]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[20],E,E,1,[[[U]],[R[23]]]],[11,"into",E,E,1,[[],[U]]],[11,R[21],E,E,1,[[],[R[23]]]],[11,R[25],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"]],[T]]],[11,R[24],E,E,1,[[["self"]],[R[26]]]],[11,"size",E,E,1,[[["self"]],[R[4]]]],[11,"is_cool",E,E,1,[[[R[4]]],["bool"]]],[11,R[1272],E,E,1,[[[R[4]]],[T]]],[11,R[1273],E,E,1,[[[R[4]]],[T]]],[11,R[189],E,E,1,[[["self"]],[T]]],[11,R[187],E,E,1,[[["self"],[T]]]],[11,"from",R[1830],E,2,[[[T]],[T]]],[11,R[20],E,E,2,[[[U]],[R[23]]]],[11,"into",E,E,2,[[],[U]]],[11,R[21],E,E,2,[[],[R[23]]]],[11,R[25],E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"]],[T]]],[11,R[24],E,E,2,[[["self"]],[R[26]]]],[11,"size",E,E,2,[[["self"]],[R[4]]]],[11,"is_cool",E,E,2,[[[R[4]]],["bool"]]],[11,R[1272],E,E,2,[[[R[4]]],[T]]],[11,R[1273],E,E,2,[[[R[4]]],[T]]],[11,R[189],E,E,2,[[["self"]],[T]]],[11,R[187],E,E,2,[[["self"],[T]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[20],E,E,3,[[[U]],[R[23]]]],[11,"into",E,E,3,[[],[U]]],[11,R[21],E,E,3,[[],[R[23]]]],[11,R[25],E,E,3,[[["self"]],[T]]],[11,R[22],E,E,3,[[["self"]],[T]]],[11,R[24],E,E,3,[[["self"]],[R[26]]]],[11,"size",E,E,3,[[["self"]],[R[4]]]],[11,"is_cool",E,E,3,[[[R[4]]],["bool"]]],[11,R[1272],E,E,3,[[[R[4]]],[T]]],[11,R[1273],E,E,3,[[[R[4]]],[T]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[20],E,E,4,[[[U]],[R[23]]]],[11,"into",E,E,4,[[],[U]]],[11,R[21],E,E,4,[[],[R[23]]]],[11,R[25],E,E,4,[[["self"]],[T]]],[11,R[22],E,E,4,[[["self"]],[T]]],[11,R[24],E,E,4,[[["self"]],[R[26]]]],[11,"size",E,E,4,[[["self"]],[R[4]]]],[11,"is_cool",E,E,4,[[[R[4]]],["bool"]]],[11,R[1272],E,E,4,[[[R[4]]],[T]]],[11,R[1273],E,E,4,[[[R[4]]],[T]]],[11,"from",R[1831],E,5,[[[T]],[T]]],[11,R[20],E,E,5,[[[U]],[R[23]]]],[11,"into",E,E,5,[[],[U]]],[11,R[21],E,E,5,[[],[R[23]]]],[11,R[25],E,E,5,[[["self"]],[T]]],[11,R[22],E,E,5,[[["self"]],[T]]],[11,R[24],E,E,5,[[["self"]],[R[26]]]],[11,"size",E,E,5,[[["self"]],[R[4]]]],[11,"is_cool",E,E,5,[[[R[4]]],["bool"]]],[11,R[1272],E,E,5,[[[R[4]]],[T]]],[11,R[1273],E,E,5,[[[R[4]]],[T]]],[11,R[189],E,E,5,[[["self"]],[T]]],[11,R[187],E,E,5,[[["self"],[T]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[20],E,E,6,[[[U]],[R[23]]]],[11,"into",E,E,6,[[],[U]]],[11,R[21],E,E,6,[[],[R[23]]]],[11,R[25],E,E,6,[[["self"]],[T]]],[11,R[22],E,E,6,[[["self"]],[T]]],[11,R[24],E,E,6,[[["self"]],[R[26]]]],[11,"size",E,E,6,[[["self"]],[R[4]]]],[11,"is_cool",E,E,6,[[[R[4]]],["bool"]]],[11,R[1272],E,E,6,[[[R[4]]],[T]]],[11,R[1273],E,E,6,[[[R[4]]],[T]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[20],E,E,7,[[[U]],[R[23]]]],[11,"into",E,E,7,[[],[U]]],[11,R[21],E,E,7,[[],[R[23]]]],[11,R[25],E,E,7,[[["self"]],[T]]],[11,R[22],E,E,7,[[["self"]],[T]]],[11,R[24],E,E,7,[[["self"]],[R[26]]]],[11,"size",E,E,7,[[["self"]],[R[4]]]],[11,"is_cool",E,E,7,[[[R[4]]],["bool"]]],[11,R[1272],E,E,7,[[[R[4]]],[T]]],[11,R[1273],E,E,7,[[[R[4]]],[T]]],[11,R[189],E,E,7,[[["self"]],[T]]],[11,R[187],E,E,7,[[["self"],[T]]]],[11,"drop",R[1828],"Redraw the zone where the buffer was when dropping it, to…",1,[[["self"]]]],[11,"deref",R[1830],E,4,[[["self"]],["mutex"]]],[11,"clone",E,E,2,[[["self"]],["vbecolor"]]],[11,"clone",R[1831],E,5,[[["self"]],["pos"]]],[11,"clone",E,E,7,[[["self"]],[R[1832]]]],[11,"clone",R[1828],E,8,[[["self"]],[R[1833]]]],[11,"clone",E,E,1,[[["self"]],["ibuffer"]]],[11,"fmt",R[1830],E,2,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1831],E,5,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[1828],E,8,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,0,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,1,[[["self"],[R[28]]],[R[23]]]],[11,R[823],R[1831],E,6,[[["self"],["str"]],[["error"],[R[23],["error"]]]]],[11,R[49],R[1828],E,8,[[],[R[1833]]]],[11,R[1320],E,R[1321],8,[[["self"],["u32"],[R[1265]],["i32"],[R[1221]]],[[R[1319]],["error"],[R[23],[R[1319],"error"]]]]],[11,R[1322],E,"Gets the screen (width, height) in pixels.",8,[[["self"],[R[1265]]],[[R[23],["error"]],["error"]]]],[11,R[1324],E,E,8,[[["self"],[R[1265]]],[["u32"],[R[23],["u32","error"]],["error"]]]],[11,R[1326],E,E,8,[[["self"],["u32"],[R[1265]],["i32"],[R[1221]]],[[R[23],[R[1328],"error"]],["error"],[R[1328]]]]],[11,"draw",E,R[1330],1,[[["self"],[R[1265]]],[[R[23],["error"]],["error"]]]],[11,"read",R[1831],E,7,[[["self"],[R[1265]]],[[R[1309],[R[23]]],[R[23],["u64","error"]]]]],[11,"write",E,E,7,[[["self"],[R[1265]]],[[R[23],["error"]],[R[1309],[R[23]]]]]],[11,R[231],R[1830],E,4,[[["self"]]]]],"p":[[3,"Buffer"],[3,"IBuffer"],[3,"VBEColor"],[3,R[1834]],[3,R[1819]],[3,"Pos"],[3,"Terminal"],[3,R[1835]],[3,R[1570]]]};
searchIndex["sunrise_wall_clock"]={"doc":"Clock applet","i":[[3,R[1638],"sunrise_wall_clock","Wrapper to a TimeZoneRule to enforce alignment requirement",N,N],[12,"inner",E,"The timezone rule",0,N],[5,"get_day_of_week",E,"Turns a day of week number from RTC into an english…",N,[[["u8"]],["str"]]],[5,"get_month",E,"Turns a month number from RTC into an english string.",N,[[["u8"]],["str"]]],[5,"write_calendar",E,"Write a wall clock time into the terminal.",N,[[["bool"],["bstr"],[R[1623]]]]],[5,"main",E,E,N,[[]]],[7,"TIMEZONE_RULE",E,"An instance to a custom TimeZoneRule",N,N],[7,"HEADER",E,E,N,N],[7,R[1630],E,E,N,N],[11,R[20],E,E,0,[[[U]],[R[23]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[21],E,E,0,[[],[R[23]]]],[11,R[25],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],[T]]],[11,R[24],E,E,0,[[["self"]],[R[26]]]],[11,"size",E,E,0,[[["self"]],[R[4]]]],[11,"is_cool",E,E,0,[[[R[4]]],["bool"]]],[11,R[1272],E,E,0,[[[R[4]]],[T]]],[11,R[1273],E,E,0,[[[R[4]]],[T]]]],"p":[[3,R[1638]]]};
searchIndex["swipc_gen"]={"doc":"SwIPC Code Generator","i":[[5,R[354],R[356],R[355],N,[[["bool"],["str"],["string"]],["string"]]],[0,"gen_rust_code",E,"Code generation implementation",N,N],[3,R[359],R[357],"SwIPC builtin type. Associates a SwIPC builtin name with a…",N,N],[12,R[60],E,E,0,N],[3,"Mod",E,"A module hierarchy.",N,N],[12,"types",E,"Generated code for the types at the current level of the…",1,N],[12,"ifaces",E,"Generated code for the ifaces at the current level of the…",1,N],[12,"mods",E,"Mapping from string to submodule hierarchy.",1,N],[4,"Error",E,"Internal error type. Raised whenever we fail to generate…",N,N],[13,"UnsupportedStruct",E,"This generation unit contains an unsupported type. We…",2,N],[5,"remap_keywords",E,"Rename field names that would conflict with rust keywords.",N,[[["str"]],["str"]]],[5,"is_raw",E,"Checks if an alias contains a raw data type (as opposed to…",N,[[["alias"]],["bool"]]],[5,"named_iterator",E,"Takes an iterator of potentially unnamed…",N,[[["i"],["bool"]]]],[5,"raw_iterator",E,"Creates an iterator over the raw values from an…",N,[[["i"],["bool"]]]],[5,"format_args",E,"Format the arguments of a function.",N,[[["bool"]],[["string"],["error"],[R[23],["string","error"]]]]],[5,"format_ret_ty",E,"Format the return type of a function.",N,[[["bool"]],[["string"],["error"],[R[23],["string","error"]]]]],[5,"get_handle_type",E,"Get the Rust equivalent of a handle type.",N,[[[R[5]]],[["str"],[R[5],["str"]]]]],[5,"format_ret",E,"Generate code to recover a single return value from an…",N,[[],[["string"],["error"],[R[23],["string","error"]]]]],[5,"get_type",E,"Get the Rust type of an [Alias]. If output is true, then…",N,[[["alias"],["str"],["bool"]],[["string"],["error"],[R[23],["string","error"]]]]],[5,"gen_in_raw",E,"Generates the InRaw structure from the argument list of a…",N,[[["func"],["string"]],[[R[23],["str","error"]],["error"],["str"]]]],[5,"gen_out_raw",E,"Generates the OutRaw structure from the return param list…",N,[[["func"],["string"]],[[R[23],["str","error"]],["error"],["str"]]]],[5,"format_cmd",E,"Generate code for a single function.",N,[[["func"]],[["string"],["error"],[R[23],["string","error"]]]]],[5,"format_type",E,"Create a new type definition. For a `TypeDef::Struct`,…",N,[[["typedef"],["str"]],[["string"],["error"],[R[23],["string","error"]]]]],[5,"generate_mod",E,"Generate the module hierarchy. The depth should be set to…",N,[[["mod"],[R[4]],["str"],["bool"]],["string"]]],[5,"gen_call",E,"Parse an incoming request, call the appropriate function…",N,[[["func"],["bool"]],[["string"],["error"],[R[23],["string","error"]]]]],[5,"generate_trait_async",E,"Generate a trait representing an async IPC interface.…",N,[[["str"],[R[333]]],["string"]]],[5,"generate_trait",E,"Generate a trait representing an IPC interface.…",N,[[["str"],[R[333]]],["string"]]],[5,"generate_proxy",E,"Generate a \"proxy\" interface (nomenclature shamelessly…",N,[[["str"],[R[333]]],["string"]]],[5,R[354],E,R[355],N,[[["bool"],["str"],["string"]],["string"]]],[7,R[359],E,E,N,N],[0,"itemmod",R[356],"Mod parser",N,N],[3,"ItemMod",R[358],"A module or module declaration: `mod m` or `mod m { ... }`.",N,N],[12,"attrs",E,E,3,N],[12,"vis",E,E,3,N],[12,"mod_token",E,E,3,N],[12,"ident",E,E,3,N],[12,"content",E,"Optional content of the module. The TokenStream contains…",3,N],[12,"semi",E,E,3,N],[11,"from",R[357],E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[20],E,E,0,[[[U]],[R[23]]]],[11,R[21],E,E,0,[[],[R[23]]]],[11,R[25],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],[T]]],[11,R[24],E,E,0,[[["self"]],[R[26]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[20],E,E,1,[[[U]],[R[23]]]],[11,R[21],E,E,1,[[],[R[23]]]],[11,R[25],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"]],[T]]],[11,R[24],E,E,1,[[["self"]],[R[26]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[20],E,E,2,[[[U]],[R[23]]]],[11,R[21],E,E,2,[[],[R[23]]]],[11,R[25],E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"]],[T]]],[11,R[24],E,E,2,[[["self"]],[R[26]]]],[11,"from",R[358],E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[20],E,E,3,[[[U]],[R[23]]]],[11,R[21],E,E,3,[[],[R[23]]]],[11,R[25],E,E,3,[[["self"]],[T]]],[11,R[22],E,E,3,[[["self"]],[T]]],[11,R[24],E,E,3,[[["self"]],[R[26]]]],[11,"deref",R[357],E,0,[[["self"]],["hashmap"]]],[11,"fmt",E,E,2,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,1,[[["self"],[R[28]]],[R[23]]]],[11,R[231],E,E,0,[[["self"]]]],[11,"parse",R[358],E,3,[[["parsestream"]],[R[23]]]]],"p":[[3,R[359]],[3,"Mod"],[4,"Error"],[3,"ItemMod"]]};
searchIndex["swipc_parser"]={"doc":"Efficient parser for the SwIPC files","i":[[3,"TypeDef",R[334],R[330],N,N],[12,"doc",E,E,0,N],[12,"name",E,E,0,N],[12,"ty",E,E,0,N],[3,"Struct",E,"Struct definition.",N,N],[12,"size",E,E,1,N],[12,"fields",E,E,1,N],[3,"Enum",E,"Enum definition.",N,N],[12,"tyname",E,E,2,N],[12,"fields",E,E,2,N],[3,"Func",E,"A function on an interface.",N,N],[12,"doc",E,E,3,N],[12,"decorators",E,E,3,N],[12,"num",E,E,3,N],[12,"name",E,E,3,N],[12,"args",E,E,3,N],[12,"ret",E,E,3,N],[3,R[331],E,"An interface definition.",N,N],[12,"doc",E,E,4,N],[12,"name",E,E,4,N],[12,"service_list",E,E,4,N],[12,"funcs",E,E,4,N],[3,"Ctx",E,"The context returned by a successful parse. Contains…",N,N],[12,"types",E,E,5,N],[12,"interfaces",E,E,5,N],[4,R[336],E,"Type of a Handle. Represents all the kernel handle types…",N,N],[13,"Process",E,E,6,N],[13,"Thread",E,E,6,N],[13,"Debug",E,E,6,N],[13,"CodeMemory",E,E,6,N],[13,R[328],E,E,6,N],[13,R[329],E,E,6,N],[13,R[710],E,E,6,N],[13,R[709],E,E,6,N],[13,R[703],E,E,6,N],[13,R[702],E,E,6,N],[13,"ServerLightSession",E,E,6,N],[13,"ClientLightSession",E,E,6,N],[13,R[665],E,E,6,N],[13,R[666],E,E,6,N],[13,"IrqEvent",E,E,6,N],[13,"DeviceAddressSpace",E,E,6,N],[4,"Alias",E,"A type alias.",N,N],[13,"Array",E,"Buffer Array. Equivalent to buffer<data_type,…",7,N],[13,"Buffer",E,"An IPC Buffer transfering untyped data. First argument…",7,N],[13,"Object",E,"An IPC Object implementing the given interface.",7,N],[13,"Bytes",E,"A byte blob of the given size.",7,N],[13,"Align",E,"Forces the alignment to the given size for the given…",7,N],[13,"Handle",E,"A Kernel Handle of the given type. If the first argument…",7,N],[13,"Pid",E,"A Pid.",7,N],[13,"Other",E,"Either a builtin or another structure.",7,N],[4,"Type",E,R[330],N,N],[13,"Struct",E,"Creates a new structure",8,N],[13,"Enum",E,"Creates a new enum",8,N],[13,"Alias",E,"Creates a new type alias",8,N],[4,R[337],E,"Represents a decorator.",N,N],[13,"Undocumented",E,"Can be attached to a function to specify that its types…",9,N],[13,"Version",E,"Can be attached to a function to specify that the function…",9,N],[13,"ManagedPort",E,"Can be attached to a service to tag it as a kernel-managed…",9,N],[13,"Unknown",E,"A decorator not known by this parser.",9,N],[4,"Def",E,"A top-level item. Can either be a type definition, or an…",N,N],[13,"Type",E,E,10,N],[13,R[331],E,E,10,N],[5,"parse_comment",E,E,N,[[["pairs"]],["string"]]],[5,"parse_name",E,E,N,[[["pairs"]],["str"]]],[5,"parse_number",E,E,N,[[["pairs"]],["u64"]]],[5,"parse_struct",E,E,N,[[["rule"],["pairs",["rule"]]],["struct"]]],[5,"parse_enum",E,E,N,[[["rule"],["pairs",["rule"]]],["enum"]]],[5,"parse_alias",E,E,N,[[["rule"],["pairs",["rule"]]],["alias"]]],[5,"parse_type",E,E,N,[[["pairs"]],["type"]]],[5,"parse_type_def",E,E,N,[[["rule"],["pairs",["rule"]]],["typedef"]]],[5,"parse_service_name_list",E,E,N,[[["pairs"]],["vec"]]],[5,"parse_version_number",E,E,N,[[["pairs"]],["string"]]],[5,"parse_decorators",E,E,N,[[["pairs"]],[["vec",[R[332]]],[R[332]]]]],[5,"parse_named_type",E,E,N,[[["pair",["rule"]],["rule"]]]],[5,"parse_named_tuple",E,E,N,[[["pairs"]],["vec"]]],[5,"parse_func",E,E,N,[[["pair",["rule"]],["rule"]],["func"]]],[5,"parse_interface",E,E,N,[[["rule"],["pairs",["rule"]]],[R[333]]]],[5,"parse_def",E,E,N,[[["rule"],["pairs",["rule"]]],["def"]]],[5,"parse",E,"Parse the given string into a SwIPC [Ctx].",N,[[["str"]],["ctx"]]],[0,"pest_parser",E,E,N,N],[3,R[338],R[335],E,N,N],[4,"Rule",E,E,N,N],[13,"EOI",E,E,11,N],[13,"start",E,E,11,N],[13,"number",E,E,11,N],[13,"def",E,E,11,N],[13,"expression",E,E,11,N],[13,"name",E,E,11,N],[13,"iname",E,E,11,N],[13,"sname",E,E,11,N],[13,"serviceNameList",E,E,11,N],[13,"structField",E,E,11,N],[13,"enumField",E,E,11,N],[13,"structTemplate",E,E,11,N],[13,"structure",E,E,11,N],[13,"enumeration",E,E,11,N],[13,"aliasArray",E,E,11,N],[13,"aliasBuffer",E,E,11,N],[13,"aliasObject",E,E,11,N],[13,"aliasBytes",E,E,11,N],[13,"aliasAlign",E,E,11,N],[13,"aliasPid",E,E,11,N],[13,"handleIsCopy",E,E,11,N],[13,"handleType",E,E,11,N],[13,"aliasHandle",E,E,11,N],[13,"alias",E,E,11,N],[13,"ty",E,E,11,N],[13,"typeDef",E,E,11,N],[13,R[333],E,E,11,N],[13,"namedTuple",E,E,11,N],[13,"namedType",E,E,11,N],[13,"comment",E,E,11,N],[13,"versionNumber",E,E,11,N],[13,"range",E,E,11,N],[13,R[332],E,E,11,N],[13,"versionPlus",E,E,11,N],[13,"versionDecorator",E,E,11,N],[13,"undocumentedDecorator",E,E,11,N],[13,"managedportDecorator",E,E,11,N],[13,"unknownDecorator",E,E,11,N],[13,"funcDef",E,E,11,N],[13,"WHITESPACE",E,E,11,N],[13,"COMMENT",E,E,11,N],[17,"_PEST_GRAMMAR_SwipcParser",E,E,N,N],[11,"from",R[334],E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[20],E,E,0,[[[U]],[R[23]]]],[11,R[21],E,E,0,[[],[R[23]]]],[11,R[25],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],[T]]],[11,R[24],E,E,0,[[["self"]],[R[26]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[20],E,E,1,[[[U]],[R[23]]]],[11,R[21],E,E,1,[[],[R[23]]]],[11,R[25],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"]],[T]]],[11,R[24],E,E,1,[[["self"]],[R[26]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[20],E,E,2,[[[U]],[R[23]]]],[11,R[21],E,E,2,[[],[R[23]]]],[11,R[25],E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"]],[T]]],[11,R[24],E,E,2,[[["self"]],[R[26]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[20],E,E,3,[[[U]],[R[23]]]],[11,R[21],E,E,3,[[],[R[23]]]],[11,R[25],E,E,3,[[["self"]],[T]]],[11,R[22],E,E,3,[[["self"]],[T]]],[11,R[24],E,E,3,[[["self"]],[R[26]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[20],E,E,4,[[[U]],[R[23]]]],[11,R[21],E,E,4,[[],[R[23]]]],[11,R[25],E,E,4,[[["self"]],[T]]],[11,R[22],E,E,4,[[["self"]],[T]]],[11,R[24],E,E,4,[[["self"]],[R[26]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[20],E,E,5,[[[U]],[R[23]]]],[11,R[21],E,E,5,[[],[R[23]]]],[11,R[25],E,E,5,[[["self"]],[T]]],[11,R[22],E,E,5,[[["self"]],[T]]],[11,R[24],E,E,5,[[["self"]],[R[26]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[20],E,E,6,[[[U]],[R[23]]]],[11,R[21],E,E,6,[[],[R[23]]]],[11,R[25],E,E,6,[[["self"]],[T]]],[11,R[22],E,E,6,[[["self"]],[T]]],[11,R[24],E,E,6,[[["self"]],[R[26]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[20],E,E,7,[[[U]],[R[23]]]],[11,R[21],E,E,7,[[],[R[23]]]],[11,R[25],E,E,7,[[["self"]],[T]]],[11,R[22],E,E,7,[[["self"]],[T]]],[11,R[24],E,E,7,[[["self"]],[R[26]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[20],E,E,8,[[[U]],[R[23]]]],[11,R[21],E,E,8,[[],[R[23]]]],[11,R[25],E,E,8,[[["self"]],[T]]],[11,R[22],E,E,8,[[["self"]],[T]]],[11,R[24],E,E,8,[[["self"]],[R[26]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[],[U]]],[11,R[20],E,E,9,[[[U]],[R[23]]]],[11,R[21],E,E,9,[[],[R[23]]]],[11,R[25],E,E,9,[[["self"]],[T]]],[11,R[22],E,E,9,[[["self"]],[T]]],[11,R[24],E,E,9,[[["self"]],[R[26]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,"into",E,E,10,[[],[U]]],[11,R[20],E,E,10,[[[U]],[R[23]]]],[11,R[21],E,E,10,[[],[R[23]]]],[11,R[25],E,E,10,[[["self"]],[T]]],[11,R[22],E,E,10,[[["self"]],[T]]],[11,R[24],E,E,10,[[["self"]],[R[26]]]],[11,"from",R[335],E,12,[[[T]],[T]]],[11,"into",E,E,12,[[],[U]]],[11,R[20],E,E,12,[[[U]],[R[23]]]],[11,R[21],E,E,12,[[],[R[23]]]],[11,R[25],E,E,12,[[["self"]],[T]]],[11,R[22],E,E,12,[[["self"]],[T]]],[11,R[24],E,E,12,[[["self"]],[R[26]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,"into",E,E,11,[[],[U]]],[11,R[189],E,E,11,[[["self"]],[T]]],[11,R[187],E,E,11,[[["self"],[T]]]],[11,R[20],E,E,11,[[[U]],[R[23]]]],[11,R[21],E,E,11,[[],[R[23]]]],[11,R[25],E,E,11,[[["self"]],[T]]],[11,R[22],E,E,11,[[["self"]],[T]]],[11,R[24],E,E,11,[[["self"]],[R[26]]]],[11,"eq",E,E,11,[[["self"],["rule"]],["bool"]]],[11,"clone",E,E,11,[[["self"]],["rule"]]],[11,R[212],E,E,11,[[["self"],["rule"]],[[R[47]],[R[5],[R[47]]]]]],[11,R[211],E,E,11,[[["self"]]]],[11,"cmp",E,E,11,[[["self"],["rule"]],[R[47]]]],[11,"fmt",E,E,11,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",R[334],E,0,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,1,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,2,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,6,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,7,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,8,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,9,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,3,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,4,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,10,[[["self"],[R[28]]],[R[23]]]],[11,"fmt",E,E,5,[[["self"],[R[28]]],[R[23]]]],[11,"hash",R[335],E,11,[[["self"],["__h"]]]],[11,"parse",E,E,12,[[["rule"],["str"]],[["pairs",["rule"]],["error",["rule"]],[R[23],["pairs","error"]]]]]],"p":[[3,"TypeDef"],[3,"Struct"],[3,"Enum"],[3,"Func"],[3,R[331]],[3,"Ctx"],[4,R[336]],[4,"Alias"],[4,"Type"],[4,R[337]],[4,"Def"],[4,"Rule"],[3,R[338]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);